

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Jul 27 11:52:39 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0094                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  0091                     	;# 
   174  0092                     	;# 
   175  0093                     	;# 
   176  0094                     	;# 
   177  0098                     	;# 
   178  0099                     	;# 
   179  009C                     	;# 
   180  009D                     	;# 
   181  009E                     	;# 
   182  009F                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  010F                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  000E                     	;# 
   205  000F                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0013                     	;# 
   210  0014                     	;# 
   211  0015                     	;# 
   212  0015                     	;# 
   213  0016                     	;# 
   214  0017                     	;# 
   215  0018                     	;# 
   216  0019                     	;# 
   217  001A                     	;# 
   218  001B                     	;# 
   219  001B                     	;# 
   220  001C                     	;# 
   221  001D                     	;# 
   222  001E                     	;# 
   223  001F                     	;# 
   224  0081                     	;# 
   225  0085                     	;# 
   226  0086                     	;# 
   227  0087                     	;# 
   228  0088                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0094                     	;# 
   237  0098                     	;# 
   238  0099                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  010C                     	;# 
   244  010D                     	;# 
   245  010E                     	;# 
   246  010F                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  000E                     	;# 
   265  000F                     	;# 
   266  0010                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0014                     	;# 
   271  0015                     	;# 
   272  0015                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001B                     	;# 
   280  001C                     	;# 
   281  001D                     	;# 
   282  001E                     	;# 
   283  001F                     	;# 
   284  0081                     	;# 
   285  0085                     	;# 
   286  0086                     	;# 
   287  0087                     	;# 
   288  0088                     	;# 
   289  0089                     	;# 
   290  008C                     	;# 
   291  008D                     	;# 
   292  008E                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0093                     	;# 
   296  0094                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009C                     	;# 
   300  009D                     	;# 
   301  009E                     	;# 
   302  009F                     	;# 
   303  010C                     	;# 
   304  010D                     	;# 
   305  010E                     	;# 
   306  010F                     	;# 
   307  018C                     	;# 
   308  018D                     	;# 
   309  0005                     _PORTA	set	5
   310  0006                     _PORTB	set	6
   311  0007                     _PORTC	set	7
   312  0008                     _PORTD	set	8
   313  0009                     _PORTE	set	9
   314  0013                     _SSPBUF	set	19
   315  0014                     _SSPCON	set	20
   316  005F                     _GIE	set	95
   317  005C                     _INTE	set	92
   318  0059                     _INTF	set	89
   319  005E                     _PEIE	set	94
   320  0034                     _RB4	set	52
   321  0035                     _RB5	set	53
   322  0081                     _OPTION_REG	set	129
   323  0093                     _SSPADD	set	147
   324  0094                     _SSPSTAT	set	148
   325  0094                     _SSPSTATbits	set	148
   326  0085                     _TRISA	set	133
   327  0086                     _TRISB	set	134
   328  0087                     _TRISC	set	135
   329  0088                     _TRISD	set	136
   330  0089                     _TRISE	set	137
   331  048D                     _ACKDT	set	1165
   332  048C                     _ACKEN	set	1164
   333  048E                     _ACKSTAT	set	1166
   334  04A0                     _BF	set	1184
   335  048A                     _PEN	set	1162
   336  048B                     _RCEN	set	1163
   337  0489                     _RSEN	set	1161
   338  0488                     _SEN	set	1160
   339  043B                     _TRISC3	set	1083
   340  043C                     _TRISC4	set	1084
   341                           
   342                           	psect	strings
   343  0800                     __pstrings:	
   344  0800                     stringtab:	
   345  0800                     __stringtab:	
   346  0800                     stringcode:	
   347                           ;	String table - string pointers are 1 byte each
   348                           
   349  0800                     stringdir:	
   350  0800  3008               	movlw	high stringdir
   351  0801  008A               	movwf	10
   352  0802  0804               	movf	4,w
   353  0803  0A84               	incf	4,f
   354  0804  0782               	addwf	2,f
   355  0805                     __stringbase:	
   356  0805  3400               	retlw	0
   357  0806                     __end_of__stringtab:	
   358  0806                     STR_4:	
   359  0806  3465               	retlw	101	;'e'
   360  0807  346E               	retlw	110	;'n'
   361  0808  3461               	retlw	97	;'a'
   362  0809  3462               	retlw	98	;'b'
   363  080A  346C               	retlw	108	;'l'
   364  080B  3465               	retlw	101	;'e'
   365  080C  3420               	retlw	32	;' '
   366  080D  3473               	retlw	115	;'s'
   367  080E  3465               	retlw	101	;'e'
   368  080F  346E               	retlw	110	;'n'
   369  0810  3473               	retlw	115	;'s'
   370  0811  346F               	retlw	111	;'o'
   371  0812  3472               	retlw	114	;'r'
   372  0813  3400               	retlw	0
   373  0814                     STR_1:	
   374  0814  3467               	retlw	103	;'g'
   375  0815  3465               	retlw	101	;'e'
   376  0816  3473               	retlw	115	;'s'
   377  0817  3474               	retlw	116	;'t'
   378  0818  3475               	retlw	117	;'u'
   379  0819  3472               	retlw	114	;'r'
   380  081A  3465               	retlw	101	;'e'
   381  081B  3420               	retlw	32	;' '
   382  081C  3474               	retlw	116	;'t'
   383  081D  3465               	retlw	101	;'e'
   384  081E  3473               	retlw	115	;'s'
   385  081F  3474               	retlw	116	;'t'
   386  0820  3400               	retlw	0
   387  0821                     STR_2:	
   388  0821  3449               	retlw	73	;'I'
   389  0822  346E               	retlw	110	;'n'
   390  0823  3469               	retlw	105	;'i'
   391  0824  3474               	retlw	116	;'t'
   392  0825  3469               	retlw	105	;'i'
   393  0826  3461               	retlw	97	;'a'
   394  0827  346C               	retlw	108	;'l'
   395  0828  3469               	retlw	105	;'i'
   396  0829  347A               	retlw	122	;'z'
   397  082A  3465               	retlw	101	;'e'
   398  082B  3400               	retlw	0
   399  082C                     STR_5:	
   400  082C  3473               	retlw	115	;'s'
   401  082D  3474               	retlw	116	;'t'
   402  082E  3420               	retlw	32	;' '
   403  082F  3477               	retlw	119	;'w'
   404  0830  3472               	retlw	114	;'r'
   405  0831  346F               	retlw	111	;'o'
   406  0832  346E               	retlw	110	;'n'
   407  0833  3467               	retlw	103	;'g'
   408  0834  3400               	retlw	0
   409  0835                     STR_3:	
   410  0835  3445               	retlw	69	;'E'
   411  0836  3472               	retlw	114	;'r'
   412  0837  3472               	retlw	114	;'r'
   413  0838  346F               	retlw	111	;'o'
   414  0839  3472               	retlw	114	;'r'
   415  083A  3400               	retlw	0
   416  083B                     STR_9:	
   417  083B  3472               	retlw	114	;'r'
   418  083C  3469               	retlw	105	;'i'
   419  083D  3467               	retlw	103	;'g'
   420  083E  3468               	retlw	104	;'h'
   421  083F  3474               	retlw	116	;'t'
   422  0840  3400               	retlw	0
   423  0841                     STR_12:	
   424  0841  344E               	retlw	78	;'N'
   425  0842  344F               	retlw	79	;'O'
   426  0843  344E               	retlw	78	;'N'
   427  0844  3445               	retlw	69	;'E'
   428  0845  3400               	retlw	0
   429  0846                     STR_7:	
   430  0846  3464               	retlw	100	;'d'
   431  0847  346F               	retlw	111	;'o'
   432  0848  3477               	retlw	119	;'w'
   433  0849  346E               	retlw	110	;'n'
   434  084A  3400               	retlw	0
   435  084B                     STR_10:	
   436  084B  346E               	retlw	110	;'n'
   437  084C  3465               	retlw	101	;'e'
   438  084D  3461               	retlw	97	;'a'
   439  084E  3472               	retlw	114	;'r'
   440  084F  3400               	retlw	0
   441  0850                     STR_8:	
   442  0850  346C               	retlw	108	;'l'
   443  0851  3465               	retlw	101	;'e'
   444  0852  3466               	retlw	102	;'f'
   445  0853  3474               	retlw	116	;'t'
   446  0854  3400               	retlw	0
   447  0855                     STR_11:	
   448  0855  3466               	retlw	102	;'f'
   449  0856  3461               	retlw	97	;'a'
   450  0857  3472               	retlw	114	;'r'
   451  0858  3400               	retlw	0
   452  0859                     STR_6:	
   453  0859  3475               	retlw	117	;'u'
   454  085A  3470               	retlw	112	;'p'
   455  085B  3400               	retlw	0
   456                           
   457                           ; #config settings
   458  0000                     
   459                           	psect	cinit
   460  0015                     start_initialization:	
   461  0015                     __initialization:	
   462                           
   463                           ; Clear objects allocated to COMMON
   464  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   465  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   466  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   467  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   468                           
   469                           ; Clear objects allocated to BANK0
   470  0019  1383               	bcf	3,7	;select IRP bank0
   471  001A  305C               	movlw	low __pbssBANK0
   472  001B  0084               	movwf	4
   473  001C  306E               	movlw	low (__pbssBANK0+18)
   474  001D  160A  118A  2783  120A  118A  	fcall	clear_ram0
   475                           
   476                           ; Clear objects allocated to BANK1
   477  0022  30E3               	movlw	low __pbssBANK1
   478  0023  0084               	movwf	4
   479  0024  30ED               	movlw	low (__pbssBANK1+10)
   480  0025  160A  118A  2783  120A  118A  	fcall	clear_ram0
   481                           
   482                           ; Clear objects allocated to BANK2
   483  002A  1783               	bsf	3,7	;select IRP bank2
   484  002B  3010               	movlw	low __pbssBANK2
   485  002C  0084               	movwf	4
   486  002D  3054               	movlw	low (__pbssBANK2+68)
   487  002E  160A  118A  2783   	fcall	clear_ram0
   488  0031                     end_of_initialization:	
   489                           ;End of C runtime variable initialization code
   490                           
   491  0031                     __end_of__initialization:	
   492  0031  0183               	clrf	3
   493  0032  120A  158A  2E1A   	ljmp	_main	;jump to C main() function
   494                           
   495                           	psect	bssCOMMON
   496  0076                     __pbssCOMMON:	
   497  0076                     _id:	
   498  0076                     	ds	2
   499  0078                     _t:	
   500  0078                     	ds	2
   501                           
   502                           	psect	bssBANK0
   503  005C                     __pbssBANK0:	
   504  005C                     _gesture_far_count_:	
   505  005C                     	ds	2
   506  005E                     _gesture_lr_count_:	
   507  005E                     	ds	2
   508  0060                     _gesture_lr_delta_:	
   509  0060                     	ds	2
   510  0062                     _gesture_motion_:	
   511  0062                     	ds	2
   512  0064                     _gesture_near_count_:	
   513  0064                     	ds	2
   514  0066                     _gesture_state_:	
   515  0066                     	ds	2
   516  0068                     _gesture_ud_count_:	
   517  0068                     	ds	2
   518  006A                     _gesture_ud_delta_:	
   519  006A                     	ds	2
   520  006C                     _b_i2c_error_flag:	
   521  006C                     	ds	1
   522  006D                     _handleGestureFlag:	
   523  006D                     	ds	1
   524                           
   525                           	psect	bssBANK1
   526  00E3                     __pbssBANK1:	
   527  00E3                     lcd_bcd@F1131:	
   528  00E3                     	ds	10
   529                           
   530                           	psect	bssBANK2
   531  0110                     __pbssBANK2:	
   532  0110                     _gesture_data_:	
   533  0110                     	ds	68
   534                           
   535                           	psect	clrtext
   536  1783                     clear_ram0:	
   537                           ;	Called with FSR containing the base address, and
   538                           ;	W with the last address+1
   539                           
   540  1783  0064               	clrwdt	;clear the watchdog before getting into this loop
   541  1784                     clrloop0:	
   542  1784  0180               	clrf	0	;clear RAM location pointed to by FSR
   543  1785  0A84               	incf	4,f	;increment pointer
   544  1786  0604               	xorwf	4,w	;XOR with final address
   545  1787  1903               	btfsc	3,2	;have we reached the end yet?
   546  1788  3400               	retlw	0	;all done for this memory range, return
   547  1789  0604               	xorwf	4,w	;XOR again to restore value
   548  178A  2F84               	goto	clrloop0	;do the next byte
   549                           
   550                           	psect	cstackBANK3
   551  0190                     __pcstackBANK3:	
   552  0190                     readGesture@fifo_data:	
   553                           
   554                           ; 64 bytes @ 0x0
   555  0190                     	ds	64
   556                           
   557                           	psect	cstackBANK1
   558  00A0                     __pcstackBANK1:	
   559  00A0                     readGesture@fifo_data2:	
   560                           
   561                           ; 64 bytes @ 0x0
   562  00A0                     	ds	64
   563  00E0                     ??_main:	
   564                           
   565                           ; 0 bytes @ 0x40
   566  00E0                     	ds	3
   567                           
   568                           	psect	cstackCOMMON
   569  0070                     __pcstackCOMMON:	
   570  0070                     ?_lcd_initialize:	
   571  0070                     ?_lcd_goto:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0070                     ?_lcd_putstr:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0070                     ?_lcd_clear:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0070                     ?_lcd_home:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0070                     ?_handleGesture:	
   584                           ; 0 bytes @ 0x0
   585                           
   586  0070                     ?_InitI2C:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0070                     ?_resetGestureParameters:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_I2C_Start:	
   593                           ; 0 bytes @ 0x0
   594                           
   595  0070                     ?_I2C_Write_Byte:	
   596                           ; 0 bytes @ 0x0
   597                           
   598  0070                     ?_I2C_ReStart:	
   599                           ; 0 bytes @ 0x0
   600                           
   601  0070                     ?_I2C_Send_NACK:	
   602                           ; 0 bytes @ 0x0
   603                           
   604  0070                     ?_I2C_Stop:	
   605                           ; 0 bytes @ 0x0
   606                           
   607  0070                     ?_set_lcd_e:	
   608                           ; 0 bytes @ 0x0
   609                           
   610  0070                     ?_set_lcd_rs:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0070                     ?_set_lcd_data:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0070                     ?_isr:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0070                     ??_isr:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_lcd_2ndline:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?_lcd_putchar:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_initialize:	
   629                           ; 0 bytes @ 0x0
   630                           
   631  0070                     ?_enableGestureSensor:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_isGestureAvailable:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_wireReadDataByte:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_setLEDDrive:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_setProximityGain:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_setAmbientLightGain:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_setProxIntLowThresh:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_setProxIntHighThresh:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_setGestureEnterThresh:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_setGestureExitThresh:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_setGestureGain:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_setGestureLEDDrive:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_setGestureWaitTime:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_setGestureIntEnable:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_getMode:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_setLEDBoost:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_setGestureMode:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_enablePower:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_processGestureData:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_decodeGesture:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_I2C_Read_Byte:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_main:	
   695                           ; 1 bytes @ 0x0
   696                           
   697                           
   698                           ; 2 bytes @ 0x0
   699  0070                     	ds	4
   700  0074                     ?_DelayMs:	
   701  0074                     ??_InitI2C:	
   702                           ; 0 bytes @ 0x4
   703                           
   704  0074                     ??_resetGestureParameters:	
   705                           ; 0 bytes @ 0x4
   706                           
   707  0074                     ??_decodeGesture:	
   708                           ; 0 bytes @ 0x4
   709                           
   710  0074                     ??_I2C_Start:	
   711                           ; 0 bytes @ 0x4
   712                           
   713  0074                     ??_I2C_Write_Byte:	
   714                           ; 0 bytes @ 0x4
   715                           
   716  0074                     ??_I2C_ReStart:	
   717                           ; 0 bytes @ 0x4
   718                           
   719  0074                     ??_I2C_Send_NACK:	
   720                           ; 0 bytes @ 0x4
   721                           
   722  0074                     ??_I2C_Stop:	
   723                           ; 0 bytes @ 0x4
   724                           
   725  0074                     ??_set_lcd_e:	
   726                           ; 0 bytes @ 0x4
   727                           
   728  0074                     ??_set_lcd_rs:	
   729                           ; 0 bytes @ 0x4
   730                           
   731  0074                     ??_set_lcd_data:	
   732                           ; 0 bytes @ 0x4
   733                           
   734  0074                     ??___wmul:	
   735                           ; 0 bytes @ 0x4
   736                           
   737  0074                     I2C_Write_Byte@Byte:	
   738                           ; 0 bytes @ 0x4
   739                           
   740  0074                     set_lcd_e@b_output:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  0074                     set_lcd_rs@b_output:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0074                     set_lcd_data@uc_data:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  0074                     DelayMs@Ms:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  0074                     ___wmul@product:	
   753                           ; 2 bytes @ 0x4
   754                           
   755                           
   756                           ; 2 bytes @ 0x4
   757  0074                     	ds	1
   758  0075                     ??_wireReadDataByte:	
   759  0075                     ??_wireWriteDataByte:	
   760                           ; 0 bytes @ 0x5
   761                           
   762  0075                     ?_send_lcd_data:	
   763                           ; 0 bytes @ 0x5
   764                           
   765  0075                     wireWriteDataByte@reg:	
   766                           ; 0 bytes @ 0x5
   767                           
   768  0075                     send_lcd_data@uc_data:	
   769                           ; 1 bytes @ 0x5
   770                           
   771                           
   772                           ; 1 bytes @ 0x5
   773  0075                     	ds	1
   774  0076                     ??_DelayMs:	
   775  0076                     ??_lcd_clear:	
   776                           ; 0 bytes @ 0x6
   777                           
   778  0076                     ??_enablePower:	
   779                           ; 0 bytes @ 0x6
   780                           
   781                           
   782                           	psect	cstackBANK0
   783  0020                     __pcstackBANK0:	
   784                           ; 0 bytes @ 0x6
   785                           
   786  0020                     ??_I2C_Read_Byte:	
   787  0020                     ??_send_lcd_data:	
   788                           ; 0 bytes @ 0x0
   789                           
   790  0020                     ?_wireWriteDataByte:	
   791                           ; 0 bytes @ 0x0
   792                           
   793  0020                     ?___wmul:	
   794                           ; 2 bytes @ 0x0
   795                           
   796  0020                     wireWriteDataByte@val:	
   797                           ; 2 bytes @ 0x0
   798                           
   799  0020                     DelayMs@delay_cnst:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0020                     _decodeGesture$415:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     ___wmul@multiplier:	
   806                           ; 2 bytes @ 0x0
   807                           
   808                           
   809                           ; 2 bytes @ 0x0
   810  0020                     	ds	2
   811  0022                     send_lcd_data@b_rs:	
   812  0022                     _decodeGesture$416:	
   813                           ; 1 bytes @ 0x2
   814                           
   815  0022                     ___wmul@multiplicand:	
   816                           ; 2 bytes @ 0x2
   817                           
   818                           
   819                           ; 2 bytes @ 0x2
   820  0022                     	ds	1
   821  0023                     ??_lcd_initialize:	
   822  0023                     ??_lcd_goto:	
   823                           ; 0 bytes @ 0x3
   824                           
   825  0023                     ??_lcd_home:	
   826                           ; 0 bytes @ 0x3
   827                           
   828  0023                     ??_setProxIntLowThresh:	
   829                           ; 0 bytes @ 0x3
   830                           
   831  0023                     ??_setProxIntHighThresh:	
   832                           ; 0 bytes @ 0x3
   833                           
   834  0023                     ??_setGestureEnterThresh:	
   835                           ; 0 bytes @ 0x3
   836                           
   837  0023                     ??_setGestureExitThresh:	
   838                           ; 0 bytes @ 0x3
   839                           
   840  0023                     ??_lcd_2ndline:	
   841                           ; 0 bytes @ 0x3
   842                           
   843  0023                     ??_lcd_putchar:	
   844                           ; 0 bytes @ 0x3
   845                           
   846  0023                     ?_setLightIntLowThreshold:	
   847                           ; 0 bytes @ 0x3
   848                           
   849  0023                     ?_setLightIntHighThreshold:	
   850                           ; 1 bytes @ 0x3
   851                           
   852  0023                     setLightIntLowThreshold@threshold:	
   853                           ; 1 bytes @ 0x3
   854                           
   855  0023                     setLightIntHighThreshold@threshold:	
   856                           ; 2 bytes @ 0x3
   857                           
   858                           
   859                           ; 2 bytes @ 0x3
   860  0023                     	ds	1
   861  0024                     ?___awdiv:	
   862  0024                     setProxIntLowThresh@threshold:	
   863                           ; 2 bytes @ 0x4
   864                           
   865  0024                     setProxIntHighThresh@threshold:	
   866                           ; 1 bytes @ 0x4
   867                           
   868  0024                     setGestureEnterThresh@threshold:	
   869                           ; 1 bytes @ 0x4
   870                           
   871  0024                     setGestureExitThresh@threshold:	
   872                           ; 1 bytes @ 0x4
   873                           
   874  0024                     lcd_goto@uc_position:	
   875                           ; 1 bytes @ 0x4
   876                           
   877  0024                     lcd_putchar@c_data:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0024                     _decodeGesture$417:	
   881                           ; 1 bytes @ 0x4
   882                           
   883  0024                     ___awdiv@divisor:	
   884                           ; 2 bytes @ 0x4
   885                           
   886  0024                     I2C_Read_Byte@count:	
   887                           ; 2 bytes @ 0x4
   888                           
   889                           
   890                           ; 4 bytes @ 0x4
   891  0024                     	ds	1
   892  0025                     ??_lcd_putstr:	
   893  0025                     ??_setLightIntLowThreshold:	
   894                           ; 0 bytes @ 0x5
   895                           
   896  0025                     ??_setLightIntHighThreshold:	
   897                           ; 0 bytes @ 0x5
   898                           
   899                           
   900                           ; 0 bytes @ 0x5
   901  0025                     	ds	1
   902  0026                     setLightIntLowThreshold@val_low:	
   903  0026                     setLightIntHighThreshold@val_low:	
   904                           ; 1 bytes @ 0x6
   905                           
   906  0026                     lcd_putstr@csz_string:	
   907                           ; 1 bytes @ 0x6
   908                           
   909  0026                     _decodeGesture$418:	
   910                           ; 1 bytes @ 0x6
   911                           
   912  0026                     ___awdiv@dividend:	
   913                           ; 2 bytes @ 0x6
   914                           
   915                           
   916                           ; 2 bytes @ 0x6
   917  0026                     	ds	1
   918  0027                     setLightIntLowThreshold@val_high:	
   919  0027                     setLightIntHighThreshold@val_high:	
   920                           ; 1 bytes @ 0x7
   921                           
   922                           
   923                           ; 1 bytes @ 0x7
   924  0027                     	ds	1
   925  0028                     ??___awdiv:	
   926  0028                     ?_wireReadDataBlock:	
   927                           ; 0 bytes @ 0x8
   928                           
   929  0028                     wireReadDataByte@reg:	
   930                           ; 2 bytes @ 0x8
   931                           
   932  0028                     _decodeGesture$419:	
   933                           ; 1 bytes @ 0x8
   934                           
   935  0028                     wireReadDataBlock@val:	
   936                           ; 2 bytes @ 0x8
   937                           
   938                           
   939                           ; 2 bytes @ 0x8
   940  0028                     	ds	1
   941  0029                     wireReadDataByte@val:	
   942  0029                     ___awdiv@counter:	
   943                           ; 1 bytes @ 0x9
   944                           
   945                           
   946                           ; 1 bytes @ 0x9
   947  0029                     	ds	1
   948  002A                     ??_isGestureAvailable:	
   949  002A                     ??_setLEDDrive:	
   950                           ; 0 bytes @ 0xA
   951                           
   952  002A                     ??_setProximityGain:	
   953                           ; 0 bytes @ 0xA
   954                           
   955  002A                     ??_setAmbientLightGain:	
   956                           ; 0 bytes @ 0xA
   957                           
   958  002A                     ??_setGestureGain:	
   959                           ; 0 bytes @ 0xA
   960                           
   961  002A                     ??_setGestureLEDDrive:	
   962                           ; 0 bytes @ 0xA
   963                           
   964  002A                     ??_setGestureWaitTime:	
   965                           ; 0 bytes @ 0xA
   966                           
   967  002A                     ??_setGestureIntEnable:	
   968                           ; 0 bytes @ 0xA
   969                           
   970  002A                     ??_getMode:	
   971                           ; 0 bytes @ 0xA
   972                           
   973  002A                     ??_setLEDBoost:	
   974                           ; 0 bytes @ 0xA
   975                           
   976  002A                     ??_setGestureMode:	
   977                           ; 0 bytes @ 0xA
   978                           
   979  002A                     ___awdiv@sign:	
   980                           ; 0 bytes @ 0xA
   981                           
   982  002A                     _decodeGesture$420:	
   983                           ; 1 bytes @ 0xA
   984                           
   985  002A                     wireReadDataBlock@len:	
   986                           ; 2 bytes @ 0xA
   987                           
   988                           
   989                           ; 2 bytes @ 0xA
   990  002A                     	ds	1
   991  002B                     getMode@enable_value:	
   992  002B                     setAmbientLightGain@drive:	
   993                           ; 1 bytes @ 0xB
   994                           
   995  002B                     setGestureWaitTime@time:	
   996                           ; 1 bytes @ 0xB
   997                           
   998  002B                     setGestureMode@mode:	
   999                           ; 1 bytes @ 0xB
  1000                           
  1001  002B                     isGestureAvailable@val:	
  1002                           ; 1 bytes @ 0xB
  1003                           
  1004  002B                     ___awdiv@quotient:	
  1005                           ; 1 bytes @ 0xB
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0xB
  1009  002B                     	ds	1
  1010  002C                     ??_wireReadDataBlock:	
  1011  002C                     ?_setMode:	
  1012                           ; 0 bytes @ 0xC
  1013                           
  1014  002C                     setMode@enable:	
  1015                           ; 1 bytes @ 0xC
  1016                           
  1017  002C                     setLEDDrive@val:	
  1018                           ; 1 bytes @ 0xC
  1019                           
  1020  002C                     setProximityGain@val:	
  1021                           ; 1 bytes @ 0xC
  1022                           
  1023  002C                     setAmbientLightGain@val:	
  1024                           ; 1 bytes @ 0xC
  1025                           
  1026  002C                     setGestureGain@val:	
  1027                           ; 1 bytes @ 0xC
  1028                           
  1029  002C                     setGestureLEDDrive@val:	
  1030                           ; 1 bytes @ 0xC
  1031                           
  1032  002C                     setGestureWaitTime@val:	
  1033                           ; 1 bytes @ 0xC
  1034                           
  1035  002C                     setGestureIntEnable@val:	
  1036                           ; 1 bytes @ 0xC
  1037                           
  1038  002C                     setLEDBoost@val:	
  1039                           ; 1 bytes @ 0xC
  1040                           
  1041  002C                     setGestureMode@val:	
  1042                           ; 1 bytes @ 0xC
  1043                           
  1044  002C                     _decodeGesture$421:	
  1045                           ; 1 bytes @ 0xC
  1046                           
  1047                           
  1048                           ; 2 bytes @ 0xC
  1049  002C                     	ds	1
  1050  002D                     ??_setMode:	
  1051  002D                     ??_processGestureData:	
  1052                           ; 0 bytes @ 0xD
  1053                           
  1054  002D                     setLEDDrive@drive:	
  1055                           ; 0 bytes @ 0xD
  1056                           
  1057  002D                     setProximityGain@drive:	
  1058                           ; 1 bytes @ 0xD
  1059                           
  1060  002D                     setGestureGain@gain:	
  1061                           ; 1 bytes @ 0xD
  1062                           
  1063  002D                     setGestureLEDDrive@drive:	
  1064                           ; 1 bytes @ 0xD
  1065                           
  1066  002D                     setGestureIntEnable@enable:	
  1067                           ; 1 bytes @ 0xD
  1068                           
  1069  002D                     setLEDBoost@boost:	
  1070                           ; 1 bytes @ 0xD
  1071                           
  1072                           
  1073                           ; 1 bytes @ 0xD
  1074  002D                     	ds	1
  1075  002E                     _decodeGesture$422:	
  1076                           
  1077                           ; 2 bytes @ 0xE
  1078  002E                     	ds	1
  1079  002F                     setMode@reg_val:	
  1080  002F                     wireReadDataBlock@reg:	
  1081                           ; 1 bytes @ 0xF
  1082                           
  1083  002F                     processGestureData@ud_ratio_first:	
  1084                           ; 1 bytes @ 0xF
  1085                           
  1086                           
  1087                           ; 2 bytes @ 0xF
  1088  002F                     	ds	1
  1089  0030                     setMode@mode:	
  1090  0030                     wireReadDataBlock@j:	
  1091                           ; 1 bytes @ 0x10
  1092                           
  1093                           
  1094                           ; 1 bytes @ 0x10
  1095  0030                     	ds	1
  1096  0031                     ??_initialize:	
  1097  0031                     ??_enableGestureSensor:	
  1098                           ; 0 bytes @ 0x11
  1099                           
  1100  0031                     processGestureData@lr_ratio_first:	
  1101                           ; 0 bytes @ 0x11
  1102                           
  1103                           
  1104                           ; 2 bytes @ 0x11
  1105  0031                     	ds	1
  1106  0032                     initialize@id:	
  1107  0032                     enableGestureSensor@interrupts:	
  1108                           ; 1 bytes @ 0x12
  1109                           
  1110                           
  1111                           ; 1 bytes @ 0x12
  1112  0032                     	ds	1
  1113  0033                     processGestureData@ud_ratio_last:	
  1114                           
  1115                           ; 2 bytes @ 0x13
  1116  0033                     	ds	2
  1117  0035                     processGestureData@lr_ratio_last:	
  1118                           
  1119                           ; 2 bytes @ 0x15
  1120  0035                     	ds	2
  1121  0037                     _processGestureData$410:	
  1122                           
  1123                           ; 2 bytes @ 0x17
  1124  0037                     	ds	2
  1125  0039                     _processGestureData$411:	
  1126                           
  1127                           ; 2 bytes @ 0x19
  1128  0039                     	ds	2
  1129  003B                     _processGestureData$412:	
  1130                           
  1131                           ; 2 bytes @ 0x1B
  1132  003B                     	ds	2
  1133  003D                     _processGestureData$413:	
  1134                           
  1135                           ; 2 bytes @ 0x1D
  1136  003D                     	ds	2
  1137  003F                     processGestureData@u_last:	
  1138                           
  1139                           ; 1 bytes @ 0x1F
  1140  003F                     	ds	1
  1141  0040                     processGestureData@d_last:	
  1142                           
  1143                           ; 1 bytes @ 0x20
  1144  0040                     	ds	1
  1145  0041                     processGestureData@l_last:	
  1146                           
  1147                           ; 1 bytes @ 0x21
  1148  0041                     	ds	1
  1149  0042                     processGestureData@r_last:	
  1150                           
  1151                           ; 1 bytes @ 0x22
  1152  0042                     	ds	1
  1153  0043                     processGestureData@u_first:	
  1154                           
  1155                           ; 1 bytes @ 0x23
  1156  0043                     	ds	1
  1157  0044                     processGestureData@d_first:	
  1158                           
  1159                           ; 1 bytes @ 0x24
  1160  0044                     	ds	1
  1161  0045                     processGestureData@l_first:	
  1162                           
  1163                           ; 1 bytes @ 0x25
  1164  0045                     	ds	1
  1165  0046                     processGestureData@r_first:	
  1166                           
  1167                           ; 1 bytes @ 0x26
  1168  0046                     	ds	1
  1169  0047                     processGestureData@ud_delta:	
  1170                           
  1171                           ; 2 bytes @ 0x27
  1172  0047                     	ds	2
  1173  0049                     processGestureData@lr_delta:	
  1174                           
  1175                           ; 2 bytes @ 0x29
  1176  0049                     	ds	2
  1177  004B                     processGestureData@i:	
  1178                           
  1179                           ; 2 bytes @ 0x2B
  1180  004B                     	ds	2
  1181  004D                     ?_readGesture:	
  1182                           
  1183                           ; 2 bytes @ 0x2D
  1184  004D                     	ds	2
  1185  004F                     ??_readGesture:	
  1186                           
  1187                           ; 0 bytes @ 0x2F
  1188  004F                     	ds	2
  1189  0051                     readGesture@motion:	
  1190                           
  1191                           ; 2 bytes @ 0x31
  1192  0051                     	ds	2
  1193  0053                     readGesture@gstatus:	
  1194                           
  1195                           ; 1 bytes @ 0x33
  1196  0053                     	ds	1
  1197  0054                     readGesture@bytes_read:	
  1198                           
  1199                           ; 2 bytes @ 0x34
  1200  0054                     	ds	2
  1201  0056                     readGesture@fifo_level:	
  1202                           
  1203                           ; 1 bytes @ 0x36
  1204  0056                     	ds	1
  1205  0057                     readGesture@i:	
  1206                           
  1207                           ; 2 bytes @ 0x37
  1208  0057                     	ds	2
  1209  0059                     ??_handleGesture:	
  1210                           
  1211                           ; 0 bytes @ 0x39
  1212  0059                     	ds	3
  1213                           
  1214                           	psect	maintext
  1215  0E1A                     __pmaintext:	
  1216 ;;
  1217 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1218 ;;
  1219 ;; *************** function _main *****************
  1220 ;; Defined at:
  1221 ;;		line 47 in file "GestureTest.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  2   86[None  ] int 
  1228 ;; Registers used:
  1229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1230 ;; Tracked objects:
  1231 ;;		On entry : B00/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0
  1237 ;;      Temps:          0       0       3       0       0
  1238 ;;      Totals:         0       0       3       0       0
  1239 ;;Total ram usage:        3 bytes
  1240 ;; Hardware stack levels required when called:    7
  1241 ;; This function calls:
  1242 ;;		_DelayMs
  1243 ;;		_enableGestureSensor
  1244 ;;		_handleGesture
  1245 ;;		_initialize
  1246 ;;		_lcd_clear
  1247 ;;		_lcd_goto
  1248 ;;		_lcd_home
  1249 ;;		_lcd_initialize
  1250 ;;		_lcd_putstr
  1251 ;; This function is called by:
  1252 ;;		Startup code after reset
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           
  1257                           ;psect for function _main
  1258  0E1A                     _main:	
  1259                           
  1260                           ;GestureTest.c: 50: PORTA = 0;
  1261                           
  1262                           ;incstack = 0
  1263                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1264  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0E1C  0185               	clrf	5	;volatile
  1267                           
  1268                           ;GestureTest.c: 51: PORTB = 0;
  1269  0E1D  0186               	clrf	6	;volatile
  1270                           
  1271                           ;GestureTest.c: 52: PORTC = 0;
  1272  0E1E  0187               	clrf	7	;volatile
  1273                           
  1274                           ;GestureTest.c: 53: PORTD = 0;
  1275  0E1F  0188               	clrf	8	;volatile
  1276                           
  1277                           ;GestureTest.c: 54: PORTE = 0;
  1278  0E20  0189               	clrf	9	;volatile
  1279                           
  1280                           ;GestureTest.c: 56: TRISA = 0;
  1281  0E21  1683               	bsf	3,5	;RP0=1, select bank1
  1282  0E22  1303               	bcf	3,6	;RP1=0, select bank1
  1283  0E23  0185               	clrf	5	;volatile
  1284                           
  1285                           ;GestureTest.c: 57: TRISB = 0b00000001;
  1286  0E24  3001               	movlw	1
  1287  0E25  0086               	movwf	6	;volatile
  1288                           
  1289                           ;GestureTest.c: 58: TRISC = 0b00011000;
  1290  0E26  3018               	movlw	24
  1291  0E27  0087               	movwf	7	;volatile
  1292                           
  1293                           ;GestureTest.c: 59: TRISD = 0;
  1294  0E28  0188               	clrf	8	;volatile
  1295                           
  1296                           ;GestureTest.c: 60: TRISE = 0;
  1297  0E29  0189               	clrf	9	;volatile
  1298                           
  1299                           ;GestureTest.c: 64: INTF = 0;
  1300  0E2A  108B               	bcf	11,1	;volatile
  1301                           
  1302                           ;GestureTest.c: 65: INTE = 1;
  1303  0E2B  160B               	bsf	11,4	;volatile
  1304                           
  1305                           ;GestureTest.c: 66: PEIE = 1;
  1306  0E2C  170B               	bsf	11,6	;volatile
  1307                           
  1308                           ;GestureTest.c: 67: GIE = 1;
  1309  0E2D  178B               	bsf	11,7	;volatile
  1310                           
  1311                           ;GestureTest.c: 68: OPTION_REG = 0;
  1312  0E2E  0181               	clrf	1	;volatile
  1313                           
  1314                           ;GestureTest.c: 70: DelayMs(20);
  1315  0E2F  3014               	movlw	20
  1316  0E30  00F4               	movwf	DelayMs@Ms
  1317  0E31  3000               	movlw	0
  1318  0E32  00F5               	movwf	DelayMs@Ms+1
  1319  0E33  120A  158A  20F8  120A  158A  	fcall	_DelayMs
  1320                           
  1321                           ;GestureTest.c: 71: lcd_initialize();
  1322  0E38  120A  158A  230B  120A  158A  	fcall	_lcd_initialize
  1323                           
  1324                           ;GestureTest.c: 73: lcd_goto(0x42);
  1325  0E3D  3042               	movlw	66
  1326  0E3E  120A  118A  27F0  120A  158A  	fcall	_lcd_goto
  1327                           
  1328                           ;GestureTest.c: 74: lcd_putstr("gesture test");
  1329  0E43  300F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1330  0E44  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  1331                           
  1332                           ;GestureTest.c: 75: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1333  0E49  301A               	movlw	26
  1334  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  1335  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  1336  0E4C  00E2               	movwf	(??_main^(0+128)+2)
  1337  0E4D  305E               	movlw	94
  1338  0E4E  00E1               	movwf	(??_main^(0+128)+1)
  1339  0E4F  3086               	movlw	134
  1340  0E50  00E0               	movwf	??_main^(0+128)
  1341  0E51                     u5477:	
  1342  0E51  0BE0               	decfsz	??_main^(0+128),f
  1343  0E52  2E51               	goto	u5477
  1344  0E53  0BE1               	decfsz	(??_main^(0+128)+1),f
  1345  0E54  2E51               	goto	u5477
  1346  0E55  0BE2               	decfsz	(??_main^(0+128)+2),f
  1347  0E56  2E51               	goto	u5477
  1348  0E57  0000               	nop
  1349                           
  1350                           ;GestureTest.c: 77: if (initialize())
  1351  0E58  120A  118A  2508  120A  158A  	fcall	_initialize
  1352  0E5D  3A00               	xorlw	0
  1353  0E5E  1903               	skipnz
  1354  0E5F  2E80               	goto	l4623
  1355                           
  1356                           ;GestureTest.c: 78: {
  1357                           ;GestureTest.c: 79: lcd_clear();
  1358  0E60  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  1359                           
  1360                           ;GestureTest.c: 80: lcd_home();
  1361  0E65  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  1362                           
  1363                           ;GestureTest.c: 81: lcd_putstr("Initialize");
  1364  0E6A  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1365  0E6B  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  1366                           
  1367                           ;GestureTest.c: 82: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1368  0E70  301A               	movlw	26
  1369  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  1370  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  1371  0E73  00E2               	movwf	(??_main^(0+128)+2)
  1372  0E74  305E               	movlw	94
  1373  0E75  00E1               	movwf	(??_main^(0+128)+1)
  1374  0E76  3086               	movlw	134
  1375  0E77  00E0               	movwf	??_main^(0+128)
  1376  0E78                     u5487:	
  1377  0E78  0BE0               	decfsz	??_main^(0+128),f
  1378  0E79  2E78               	goto	u5487
  1379  0E7A  0BE1               	decfsz	(??_main^(0+128)+1),f
  1380  0E7B  2E78               	goto	u5487
  1381  0E7C  0BE2               	decfsz	(??_main^(0+128)+2),f
  1382  0E7D  2E78               	goto	u5487
  1383  0E7E  0000               	nop
  1384                           
  1385                           ;GestureTest.c: 84: }
  1386  0E7F  2E9F               	goto	l4629
  1387  0E80                     l4623:	
  1388                           
  1389                           ;GestureTest.c: 85: else
  1390                           ;GestureTest.c: 86: {
  1391                           ;GestureTest.c: 87: lcd_clear();
  1392  0E80  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  1393                           
  1394                           ;GestureTest.c: 88: lcd_home();
  1395  0E85  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  1396                           
  1397                           ;GestureTest.c: 89: lcd_putstr("Error");
  1398  0E8A  3030               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1399  0E8B  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  1400                           
  1401                           ;GestureTest.c: 90: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1402  0E90  301A               	movlw	26
  1403  0E91  1683               	bsf	3,5	;RP0=1, select bank1
  1404  0E92  1303               	bcf	3,6	;RP1=0, select bank1
  1405  0E93  00E2               	movwf	(??_main^(0+128)+2)
  1406  0E94  305E               	movlw	94
  1407  0E95  00E1               	movwf	(??_main^(0+128)+1)
  1408  0E96  3086               	movlw	134
  1409  0E97  00E0               	movwf	??_main^(0+128)
  1410  0E98                     u5497:	
  1411  0E98  0BE0               	decfsz	??_main^(0+128),f
  1412  0E99  2E98               	goto	u5497
  1413  0E9A  0BE1               	decfsz	(??_main^(0+128)+1),f
  1414  0E9B  2E98               	goto	u5497
  1415  0E9C  0BE2               	decfsz	(??_main^(0+128)+2),f
  1416  0E9D  2E98               	goto	u5497
  1417  0E9E  0000               	nop
  1418  0E9F                     l4629:	
  1419                           
  1420                           ;GestureTest.c: 92: }
  1421                           ;GestureTest.c: 94: if (enableGestureSensor(1))
  1422  0E9F  3001               	movlw	1
  1423  0EA0  120A  158A  2582  120A  158A  	fcall	_enableGestureSensor
  1424  0EA5  3A00               	xorlw	0
  1425  0EA6  1903               	skipnz
  1426  0EA7  2EC8               	goto	l4637
  1427                           
  1428                           ;GestureTest.c: 95: {
  1429                           ;GestureTest.c: 96: lcd_clear();
  1430  0EA8  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  1431                           
  1432                           ;GestureTest.c: 97: lcd_home();
  1433  0EAD  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  1434                           
  1435                           ;GestureTest.c: 98: lcd_putstr("enable sensor");
  1436  0EB2  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1437  0EB3  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  1438                           
  1439                           ;GestureTest.c: 99: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1440  0EB8  301A               	movlw	26
  1441  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1442  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1443  0EBB  00E2               	movwf	(??_main^(0+128)+2)
  1444  0EBC  305E               	movlw	94
  1445  0EBD  00E1               	movwf	(??_main^(0+128)+1)
  1446  0EBE  3086               	movlw	134
  1447  0EBF  00E0               	movwf	??_main^(0+128)
  1448  0EC0                     u5507:	
  1449  0EC0  0BE0               	decfsz	??_main^(0+128),f
  1450  0EC1  2EC0               	goto	u5507
  1451  0EC2  0BE1               	decfsz	(??_main^(0+128)+1),f
  1452  0EC3  2EC0               	goto	u5507
  1453  0EC4  0BE2               	decfsz	(??_main^(0+128)+2),f
  1454  0EC5  2EC0               	goto	u5507
  1455  0EC6  0000               	nop
  1456                           
  1457                           ;GestureTest.c: 100: }
  1458  0EC7  2EE7               	goto	l4643
  1459  0EC8                     l4637:	
  1460                           
  1461                           ;GestureTest.c: 101: else
  1462                           ;GestureTest.c: 102: {
  1463                           ;GestureTest.c: 103: lcd_clear();
  1464  0EC8  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  1465                           
  1466                           ;GestureTest.c: 104: lcd_home();
  1467  0ECD  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  1468                           
  1469                           ;GestureTest.c: 105: lcd_putstr("st wrong");
  1470  0ED2  3027               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1471  0ED3  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  1472                           
  1473                           ;GestureTest.c: 106: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1474  0ED8  301A               	movlw	26
  1475  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  1476  0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  1477  0EDB  00E2               	movwf	(??_main^(0+128)+2)
  1478  0EDC  305E               	movlw	94
  1479  0EDD  00E1               	movwf	(??_main^(0+128)+1)
  1480  0EDE  3086               	movlw	134
  1481  0EDF  00E0               	movwf	??_main^(0+128)
  1482  0EE0                     u5517:	
  1483  0EE0  0BE0               	decfsz	??_main^(0+128),f
  1484  0EE1  2EE0               	goto	u5517
  1485  0EE2  0BE1               	decfsz	(??_main^(0+128)+1),f
  1486  0EE3  2EE0               	goto	u5517
  1487  0EE4  0BE2               	decfsz	(??_main^(0+128)+2),f
  1488  0EE5  2EE0               	goto	u5517
  1489  0EE6  0000               	nop
  1490  0EE7                     l4643:	
  1491                           ;GestureTest.c: 107: }
  1492                           ;GestureTest.c: 109: while (1)
  1493                           
  1494                           
  1495                           ;GestureTest.c: 110: {
  1496                           ;GestureTest.c: 111: if(handleGestureFlag)
  1497  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  1499  0EE9  086D               	movf	_handleGestureFlag,w
  1500  0EEA  1903               	btfsc	3,2
  1501  0EEB  2EE7               	goto	l4643
  1502                           
  1503                           ;GestureTest.c: 112: {
  1504                           ;GestureTest.c: 114: handleGestureFlag = 0;
  1505  0EEC  01ED               	clrf	_handleGestureFlag
  1506                           
  1507                           ;GestureTest.c: 115: handleGesture();
  1508  0EED  120A  158A  26F3  120A  158A  	fcall	_handleGesture
  1509  0EF2  2EE7               	goto	l4643
  1510  0EF3                     __end_of_main:	
  1511                           
  1512                           	psect	text1
  1513  0B0B                     __ptext1:	
  1514 ;; *************** function _lcd_initialize *****************
  1515 ;; Defined at:
  1516 ;;		line 100 in file "lcd.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;		None               void
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1530 ;;      Params:         0       0       0       0       0
  1531 ;;      Locals:         0       0       0       0       0
  1532 ;;      Temps:          0       2       0       0       0
  1533 ;;      Totals:         0       2       0       0       0
  1534 ;;Total ram usage:        2 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    4
  1537 ;; This function calls:
  1538 ;;		_lcd_clear
  1539 ;;		_send_lcd_data
  1540 ;;		_set_lcd_e
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _lcd_initialize
  1548  0B0B                     _lcd_initialize:	
  1549                           
  1550                           ;lcd.c: 104: set_lcd_e(1);
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _lcd_initialize: [wreg+status,2+status,0+pclath+cstack]
  1554  0B0B  3001               	movlw	1
  1555  0B0C  160A  118A  2796  120A  158A  	fcall	_set_lcd_e
  1556                           
  1557                           ;lcd.c: 105: _delay((unsigned long)((15)*(20000000/4000.0)));
  1558  0B11  3062               	movlw	98
  1559  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0B14  00A4               	movwf	??_lcd_initialize+1
  1562  0B15  3065               	movlw	101
  1563  0B16  00A3               	movwf	??_lcd_initialize
  1564  0B17                     u5527:	
  1565  0B17  0BA3               	decfsz	??_lcd_initialize,f
  1566  0B18  2B17               	goto	u5527
  1567  0B19  0BA4               	decfsz	??_lcd_initialize+1,f
  1568  0B1A  2B17               	goto	u5527
  1569  0B1B  2B1C               	nop2
  1570                           
  1571                           ;lcd.c: 108: send_lcd_data(0, 0b00100000 | 0b00010000 | 0b00001000 | 0b00000000);
  1572  0B1C  3038               	movlw	56
  1573  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  1575  0B1F  00A3               	movwf	??_lcd_initialize
  1576  0B20  0823               	movf	??_lcd_initialize,w
  1577  0B21  00F5               	movwf	send_lcd_data@uc_data
  1578  0B22  3000               	movlw	0
  1579  0B23  120A  158A  237F  120A  158A  	fcall	_send_lcd_data
  1580                           
  1581                           ;lcd.c: 112: send_lcd_data(0, 0b00000100 | 0b00000010 | 0b00000000);
  1582  0B28  3006               	movlw	6
  1583  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0B2B  00A3               	movwf	??_lcd_initialize
  1586  0B2C  0823               	movf	??_lcd_initialize,w
  1587  0B2D  00F5               	movwf	send_lcd_data@uc_data
  1588  0B2E  3000               	movlw	0
  1589  0B2F  120A  158A  237F  120A  158A  	fcall	_send_lcd_data
  1590                           
  1591                           ;lcd.c: 115: send_lcd_data(0, 0b00001000 | 0b00000100 | 0b00000000 | 0b00000000);
  1592  0B34  300C               	movlw	12
  1593  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  1594  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  1595  0B37  00A3               	movwf	??_lcd_initialize
  1596  0B38  0823               	movf	??_lcd_initialize,w
  1597  0B39  00F5               	movwf	send_lcd_data@uc_data
  1598  0B3A  3000               	movlw	0
  1599  0B3B  120A  158A  237F  120A  158A  	fcall	_send_lcd_data
  1600                           
  1601                           ;lcd.c: 118: lcd_clear();
  1602  0B40  160A  118A  277C   	fcall	_lcd_clear
  1603  0B43  0008               	return
  1604  0B44                     __end_of_lcd_initialize:	
  1605                           
  1606                           	psect	text2
  1607  07F0                     __ptext2:	
  1608 ;; *************** function _lcd_goto *****************
  1609 ;; Defined at:
  1610 ;;		line 199 in file "lcd.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  uc_position     1    wreg     unsigned char 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  uc_position     1    4[BANK0 ] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;		None               void
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       1       0       0       0
  1626 ;;      Temps:          0       1       0       0       0
  1627 ;;      Totals:         0       2       0       0       0
  1628 ;;Total ram usage:        2 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    3
  1631 ;; This function calls:
  1632 ;;		_send_lcd_data
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _lcd_goto
  1640  07F0                     _lcd_goto:	
  1641                           
  1642                           ;incstack = 0
  1643                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  1644                           ;lcd_goto@uc_position stored from wreg
  1645  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  1646  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  1647  07F2  00A4               	movwf	lcd_goto@uc_position
  1648                           
  1649                           ;lcd.c: 202: send_lcd_data(0, 0b10000000 | uc_position);
  1650  07F3  0824               	movf	lcd_goto@uc_position,w
  1651  07F4  3880               	iorlw	128
  1652  07F5  00A3               	movwf	??_lcd_goto
  1653  07F6  0823               	movf	??_lcd_goto,w
  1654  07F7  00F5               	movwf	send_lcd_data@uc_data
  1655  07F8  3000               	movlw	0
  1656  07F9  120A  158A  237F   	fcall	_send_lcd_data
  1657  07FC  0008               	return
  1658  07FD                     __end_of_lcd_goto:	
  1659                           
  1660                           	psect	text3
  1661  0508                     __ptext3:	
  1662 ;; *************** function _initialize *****************
  1663 ;; Defined at:
  1664 ;;		line 18 in file "APDS9960.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  id              1   18[BANK0 ] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      unsigned char 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, pclath, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1678 ;;      Params:         0       0       0       0       0
  1679 ;;      Locals:         0       1       0       0       0
  1680 ;;      Temps:          0       1       0       0       0
  1681 ;;      Totals:         0       2       0       0       0
  1682 ;;Total ram usage:        2 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    5
  1685 ;; This function calls:
  1686 ;;		_InitI2C
  1687 ;;		_setAmbientLightGain
  1688 ;;		_setGestureEnterThresh
  1689 ;;		_setGestureExitThresh
  1690 ;;		_setGestureGain
  1691 ;;		_setGestureIntEnable
  1692 ;;		_setGestureLEDDrive
  1693 ;;		_setGestureWaitTime
  1694 ;;		_setLEDDrive
  1695 ;;		_setLightIntHighThreshold
  1696 ;;		_setLightIntLowThreshold
  1697 ;;		_setMode
  1698 ;;		_setProxIntHighThresh
  1699 ;;		_setProxIntLowThresh
  1700 ;;		_setProximityGain
  1701 ;;		_wireReadDataByte
  1702 ;;		_wireWriteDataByte
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           
  1709                           ;psect for function _initialize
  1710  0508                     _initialize:	
  1711                           
  1712                           ;APDS9960.c: 21: unsigned char id=0;
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  1716  0508  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0509  1303               	bcf	3,6	;RP1=0, select bank0
  1718  050A  01B2               	clrf	initialize@id
  1719                           
  1720                           ;APDS9960.c: 23: InitI2C();
  1721  050B  160A  118A  27CE  120A  118A  	fcall	_InitI2C
  1722                           
  1723                           ;APDS9960.c: 27: id = wireReadDataByte(0x92);
  1724  0510  3092               	movlw	146
  1725  0511  120A  158A  22D4  120A  118A  	fcall	_wireReadDataByte
  1726  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0518  00B1               	movwf	??_initialize
  1729  0519  0831               	movf	??_initialize,w
  1730  051A  00B2               	movwf	initialize@id
  1731                           
  1732                           ;APDS9960.c: 30: if( !(id == 0xAB ||id == 0x9C ) )
  1733  051B  30AB               	movlw	171
  1734  051C  0632               	xorwf	initialize@id,w
  1735  051D  1903               	btfsc	3,2
  1736  051E  2D25               	goto	l4345
  1737  051F  309C               	movlw	156
  1738  0520  0632               	xorwf	initialize@id,w
  1739  0521  1903               	btfsc	3,2
  1740  0522  2D25               	goto	l4345
  1741                           
  1742                           ;APDS9960.c: 31: {
  1743                           ;APDS9960.c: 32: return 0;
  1744  0523  3000               	movlw	0
  1745  0524  0008               	return
  1746  0525                     l4345:	
  1747                           
  1748                           ;APDS9960.c: 33: }
  1749                           ;APDS9960.c: 35: setMode(7, 0);
  1750  0525  01AC               	clrf	setMode@enable
  1751  0526  3007               	movlw	7
  1752  0527  120A  158A  24C7  120A  118A  	fcall	_setMode
  1753                           
  1754                           ;APDS9960.c: 37: wireWriteDataByte(0x81, 219);
  1755  052C  30DB               	movlw	219
  1756  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1757  052E  1303               	bcf	3,6	;RP1=0, select bank0
  1758  052F  00B1               	movwf	??_initialize
  1759  0530  0831               	movf	??_initialize,w
  1760  0531  00A0               	movwf	wireWriteDataByte@val
  1761  0532  3081               	movlw	129
  1762  0533  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1763                           
  1764                           ;APDS9960.c: 38: wireWriteDataByte(0x83, 246);
  1765  0538  30F6               	movlw	246
  1766  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1767  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1768  053B  00B1               	movwf	??_initialize
  1769  053C  0831               	movf	??_initialize,w
  1770  053D  00A0               	movwf	wireWriteDataByte@val
  1771  053E  3083               	movlw	131
  1772  053F  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1773                           
  1774                           ;APDS9960.c: 39: wireWriteDataByte(0x8E, 0x87);
  1775  0544  3087               	movlw	135
  1776  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0547  00B1               	movwf	??_initialize
  1779  0548  0831               	movf	??_initialize,w
  1780  0549  00A0               	movwf	wireWriteDataByte@val
  1781  054A  308E               	movlw	142
  1782  054B  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1783                           
  1784                           ;APDS9960.c: 40: wireWriteDataByte(0x9D, 0) ;
  1785  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0552  01A0               	clrf	wireWriteDataByte@val
  1788  0553  309D               	movlw	157
  1789  0554  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1790                           
  1791                           ;APDS9960.c: 41: wireWriteDataByte(0x9E, 0) ;
  1792  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1793  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1794  055B  01A0               	clrf	wireWriteDataByte@val
  1795  055C  309E               	movlw	158
  1796  055D  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1797                           
  1798                           ;APDS9960.c: 42: wireWriteDataByte(0x8D, 0x60) ;
  1799  0562  3060               	movlw	96
  1800  0563  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0564  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0565  00B1               	movwf	??_initialize
  1803  0566  0831               	movf	??_initialize,w
  1804  0567  00A0               	movwf	wireWriteDataByte@val
  1805  0568  308D               	movlw	141
  1806  0569  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1807                           
  1808                           ;APDS9960.c: 43: setLEDDrive(0);
  1809  056E  3000               	movlw	0
  1810  056F  120A  158A  21E0  120A  118A  	fcall	_setLEDDrive
  1811                           
  1812                           ;APDS9960.c: 44: setProximityGain(2);
  1813  0574  3002               	movlw	2
  1814  0575  120A  158A  2270  120A  118A  	fcall	_setProximityGain
  1815                           
  1816                           ;APDS9960.c: 45: setAmbientLightGain(1);
  1817  057A  3001               	movlw	1
  1818  057B  120A  158A  213D  120A  118A  	fcall	_setAmbientLightGain
  1819                           
  1820                           ;APDS9960.c: 46: if( !setProxIntLowThresh(0) ) {
  1821  0580  3000               	movlw	0
  1822  0581  120A  158A  20E1  120A  118A  	fcall	_setProxIntLowThresh
  1823  0586  3A00               	xorlw	0
  1824  0587  1D03               	skipz
  1825  0588  2D8B               	goto	l4351
  1826                           
  1827                           ;APDS9960.c: 48: return 0;
  1828  0589  3000               	movlw	0
  1829  058A  0008               	return
  1830  058B                     l4351:	
  1831                           
  1832                           ;APDS9960.c: 49: }
  1833                           ;APDS9960.c: 50: if( !setProxIntHighThresh(50) ) {
  1834  058B  3032               	movlw	50
  1835  058C  120A  158A  20CA  120A  118A  	fcall	_setProxIntHighThresh
  1836  0591  3A00               	xorlw	0
  1837  0592  1D03               	skipz
  1838  0593  2D96               	goto	l4357
  1839                           
  1840                           ;APDS9960.c: 52: return 0;
  1841  0594  3000               	movlw	0
  1842  0595  0008               	return
  1843  0596                     l4357:	
  1844                           
  1845                           ;APDS9960.c: 53: }
  1846                           ;APDS9960.c: 55: if( !setLightIntLowThreshold(0xFFFF) ) {
  1847  0596  30FF               	movlw	255
  1848  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0599  00A3               	movwf	setLightIntLowThreshold@threshold
  1851  059A  30FF               	movlw	255
  1852  059B  00A4               	movwf	setLightIntLowThreshold@threshold+1
  1853  059C  120A  158A  2240  120A  118A  	fcall	_setLightIntLowThreshold
  1854  05A1  3A00               	xorlw	0
  1855  05A2  1D03               	skipz
  1856  05A3  2DA6               	goto	l4363
  1857                           
  1858                           ;APDS9960.c: 56: return 0;
  1859  05A4  3000               	movlw	0
  1860  05A5  0008               	return
  1861  05A6                     l4363:	
  1862                           
  1863                           ;APDS9960.c: 57: }
  1864                           ;APDS9960.c: 58: if( !setLightIntHighThreshold(0) ) {
  1865  05A6  3000               	movlw	0
  1866  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  1867  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  1868  05A9  00A3               	movwf	setLightIntHighThreshold@threshold
  1869  05AA  00A4               	movwf	setLightIntHighThreshold@threshold+1
  1870  05AB  120A  158A  2210  120A  118A  	fcall	_setLightIntHighThreshold
  1871  05B0  3A00               	xorlw	0
  1872  05B1  1D03               	skipz
  1873  05B2  2DB5               	goto	l4369
  1874                           
  1875                           ;APDS9960.c: 60: return 0;
  1876  05B3  3000               	movlw	0
  1877  05B4  0008               	return
  1878  05B5                     l4369:	
  1879                           
  1880                           ;APDS9960.c: 61: }
  1881                           ;APDS9960.c: 62: if( !wireWriteDataByte(0x8C, 0x11) ) {
  1882  05B5  3011               	movlw	17
  1883  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  1884  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  1885  05B8  00B1               	movwf	??_initialize
  1886  05B9  0831               	movf	??_initialize,w
  1887  05BA  00A0               	movwf	wireWriteDataByte@val
  1888  05BB  308C               	movlw	140
  1889  05BC  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1890  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1891  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1892  05C3  0820               	movf	?_wireWriteDataByte,w
  1893  05C4  0421               	iorwf	?_wireWriteDataByte+1,w
  1894  05C5  1D03               	btfss	3,2
  1895  05C6  2DC9               	goto	l4375
  1896                           
  1897                           ;APDS9960.c: 64: return 0;
  1898  05C7  3000               	movlw	0
  1899  05C8  0008               	return
  1900  05C9                     l4375:	
  1901                           
  1902                           ;APDS9960.c: 65: }
  1903                           ;APDS9960.c: 66: if( !wireWriteDataByte(0x90, 0x01) ) {
  1904  05C9  01A0               	clrf	wireWriteDataByte@val
  1905  05CA  0AA0               	incf	wireWriteDataByte@val,f
  1906  05CB  3090               	movlw	144
  1907  05CC  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1908  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1909  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1910  05D3  0820               	movf	?_wireWriteDataByte,w
  1911  05D4  0421               	iorwf	?_wireWriteDataByte+1,w
  1912  05D5  1D03               	btfss	3,2
  1913  05D6  2DD9               	goto	l4381
  1914                           
  1915                           ;APDS9960.c: 67: return 0;
  1916  05D7  3000               	movlw	0
  1917  05D8  0008               	return
  1918  05D9                     l4381:	
  1919                           
  1920                           ;APDS9960.c: 68: }
  1921                           ;APDS9960.c: 69: if( !wireWriteDataByte(0x9F, 0) ) {
  1922  05D9  01A0               	clrf	wireWriteDataByte@val
  1923  05DA  309F               	movlw	159
  1924  05DB  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1925  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1926  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1927  05E2  0820               	movf	?_wireWriteDataByte,w
  1928  05E3  0421               	iorwf	?_wireWriteDataByte+1,w
  1929  05E4  1D03               	btfss	3,2
  1930  05E5  2DE8               	goto	l4387
  1931                           
  1932                           ;APDS9960.c: 70: return 0;
  1933  05E6  3000               	movlw	0
  1934  05E7  0008               	return
  1935  05E8                     l4387:	
  1936                           
  1937                           ;APDS9960.c: 71: }
  1938                           ;APDS9960.c: 73: if( !setGestureEnterThresh(40) ) {
  1939  05E8  3028               	movlw	40
  1940  05E9  120A  158A  209C  120A  118A  	fcall	_setGestureEnterThresh
  1941  05EE  3A00               	xorlw	0
  1942  05EF  1D03               	skipz
  1943  05F0  2DF3               	goto	l4393
  1944                           
  1945                           ;APDS9960.c: 75: return 0;
  1946  05F1  3000               	movlw	0
  1947  05F2  0008               	return
  1948  05F3                     l4393:	
  1949                           
  1950                           ;APDS9960.c: 76: }
  1951                           ;APDS9960.c: 77: if( !setGestureExitThresh(30) ) {
  1952  05F3  301E               	movlw	30
  1953  05F4  120A  158A  20B3  120A  118A  	fcall	_setGestureExitThresh
  1954  05F9  3A00               	xorlw	0
  1955  05FA  1D03               	skipz
  1956  05FB  2DFE               	goto	l4399
  1957                           
  1958                           ;APDS9960.c: 78: return 0;
  1959  05FC  3000               	movlw	0
  1960  05FD  0008               	return
  1961  05FE                     l4399:	
  1962                           
  1963                           ;APDS9960.c: 79: }
  1964                           ;APDS9960.c: 80: if( !wireWriteDataByte(0xA2, 0x40) ) {
  1965  05FE  3040               	movlw	64
  1966  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0601  00B1               	movwf	??_initialize
  1969  0602  0831               	movf	??_initialize,w
  1970  0603  00A0               	movwf	wireWriteDataByte@val
  1971  0604  30A2               	movlw	162
  1972  0605  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  1973  060A  1283               	bcf	3,5	;RP0=0, select bank0
  1974  060B  1303               	bcf	3,6	;RP1=0, select bank0
  1975  060C  0820               	movf	?_wireWriteDataByte,w
  1976  060D  0421               	iorwf	?_wireWriteDataByte+1,w
  1977  060E  1D03               	btfss	3,2
  1978  060F  2E12               	goto	l4405
  1979                           
  1980                           ;APDS9960.c: 81: return 0;
  1981  0610  3000               	movlw	0
  1982  0611  0008               	return
  1983  0612                     l4405:	
  1984                           
  1985                           ;APDS9960.c: 82: }
  1986                           ;APDS9960.c: 83: if( !setGestureGain(2) ) {
  1987  0612  3002               	movlw	2
  1988  0613  120A  158A  23BA  120A  118A  	fcall	_setGestureGain
  1989  0618  3A00               	xorlw	0
  1990  0619  1D03               	skipz
  1991  061A  2E1D               	goto	l4411
  1992                           
  1993                           ;APDS9960.c: 84: return 0;
  1994  061B  3000               	movlw	0
  1995  061C  0008               	return
  1996  061D                     l4411:	
  1997                           
  1998                           ;APDS9960.c: 85: }
  1999                           ;APDS9960.c: 86: if( !setGestureLEDDrive(0) ) {
  2000  061D  3000               	movlw	0
  2001  061E  120A  158A  23F5  120A  118A  	fcall	_setGestureLEDDrive
  2002  0623  3A00               	xorlw	0
  2003  0624  1D03               	skipz
  2004  0625  2E28               	goto	l4417
  2005                           
  2006                           ;APDS9960.c: 87: return 0;
  2007  0626  3000               	movlw	0
  2008  0627  0008               	return
  2009  0628                     l4417:	
  2010                           
  2011                           ;APDS9960.c: 88: }
  2012                           ;APDS9960.c: 89: if( !setGestureWaitTime(1) ) {
  2013  0628  3001               	movlw	1
  2014  0629  120A  158A  21B2  120A  118A  	fcall	_setGestureWaitTime
  2015  062E  3A00               	xorlw	0
  2016  062F  1D03               	skipz
  2017  0630  2E33               	goto	l4423
  2018                           
  2019                           ;APDS9960.c: 90: return 0;
  2020  0631  3000               	movlw	0
  2021  0632  0008               	return
  2022  0633                     l4423:	
  2023                           
  2024                           ;APDS9960.c: 91: }
  2025                           ;APDS9960.c: 92: if( !wireWriteDataByte(0xA4, 0) ) {
  2026  0633  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0634  1303               	bcf	3,6	;RP1=0, select bank0
  2028  0635  01A0               	clrf	wireWriteDataByte@val
  2029  0636  30A4               	movlw	164
  2030  0637  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2031  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2032  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2033  063E  0820               	movf	?_wireWriteDataByte,w
  2034  063F  0421               	iorwf	?_wireWriteDataByte+1,w
  2035  0640  1D03               	btfss	3,2
  2036  0641  2E44               	goto	l4429
  2037                           
  2038                           ;APDS9960.c: 93: return 0;
  2039  0642  3000               	movlw	0
  2040  0643  0008               	return
  2041  0644                     l4429:	
  2042                           
  2043                           ;APDS9960.c: 94: }
  2044                           ;APDS9960.c: 95: if( !wireWriteDataByte(0xA5, 0) ) {
  2045  0644  01A0               	clrf	wireWriteDataByte@val
  2046  0645  30A5               	movlw	165
  2047  0646  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2048  064B  1283               	bcf	3,5	;RP0=0, select bank0
  2049  064C  1303               	bcf	3,6	;RP1=0, select bank0
  2050  064D  0820               	movf	?_wireWriteDataByte,w
  2051  064E  0421               	iorwf	?_wireWriteDataByte+1,w
  2052  064F  1D03               	btfss	3,2
  2053  0650  2E53               	goto	l4435
  2054                           
  2055                           ;APDS9960.c: 96: return 0;
  2056  0651  3000               	movlw	0
  2057  0652  0008               	return
  2058  0653                     l4435:	
  2059                           
  2060                           ;APDS9960.c: 97: }
  2061                           ;APDS9960.c: 98: if( !wireWriteDataByte(0xA7, 0) ) {
  2062  0653  01A0               	clrf	wireWriteDataByte@val
  2063  0654  30A7               	movlw	167
  2064  0655  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2065  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2066  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2067  065C  0820               	movf	?_wireWriteDataByte,w
  2068  065D  0421               	iorwf	?_wireWriteDataByte+1,w
  2069  065E  1D03               	btfss	3,2
  2070  065F  2E62               	goto	l4441
  2071                           
  2072                           ;APDS9960.c: 99: return 0;
  2073  0660  3000               	movlw	0
  2074  0661  0008               	return
  2075  0662                     l4441:	
  2076                           
  2077                           ;APDS9960.c: 100: }
  2078                           ;APDS9960.c: 101: if( !wireWriteDataByte(0xA9, 0) ) {
  2079  0662  01A0               	clrf	wireWriteDataByte@val
  2080  0663  30A9               	movlw	169
  2081  0664  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2082  0669  1283               	bcf	3,5	;RP0=0, select bank0
  2083  066A  1303               	bcf	3,6	;RP1=0, select bank0
  2084  066B  0820               	movf	?_wireWriteDataByte,w
  2085  066C  0421               	iorwf	?_wireWriteDataByte+1,w
  2086  066D  1D03               	btfss	3,2
  2087  066E  2E71               	goto	l4447
  2088                           
  2089                           ;APDS9960.c: 102: return 0;
  2090  066F  3000               	movlw	0
  2091  0670  0008               	return
  2092  0671                     l4447:	
  2093                           
  2094                           ;APDS9960.c: 103: }
  2095                           ;APDS9960.c: 104: if( !wireWriteDataByte(0xA6, 0xC9) ) {
  2096  0671  30C9               	movlw	201
  2097  0672  00B1               	movwf	??_initialize
  2098  0673  0831               	movf	??_initialize,w
  2099  0674  00A0               	movwf	wireWriteDataByte@val
  2100  0675  30A6               	movlw	166
  2101  0676  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2102  067B  1283               	bcf	3,5	;RP0=0, select bank0
  2103  067C  1303               	bcf	3,6	;RP1=0, select bank0
  2104  067D  0820               	movf	?_wireWriteDataByte,w
  2105  067E  0421               	iorwf	?_wireWriteDataByte+1,w
  2106  067F  1D03               	btfss	3,2
  2107  0680  2E83               	goto	l4453
  2108                           
  2109                           ;APDS9960.c: 105: return 0;
  2110  0681  3000               	movlw	0
  2111  0682  0008               	return
  2112  0683                     l4453:	
  2113                           
  2114                           ;APDS9960.c: 106: }
  2115                           ;APDS9960.c: 107: if( !wireWriteDataByte(0xAA, 0) ) {
  2116  0683  01A0               	clrf	wireWriteDataByte@val
  2117  0684  30AA               	movlw	170
  2118  0685  120A  158A  2160  120A  118A  	fcall	_wireWriteDataByte
  2119  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2120  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2121  068C  0820               	movf	?_wireWriteDataByte,w
  2122  068D  0421               	iorwf	?_wireWriteDataByte+1,w
  2123  068E  1D03               	btfss	3,2
  2124  068F  2E92               	goto	l4459
  2125                           
  2126                           ;APDS9960.c: 108: return 0;
  2127  0690  3000               	movlw	0
  2128  0691  0008               	return
  2129  0692                     l4459:	
  2130                           
  2131                           ;APDS9960.c: 109: }
  2132                           ;APDS9960.c: 110: if( !setGestureIntEnable(0) ) {
  2133  0692  3000               	movlw	0
  2134  0693  120A  158A  22A0  120A  118A  	fcall	_setGestureIntEnable
  2135  0698  3A00               	xorlw	0
  2136  0699  1D03               	skipz
  2137  069A  2E9D               	goto	l4465
  2138                           
  2139                           ;APDS9960.c: 111: return 0;
  2140  069B  3000               	movlw	0
  2141  069C  0008               	return
  2142  069D                     l4465:	
  2143                           
  2144                           ;APDS9960.c: 112: }
  2145                           ;APDS9960.c: 114: return 1;
  2146  069D  3001               	movlw	1
  2147  069E  0008               	return
  2148  069F                     __end_of_initialize:	
  2149                           
  2150                           	psect	text4
  2151  0A70                     __ptext4:	
  2152 ;; *************** function _setProximityGain *****************
  2153 ;; Defined at:
  2154 ;;		line 186 in file "APDS9960.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  drive           1    wreg     unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  drive           1   13[BANK0 ] unsigned char 
  2159 ;;  val             1   12[BANK0 ] unsigned char 
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      unsigned char 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2, status,0, pclath, cstack
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2169 ;;      Params:         0       0       0       0       0
  2170 ;;      Locals:         0       2       0       0       0
  2171 ;;      Temps:          0       2       0       0       0
  2172 ;;      Totals:         0       4       0       0       0
  2173 ;;Total ram usage:        4 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; Hardware stack levels required when called:    3
  2176 ;; This function calls:
  2177 ;;		_wireReadDataByte
  2178 ;;		_wireWriteDataByte
  2179 ;; This function is called by:
  2180 ;;		_initialize
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function _setProximityGain
  2186  0A70                     _setProximityGain:	
  2187                           
  2188                           ;incstack = 0
  2189                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  2190                           ;setProximityGain@drive stored from wreg
  2191  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  2193  0A72  00AD               	movwf	setProximityGain@drive
  2194                           
  2195                           ;APDS9960.c: 188: uint8_t val;
  2196                           ;APDS9960.c: 191: val=wireReadDataByte(0x8F);
  2197  0A73  308F               	movlw	143
  2198  0A74  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  2199  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0A7B  00AA               	movwf	??_setProximityGain
  2202  0A7C  082A               	movf	??_setProximityGain,w
  2203  0A7D  00AC               	movwf	setProximityGain@val
  2204                           
  2205                           ;APDS9960.c: 193: drive &= 0b00000011;
  2206  0A7E  3003               	movlw	3
  2207  0A7F  00AA               	movwf	??_setProximityGain
  2208  0A80  082A               	movf	??_setProximityGain,w
  2209  0A81  05AD               	andwf	setProximityGain@drive,f
  2210                           
  2211                           ;APDS9960.c: 194: drive = drive << 2;
  2212  0A82  082D               	movf	setProximityGain@drive,w
  2213  0A83  00AA               	movwf	??_setProximityGain
  2214  0A84  3001               	movlw	1
  2215  0A85                     u4845:	
  2216  0A85  1003               	clrc
  2217  0A86  0DAA               	rlf	??_setProximityGain,f
  2218  0A87  3EFF               	addlw	-1
  2219  0A88  1D03               	skipz
  2220  0A89  2A85               	goto	u4845
  2221  0A8A  1003               	clrc
  2222  0A8B  0D2A               	rlf	??_setProximityGain,w
  2223  0A8C  00AB               	movwf	??_setProximityGain+1
  2224  0A8D  082B               	movf	??_setProximityGain+1,w
  2225  0A8E  00AD               	movwf	setProximityGain@drive
  2226                           
  2227                           ;APDS9960.c: 195: val &= 0b11110011;
  2228  0A8F  30F3               	movlw	243
  2229  0A90  00AA               	movwf	??_setProximityGain
  2230  0A91  082A               	movf	??_setProximityGain,w
  2231  0A92  05AC               	andwf	setProximityGain@val,f
  2232                           
  2233                           ;APDS9960.c: 196: val |= drive;
  2234  0A93  082D               	movf	setProximityGain@drive,w
  2235  0A94  00AA               	movwf	??_setProximityGain
  2236  0A95  082A               	movf	??_setProximityGain,w
  2237  0A96  04AC               	iorwf	setProximityGain@val,f
  2238                           
  2239                           ;APDS9960.c: 199: if( !wireWriteDataByte(0x8F, val) ) {
  2240  0A97  082C               	movf	setProximityGain@val,w
  2241  0A98  00AA               	movwf	??_setProximityGain
  2242  0A99  082A               	movf	??_setProximityGain,w
  2243  0A9A  00A0               	movwf	wireWriteDataByte@val
  2244  0A9B  308F               	movlw	143
  2245  0A9C  120A  158A  2160   	fcall	_wireWriteDataByte
  2246                           
  2247                           ;APDS9960.c: 200: return 0;
  2248                           ;	Return value of _setProximityGain is never used
  2249  0A9F  0008               	return
  2250  0AA0                     __end_of_setProximityGain:	
  2251                           ;APDS9960.c: 201: }
  2252                           ;APDS9960.c: 203: return 1;
  2253                           ;	Return value of _setProximityGain is never used
  2254                           
  2255                           
  2256                           	psect	text5
  2257  08E1                     __ptext5:	
  2258 ;; *************** function _setProxIntLowThresh *****************
  2259 ;; Defined at:
  2260 ;;		line 228 in file "APDS9960.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  threshold       1    wreg     unsigned char 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  threshold       1    4[BANK0 ] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      unsigned char 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0, pclath, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2274 ;;      Params:         0       0       0       0       0
  2275 ;;      Locals:         0       1       0       0       0
  2276 ;;      Temps:          0       1       0       0       0
  2277 ;;      Totals:         0       2       0       0       0
  2278 ;;Total ram usage:        2 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    3
  2281 ;; This function calls:
  2282 ;;		_wireWriteDataByte
  2283 ;; This function is called by:
  2284 ;;		_initialize
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _setProxIntLowThresh
  2290  08E1                     _setProxIntLowThresh:	
  2291                           
  2292                           ;incstack = 0
  2293                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  2294                           ;setProxIntLowThresh@threshold stored from wreg
  2295  08E1  1283               	bcf	3,5	;RP0=0, select bank0
  2296  08E2  1303               	bcf	3,6	;RP1=0, select bank0
  2297  08E3  00A4               	movwf	setProxIntLowThresh@threshold
  2298                           
  2299                           ;APDS9960.c: 230: if( !wireWriteDataByte(0x89, threshold) ) {
  2300  08E4  0824               	movf	setProxIntLowThresh@threshold,w
  2301  08E5  00A3               	movwf	??_setProxIntLowThresh
  2302  08E6  0823               	movf	??_setProxIntLowThresh,w
  2303  08E7  00A0               	movwf	wireWriteDataByte@val
  2304  08E8  3089               	movlw	137
  2305  08E9  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2306  08EE  1283               	bcf	3,5	;RP0=0, select bank0
  2307  08EF  1303               	bcf	3,6	;RP1=0, select bank0
  2308  08F0  0820               	movf	?_wireWriteDataByte,w
  2309  08F1  0421               	iorwf	?_wireWriteDataByte+1,w
  2310  08F2  1D03               	btfss	3,2
  2311  08F3  28F6               	goto	l4109
  2312                           
  2313                           ;APDS9960.c: 231: return 0;
  2314  08F4  3000               	movlw	0
  2315  08F5  0008               	return
  2316  08F6                     l4109:	
  2317                           
  2318                           ;APDS9960.c: 232: }
  2319                           ;APDS9960.c: 234: return 1;
  2320  08F6  3001               	movlw	1
  2321  08F7  0008               	return
  2322  08F8                     __end_of_setProxIntLowThresh:	
  2323                           
  2324                           	psect	text6
  2325  08CA                     __ptext6:	
  2326 ;; *************** function _setProxIntHighThresh *****************
  2327 ;; Defined at:
  2328 ;;		line 238 in file "APDS9960.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  threshold       1    wreg     unsigned char 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  threshold       1    4[BANK0 ] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      unsigned char 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, pclath, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2342 ;;      Params:         0       0       0       0       0
  2343 ;;      Locals:         0       1       0       0       0
  2344 ;;      Temps:          0       1       0       0       0
  2345 ;;      Totals:         0       2       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		_wireWriteDataByte
  2351 ;; This function is called by:
  2352 ;;		_initialize
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _setProxIntHighThresh
  2358  08CA                     _setProxIntHighThresh:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  2362                           ;setProxIntHighThresh@threshold stored from wreg
  2363  08CA  1283               	bcf	3,5	;RP0=0, select bank0
  2364  08CB  1303               	bcf	3,6	;RP1=0, select bank0
  2365  08CC  00A4               	movwf	setProxIntHighThresh@threshold
  2366                           
  2367                           ;APDS9960.c: 240: if( !wireWriteDataByte(0x8B, threshold) ) {
  2368  08CD  0824               	movf	setProxIntHighThresh@threshold,w
  2369  08CE  00A3               	movwf	??_setProxIntHighThresh
  2370  08CF  0823               	movf	??_setProxIntHighThresh,w
  2371  08D0  00A0               	movwf	wireWriteDataByte@val
  2372  08D1  308B               	movlw	139
  2373  08D2  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2374  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  2375  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  2376  08D9  0820               	movf	?_wireWriteDataByte,w
  2377  08DA  0421               	iorwf	?_wireWriteDataByte+1,w
  2378  08DB  1D03               	btfss	3,2
  2379  08DC  28DF               	goto	l4119
  2380                           
  2381                           ;APDS9960.c: 241: return 0;
  2382  08DD  3000               	movlw	0
  2383  08DE  0008               	return
  2384  08DF                     l4119:	
  2385                           
  2386                           ;APDS9960.c: 242: }
  2387                           ;APDS9960.c: 244: return 1;
  2388  08DF  3001               	movlw	1
  2389  08E0  0008               	return
  2390  08E1                     __end_of_setProxIntHighThresh:	
  2391                           
  2392                           	psect	text7
  2393  0A40                     __ptext7:	
  2394 ;; *************** function _setLightIntLowThreshold *****************
  2395 ;; Defined at:
  2396 ;;		line 248 in file "APDS9960.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  threshold       2    3[BANK0 ] unsigned int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  val_high        1    7[BANK0 ] unsigned char 
  2401 ;;  val_low         1    6[BANK0 ] unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      unsigned char 
  2404 ;; Registers used:
  2405 ;;		wreg, status,2, status,0, pclath, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2411 ;;      Params:         0       2       0       0       0
  2412 ;;      Locals:         0       2       0       0       0
  2413 ;;      Temps:          0       1       0       0       0
  2414 ;;      Totals:         0       5       0       0       0
  2415 ;;Total ram usage:        5 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    3
  2418 ;; This function calls:
  2419 ;;		_wireWriteDataByte
  2420 ;; This function is called by:
  2421 ;;		_initialize
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _setLightIntLowThreshold
  2427  0A40                     _setLightIntLowThreshold:	
  2428                           
  2429                           ;APDS9960.c: 250: uint8_t val_low;
  2430                           ;APDS9960.c: 251: uint8_t val_high;
  2431                           ;APDS9960.c: 254: val_low = threshold & 0x00FF;
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  2435  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0A42  0823               	movf	setLightIntLowThreshold@threshold,w
  2438  0A43  00A5               	movwf	??_setLightIntLowThreshold
  2439  0A44  0825               	movf	??_setLightIntLowThreshold,w
  2440  0A45  00A6               	movwf	setLightIntLowThreshold@val_low
  2441                           
  2442                           ;APDS9960.c: 255: val_high = (threshold & 0xFF00) >> 8;
  2443  0A46  0824               	movf	setLightIntLowThreshold@threshold+1,w
  2444  0A47  00A5               	movwf	??_setLightIntLowThreshold
  2445  0A48  0825               	movf	??_setLightIntLowThreshold,w
  2446  0A49  00A7               	movwf	setLightIntLowThreshold@val_high
  2447                           
  2448                           ;APDS9960.c: 258: if( !wireWriteDataByte(0x84, val_low) ) {
  2449  0A4A  0826               	movf	setLightIntLowThreshold@val_low,w
  2450  0A4B  00A5               	movwf	??_setLightIntLowThreshold
  2451  0A4C  0825               	movf	??_setLightIntLowThreshold,w
  2452  0A4D  00A0               	movwf	wireWriteDataByte@val
  2453  0A4E  3084               	movlw	132
  2454  0A4F  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2455  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  2457  0A56  0820               	movf	?_wireWriteDataByte,w
  2458  0A57  0421               	iorwf	?_wireWriteDataByte+1,w
  2459  0A58  1D03               	btfss	3,2
  2460  0A59  2A5C               	goto	l4133
  2461                           
  2462                           ;APDS9960.c: 259: return 0;
  2463  0A5A  3000               	movlw	0
  2464  0A5B  0008               	return
  2465  0A5C                     l4133:	
  2466                           
  2467                           ;APDS9960.c: 260: }
  2468                           ;APDS9960.c: 263: if( !wireWriteDataByte(0x85, val_high) ) {
  2469  0A5C  0827               	movf	setLightIntLowThreshold@val_high,w
  2470  0A5D  00A5               	movwf	??_setLightIntLowThreshold
  2471  0A5E  0825               	movf	??_setLightIntLowThreshold,w
  2472  0A5F  00A0               	movwf	wireWriteDataByte@val
  2473  0A60  3085               	movlw	133
  2474  0A61  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2475  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  2476  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  2477  0A68  0820               	movf	?_wireWriteDataByte,w
  2478  0A69  0421               	iorwf	?_wireWriteDataByte+1,w
  2479  0A6A  1D03               	btfss	3,2
  2480  0A6B  2A6E               	goto	l4139
  2481                           
  2482                           ;APDS9960.c: 264: return 0;
  2483  0A6C  3000               	movlw	0
  2484  0A6D  0008               	return
  2485  0A6E                     l4139:	
  2486                           
  2487                           ;APDS9960.c: 265: }
  2488                           ;APDS9960.c: 267: return 1;
  2489  0A6E  3001               	movlw	1
  2490  0A6F  0008               	return
  2491  0A70                     __end_of_setLightIntLowThreshold:	
  2492                           
  2493                           	psect	text8
  2494  0A10                     __ptext8:	
  2495 ;; *************** function _setLightIntHighThreshold *****************
  2496 ;; Defined at:
  2497 ;;		line 271 in file "APDS9960.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  threshold       2    3[BANK0 ] unsigned int 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  val_high        1    7[BANK0 ] unsigned char 
  2502 ;;  val_low         1    6[BANK0 ] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;                  1    wreg      unsigned char 
  2505 ;; Registers used:
  2506 ;;		wreg, status,2, status,0, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2512 ;;      Params:         0       2       0       0       0
  2513 ;;      Locals:         0       2       0       0       0
  2514 ;;      Temps:          0       1       0       0       0
  2515 ;;      Totals:         0       5       0       0       0
  2516 ;;Total ram usage:        5 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    3
  2519 ;; This function calls:
  2520 ;;		_wireWriteDataByte
  2521 ;; This function is called by:
  2522 ;;		_initialize
  2523 ;; This function uses a non-reentrant model
  2524 ;;
  2525                           
  2526                           
  2527                           ;psect for function _setLightIntHighThreshold
  2528  0A10                     _setLightIntHighThreshold:	
  2529                           
  2530                           ;APDS9960.c: 273: uint8_t val_low;
  2531                           ;APDS9960.c: 274: uint8_t val_high;
  2532                           ;APDS9960.c: 277: val_low = threshold & 0x00FF;
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  2536  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0A12  0823               	movf	setLightIntHighThreshold@threshold,w
  2539  0A13  00A5               	movwf	??_setLightIntHighThreshold
  2540  0A14  0825               	movf	??_setLightIntHighThreshold,w
  2541  0A15  00A6               	movwf	setLightIntHighThreshold@val_low
  2542                           
  2543                           ;APDS9960.c: 278: val_high = (threshold & 0xFF00) >> 8;
  2544  0A16  0824               	movf	setLightIntHighThreshold@threshold+1,w
  2545  0A17  00A5               	movwf	??_setLightIntHighThreshold
  2546  0A18  0825               	movf	??_setLightIntHighThreshold,w
  2547  0A19  00A7               	movwf	setLightIntHighThreshold@val_high
  2548                           
  2549                           ;APDS9960.c: 281: if( !wireWriteDataByte(0x86, val_low) ) {
  2550  0A1A  0826               	movf	setLightIntHighThreshold@val_low,w
  2551  0A1B  00A5               	movwf	??_setLightIntHighThreshold
  2552  0A1C  0825               	movf	??_setLightIntHighThreshold,w
  2553  0A1D  00A0               	movwf	wireWriteDataByte@val
  2554  0A1E  3086               	movlw	134
  2555  0A1F  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2556  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0A26  0820               	movf	?_wireWriteDataByte,w
  2559  0A27  0421               	iorwf	?_wireWriteDataByte+1,w
  2560  0A28  1D03               	btfss	3,2
  2561  0A29  2A2C               	goto	l4153
  2562                           
  2563                           ;APDS9960.c: 282: return 0;
  2564  0A2A  3000               	movlw	0
  2565  0A2B  0008               	return
  2566  0A2C                     l4153:	
  2567                           
  2568                           ;APDS9960.c: 283: }
  2569                           ;APDS9960.c: 286: if( !wireWriteDataByte(0x87, val_high) ) {
  2570  0A2C  0827               	movf	setLightIntHighThreshold@val_high,w
  2571  0A2D  00A5               	movwf	??_setLightIntHighThreshold
  2572  0A2E  0825               	movf	??_setLightIntHighThreshold,w
  2573  0A2F  00A0               	movwf	wireWriteDataByte@val
  2574  0A30  3087               	movlw	135
  2575  0A31  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2576  0A36  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0A37  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0A38  0820               	movf	?_wireWriteDataByte,w
  2579  0A39  0421               	iorwf	?_wireWriteDataByte+1,w
  2580  0A3A  1D03               	btfss	3,2
  2581  0A3B  2A3E               	goto	l4159
  2582                           
  2583                           ;APDS9960.c: 287: return 0;
  2584  0A3C  3000               	movlw	0
  2585  0A3D  0008               	return
  2586  0A3E                     l4159:	
  2587                           
  2588                           ;APDS9960.c: 288: }
  2589                           ;APDS9960.c: 290: return 1;
  2590  0A3E  3001               	movlw	1
  2591  0A3F  0008               	return
  2592  0A40                     __end_of_setLightIntHighThreshold:	
  2593                           
  2594                           	psect	text9
  2595  09E0                     __ptext9:	
  2596 ;; *************** function _setLEDDrive *****************
  2597 ;; Defined at:
  2598 ;;		line 164 in file "APDS9960.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  drive           1    wreg     unsigned char 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  drive           1   13[BANK0 ] unsigned char 
  2603 ;;  val             1   12[BANK0 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      unsigned char 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0, pclath, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2613 ;;      Params:         0       0       0       0       0
  2614 ;;      Locals:         0       2       0       0       0
  2615 ;;      Temps:          0       2       0       0       0
  2616 ;;      Totals:         0       4       0       0       0
  2617 ;;Total ram usage:        4 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    3
  2620 ;; This function calls:
  2621 ;;		_wireReadDataByte
  2622 ;;		_wireWriteDataByte
  2623 ;; This function is called by:
  2624 ;;		_initialize
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _setLEDDrive
  2630  09E0                     _setLEDDrive:	
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  2634                           ;setLEDDrive@drive stored from wreg
  2635  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  2636  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  2637  09E2  00AD               	movwf	setLEDDrive@drive
  2638                           
  2639                           ;APDS9960.c: 166: uint8_t val;
  2640                           ;APDS9960.c: 169: val=wireReadDataByte(0x8F);
  2641  09E3  308F               	movlw	143
  2642  09E4  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  2643  09E9  1283               	bcf	3,5	;RP0=0, select bank0
  2644  09EA  1303               	bcf	3,6	;RP1=0, select bank0
  2645  09EB  00AA               	movwf	??_setLEDDrive
  2646  09EC  082A               	movf	??_setLEDDrive,w
  2647  09ED  00AC               	movwf	setLEDDrive@val
  2648                           
  2649                           ;APDS9960.c: 172: drive &= 0b00000011;
  2650  09EE  3003               	movlw	3
  2651  09EF  00AA               	movwf	??_setLEDDrive
  2652  09F0  082A               	movf	??_setLEDDrive,w
  2653  09F1  05AD               	andwf	setLEDDrive@drive,f
  2654                           
  2655                           ;APDS9960.c: 173: drive = drive << 6;
  2656  09F2  082D               	movf	setLEDDrive@drive,w
  2657  09F3  00AA               	movwf	??_setLEDDrive
  2658  09F4  3005               	movlw	5
  2659  09F5                     u4835:	
  2660  09F5  1003               	clrc
  2661  09F6  0DAA               	rlf	??_setLEDDrive,f
  2662  09F7  3EFF               	addlw	-1
  2663  09F8  1D03               	skipz
  2664  09F9  29F5               	goto	u4835
  2665  09FA  1003               	clrc
  2666  09FB  0D2A               	rlf	??_setLEDDrive,w
  2667  09FC  00AB               	movwf	??_setLEDDrive+1
  2668  09FD  082B               	movf	??_setLEDDrive+1,w
  2669  09FE  00AD               	movwf	setLEDDrive@drive
  2670                           
  2671                           ;APDS9960.c: 174: val &= 0b00111111;
  2672  09FF  303F               	movlw	63
  2673  0A00  00AA               	movwf	??_setLEDDrive
  2674  0A01  082A               	movf	??_setLEDDrive,w
  2675  0A02  05AC               	andwf	setLEDDrive@val,f
  2676                           
  2677                           ;APDS9960.c: 175: val |= drive;
  2678  0A03  082D               	movf	setLEDDrive@drive,w
  2679  0A04  00AA               	movwf	??_setLEDDrive
  2680  0A05  082A               	movf	??_setLEDDrive,w
  2681  0A06  04AC               	iorwf	setLEDDrive@val,f
  2682                           
  2683                           ;APDS9960.c: 178: if( !wireWriteDataByte(0x8F, val) ) {
  2684  0A07  082C               	movf	setLEDDrive@val,w
  2685  0A08  00AA               	movwf	??_setLEDDrive
  2686  0A09  082A               	movf	??_setLEDDrive,w
  2687  0A0A  00A0               	movwf	wireWriteDataByte@val
  2688  0A0B  308F               	movlw	143
  2689  0A0C  120A  158A  2160   	fcall	_wireWriteDataByte
  2690                           
  2691                           ;APDS9960.c: 179: return 0;
  2692                           ;	Return value of _setLEDDrive is never used
  2693  0A0F  0008               	return
  2694  0A10                     __end_of_setLEDDrive:	
  2695                           ;APDS9960.c: 180: }
  2696                           ;APDS9960.c: 182: return 1;
  2697                           ;	Return value of _setLEDDrive is never used
  2698                           
  2699                           
  2700                           	psect	text10
  2701  09B2                     __ptext10:	
  2702 ;; *************** function _setGestureWaitTime *****************
  2703 ;; Defined at:
  2704 ;;		line 360 in file "APDS9960.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  time            1    wreg     unsigned char 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  time            1   11[BANK0 ] unsigned char 
  2709 ;;  val             1   12[BANK0 ] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      unsigned char 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, pclath, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         0       0       0       0       0
  2720 ;;      Locals:         0       2       0       0       0
  2721 ;;      Temps:          0       1       0       0       0
  2722 ;;      Totals:         0       3       0       0       0
  2723 ;;Total ram usage:        3 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    3
  2726 ;; This function calls:
  2727 ;;		_wireReadDataByte
  2728 ;;		_wireWriteDataByte
  2729 ;; This function is called by:
  2730 ;;		_initialize
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           
  2735                           ;psect for function _setGestureWaitTime
  2736  09B2                     _setGestureWaitTime:	
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  2740                           ;setGestureWaitTime@time stored from wreg
  2741  09B2  1283               	bcf	3,5	;RP0=0, select bank0
  2742  09B3  1303               	bcf	3,6	;RP1=0, select bank0
  2743  09B4  00AB               	movwf	setGestureWaitTime@time
  2744                           
  2745                           ;APDS9960.c: 362: uint8_t val;
  2746                           ;APDS9960.c: 365: val = wireReadDataByte(0xA3);
  2747  09B5  30A3               	movlw	163
  2748  09B6  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  2749  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  2750  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  2751  09BD  00AA               	movwf	??_setGestureWaitTime
  2752  09BE  082A               	movf	??_setGestureWaitTime,w
  2753  09BF  00AC               	movwf	setGestureWaitTime@val
  2754                           
  2755                           ;APDS9960.c: 368: time &= 0b00000111;
  2756  09C0  3007               	movlw	7
  2757  09C1  00AA               	movwf	??_setGestureWaitTime
  2758  09C2  082A               	movf	??_setGestureWaitTime,w
  2759  09C3  05AB               	andwf	setGestureWaitTime@time,f
  2760                           
  2761                           ;APDS9960.c: 369: val &= 0b11111000;
  2762  09C4  30F8               	movlw	248
  2763  09C5  00AA               	movwf	??_setGestureWaitTime
  2764  09C6  082A               	movf	??_setGestureWaitTime,w
  2765  09C7  05AC               	andwf	setGestureWaitTime@val,f
  2766                           
  2767                           ;APDS9960.c: 370: val |= time;
  2768  09C8  082B               	movf	setGestureWaitTime@time,w
  2769  09C9  00AA               	movwf	??_setGestureWaitTime
  2770  09CA  082A               	movf	??_setGestureWaitTime,w
  2771  09CB  04AC               	iorwf	setGestureWaitTime@val,f
  2772                           
  2773                           ;APDS9960.c: 373: if( !wireWriteDataByte(0xA3, val) ) {
  2774  09CC  082C               	movf	setGestureWaitTime@val,w
  2775  09CD  00AA               	movwf	??_setGestureWaitTime
  2776  09CE  082A               	movf	??_setGestureWaitTime,w
  2777  09CF  00A0               	movwf	wireWriteDataByte@val
  2778  09D0  30A3               	movlw	163
  2779  09D1  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2780  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  2781  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  2782  09D8  0820               	movf	?_wireWriteDataByte,w
  2783  09D9  0421               	iorwf	?_wireWriteDataByte+1,w
  2784  09DA  1D03               	btfss	3,2
  2785  09DB  29DE               	goto	l4233
  2786                           
  2787                           ;APDS9960.c: 374: return 0;
  2788  09DC  3000               	movlw	0
  2789  09DD  0008               	return
  2790  09DE                     l4233:	
  2791                           
  2792                           ;APDS9960.c: 375: }
  2793                           ;APDS9960.c: 377: return 1;
  2794  09DE  3001               	movlw	1
  2795  09DF  0008               	return
  2796  09E0                     __end_of_setGestureWaitTime:	
  2797                           
  2798                           	psect	text11
  2799  0BF5                     __ptext11:	
  2800 ;; *************** function _setGestureLEDDrive *****************
  2801 ;; Defined at:
  2802 ;;		line 337 in file "APDS9960.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  drive           1    wreg     unsigned char 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  drive           1   13[BANK0 ] unsigned char 
  2807 ;;  val             1   12[BANK0 ] unsigned char 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      unsigned char 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, status,0, pclath, cstack
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2817 ;;      Params:         0       0       0       0       0
  2818 ;;      Locals:         0       2       0       0       0
  2819 ;;      Temps:          0       2       0       0       0
  2820 ;;      Totals:         0       4       0       0       0
  2821 ;;Total ram usage:        4 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		_wireReadDataByte
  2826 ;;		_wireWriteDataByte
  2827 ;; This function is called by:
  2828 ;;		_initialize
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function _setGestureLEDDrive
  2834  0BF5                     _setGestureLEDDrive:	
  2835                           
  2836                           ;incstack = 0
  2837                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  2838                           ;setGestureLEDDrive@drive stored from wreg
  2839  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0BF7  00AD               	movwf	setGestureLEDDrive@drive
  2842                           
  2843                           ;APDS9960.c: 339: uint8_t val;
  2844                           ;APDS9960.c: 342: val = wireReadDataByte(0xA3);
  2845  0BF8  30A3               	movlw	163
  2846  0BF9  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  2847  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0C00  00AA               	movwf	??_setGestureLEDDrive
  2850  0C01  082A               	movf	??_setGestureLEDDrive,w
  2851  0C02  00AC               	movwf	setGestureLEDDrive@val
  2852                           
  2853                           ;APDS9960.c: 346: drive &= 0b00000011;
  2854  0C03  3003               	movlw	3
  2855  0C04  00AA               	movwf	??_setGestureLEDDrive
  2856  0C05  082A               	movf	??_setGestureLEDDrive,w
  2857  0C06  05AD               	andwf	setGestureLEDDrive@drive,f
  2858                           
  2859                           ;APDS9960.c: 347: drive = drive << 3;
  2860  0C07  082D               	movf	setGestureLEDDrive@drive,w
  2861  0C08  00AA               	movwf	??_setGestureLEDDrive
  2862  0C09  3002               	movlw	2
  2863  0C0A                     u4955:	
  2864  0C0A  1003               	clrc
  2865  0C0B  0DAA               	rlf	??_setGestureLEDDrive,f
  2866  0C0C  3EFF               	addlw	-1
  2867  0C0D  1D03               	skipz
  2868  0C0E  2C0A               	goto	u4955
  2869  0C0F  1003               	clrc
  2870  0C10  0D2A               	rlf	??_setGestureLEDDrive,w
  2871  0C11  00AB               	movwf	??_setGestureLEDDrive+1
  2872  0C12  082B               	movf	??_setGestureLEDDrive+1,w
  2873  0C13  00AD               	movwf	setGestureLEDDrive@drive
  2874                           
  2875                           ;APDS9960.c: 348: val &= 0b11100111;
  2876  0C14  30E7               	movlw	231
  2877  0C15  00AA               	movwf	??_setGestureLEDDrive
  2878  0C16  082A               	movf	??_setGestureLEDDrive,w
  2879  0C17  05AC               	andwf	setGestureLEDDrive@val,f
  2880                           
  2881                           ;APDS9960.c: 349: val |= drive;
  2882  0C18  082D               	movf	setGestureLEDDrive@drive,w
  2883  0C19  00AA               	movwf	??_setGestureLEDDrive
  2884  0C1A  082A               	movf	??_setGestureLEDDrive,w
  2885  0C1B  04AC               	iorwf	setGestureLEDDrive@val,f
  2886                           
  2887                           ;APDS9960.c: 352: if( !wireWriteDataByte(0xA3, val) ) {
  2888  0C1C  082C               	movf	setGestureLEDDrive@val,w
  2889  0C1D  00AA               	movwf	??_setGestureLEDDrive
  2890  0C1E  082A               	movf	??_setGestureLEDDrive,w
  2891  0C1F  00A0               	movwf	wireWriteDataByte@val
  2892  0C20  30A3               	movlw	163
  2893  0C21  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  2894  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  2895  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  2896  0C28  0820               	movf	?_wireWriteDataByte,w
  2897  0C29  0421               	iorwf	?_wireWriteDataByte+1,w
  2898  0C2A  1D03               	btfss	3,2
  2899  0C2B  2C2E               	goto	l4215
  2900                           
  2901                           ;APDS9960.c: 353: return 0;
  2902  0C2C  3000               	movlw	0
  2903  0C2D  0008               	return
  2904  0C2E                     l4215:	
  2905                           
  2906                           ;APDS9960.c: 354: }
  2907                           ;APDS9960.c: 356: return 1;
  2908  0C2E  3001               	movlw	1
  2909  0C2F  0008               	return
  2910  0C30                     __end_of_setGestureLEDDrive:	
  2911                           
  2912                           	psect	text12
  2913  0BBA                     __ptext12:	
  2914 ;; *************** function _setGestureGain *****************
  2915 ;; Defined at:
  2916 ;;		line 314 in file "APDS9960.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  gain            1    wreg     unsigned char 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  gain            1   13[BANK0 ] unsigned char 
  2921 ;;  val             1   12[BANK0 ] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      unsigned char 
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, pclath, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2931 ;;      Params:         0       0       0       0       0
  2932 ;;      Locals:         0       2       0       0       0
  2933 ;;      Temps:          0       2       0       0       0
  2934 ;;      Totals:         0       4       0       0       0
  2935 ;;Total ram usage:        4 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    3
  2938 ;; This function calls:
  2939 ;;		_wireReadDataByte
  2940 ;;		_wireWriteDataByte
  2941 ;; This function is called by:
  2942 ;;		_initialize
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           
  2947                           ;psect for function _setGestureGain
  2948  0BBA                     _setGestureGain:	
  2949                           
  2950                           ;incstack = 0
  2951                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  2952                           ;setGestureGain@gain stored from wreg
  2953  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0BBC  00AD               	movwf	setGestureGain@gain
  2956                           
  2957                           ;APDS9960.c: 316: uint8_t val;
  2958                           ;APDS9960.c: 319: val = wireReadDataByte(0xA3);
  2959  0BBD  30A3               	movlw	163
  2960  0BBE  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  2961  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0BC5  00AA               	movwf	??_setGestureGain
  2964  0BC6  082A               	movf	??_setGestureGain,w
  2965  0BC7  00AC               	movwf	setGestureGain@val
  2966                           
  2967                           ;APDS9960.c: 323: gain &= 0b00000011;
  2968  0BC8  3003               	movlw	3
  2969  0BC9  00AA               	movwf	??_setGestureGain
  2970  0BCA  082A               	movf	??_setGestureGain,w
  2971  0BCB  05AD               	andwf	setGestureGain@gain,f
  2972                           
  2973                           ;APDS9960.c: 324: gain = gain << 5;
  2974  0BCC  082D               	movf	setGestureGain@gain,w
  2975  0BCD  00AA               	movwf	??_setGestureGain
  2976  0BCE  3004               	movlw	4
  2977  0BCF                     u4935:	
  2978  0BCF  1003               	clrc
  2979  0BD0  0DAA               	rlf	??_setGestureGain,f
  2980  0BD1  3EFF               	addlw	-1
  2981  0BD2  1D03               	skipz
  2982  0BD3  2BCF               	goto	u4935
  2983  0BD4  1003               	clrc
  2984  0BD5  0D2A               	rlf	??_setGestureGain,w
  2985  0BD6  00AB               	movwf	??_setGestureGain+1
  2986  0BD7  082B               	movf	??_setGestureGain+1,w
  2987  0BD8  00AD               	movwf	setGestureGain@gain
  2988                           
  2989                           ;APDS9960.c: 325: val &= 0b10011111;
  2990  0BD9  309F               	movlw	159
  2991  0BDA  00AA               	movwf	??_setGestureGain
  2992  0BDB  082A               	movf	??_setGestureGain,w
  2993  0BDC  05AC               	andwf	setGestureGain@val,f
  2994                           
  2995                           ;APDS9960.c: 326: val |= gain;
  2996  0BDD  082D               	movf	setGestureGain@gain,w
  2997  0BDE  00AA               	movwf	??_setGestureGain
  2998  0BDF  082A               	movf	??_setGestureGain,w
  2999  0BE0  04AC               	iorwf	setGestureGain@val,f
  3000                           
  3001                           ;APDS9960.c: 329: if( !wireWriteDataByte(0xA3, val) ) {
  3002  0BE1  082C               	movf	setGestureGain@val,w
  3003  0BE2  00AA               	movwf	??_setGestureGain
  3004  0BE3  082A               	movf	??_setGestureGain,w
  3005  0BE4  00A0               	movwf	wireWriteDataByte@val
  3006  0BE5  30A3               	movlw	163
  3007  0BE6  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  3008  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0BED  0820               	movf	?_wireWriteDataByte,w
  3011  0BEE  0421               	iorwf	?_wireWriteDataByte+1,w
  3012  0BEF  1D03               	btfss	3,2
  3013  0BF0  2BF3               	goto	l4197
  3014                           
  3015                           ;APDS9960.c: 330: return 0;
  3016  0BF1  3000               	movlw	0
  3017  0BF2  0008               	return
  3018  0BF3                     l4197:	
  3019                           
  3020                           ;APDS9960.c: 331: }
  3021                           ;APDS9960.c: 333: return 1;
  3022  0BF3  3001               	movlw	1
  3023  0BF4  0008               	return
  3024  0BF5                     __end_of_setGestureGain:	
  3025                           
  3026                           	psect	text13
  3027  08B3                     __ptext13:	
  3028 ;; *************** function _setGestureExitThresh *****************
  3029 ;; Defined at:
  3030 ;;		line 304 in file "APDS9960.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  threshold       1    wreg     unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  threshold       1    4[BANK0 ] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      unsigned char 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0, pclath, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3044 ;;      Params:         0       0       0       0       0
  3045 ;;      Locals:         0       1       0       0       0
  3046 ;;      Temps:          0       1       0       0       0
  3047 ;;      Totals:         0       2       0       0       0
  3048 ;;Total ram usage:        2 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    3
  3051 ;; This function calls:
  3052 ;;		_wireWriteDataByte
  3053 ;; This function is called by:
  3054 ;;		_initialize
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function _setGestureExitThresh
  3060  08B3                     _setGestureExitThresh:	
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  3064                           ;setGestureExitThresh@threshold stored from wreg
  3065  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  3066  08B4  1303               	bcf	3,6	;RP1=0, select bank0
  3067  08B5  00A4               	movwf	setGestureExitThresh@threshold
  3068                           
  3069                           ;APDS9960.c: 306: if( !wireWriteDataByte(0xA1, threshold) ) {
  3070  08B6  0824               	movf	setGestureExitThresh@threshold,w
  3071  08B7  00A3               	movwf	??_setGestureExitThresh
  3072  08B8  0823               	movf	??_setGestureExitThresh,w
  3073  08B9  00A0               	movwf	wireWriteDataByte@val
  3074  08BA  30A1               	movlw	161
  3075  08BB  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  3076  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  3077  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  3078  08C2  0820               	movf	?_wireWriteDataByte,w
  3079  08C3  0421               	iorwf	?_wireWriteDataByte+1,w
  3080  08C4  1D03               	btfss	3,2
  3081  08C5  28C8               	goto	l4179
  3082                           
  3083                           ;APDS9960.c: 307: return 0;
  3084  08C6  3000               	movlw	0
  3085  08C7  0008               	return
  3086  08C8                     l4179:	
  3087                           
  3088                           ;APDS9960.c: 308: }
  3089                           ;APDS9960.c: 310: return 1;
  3090  08C8  3001               	movlw	1
  3091  08C9  0008               	return
  3092  08CA                     __end_of_setGestureExitThresh:	
  3093                           
  3094                           	psect	text14
  3095  089C                     __ptext14:	
  3096 ;; *************** function _setGestureEnterThresh *****************
  3097 ;; Defined at:
  3098 ;;		line 294 in file "APDS9960.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  threshold       1    wreg     unsigned char 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  threshold       1    4[BANK0 ] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      unsigned char 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0, pclath, cstack
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3112 ;;      Params:         0       0       0       0       0
  3113 ;;      Locals:         0       1       0       0       0
  3114 ;;      Temps:          0       1       0       0       0
  3115 ;;      Totals:         0       2       0       0       0
  3116 ;;Total ram usage:        2 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    3
  3119 ;; This function calls:
  3120 ;;		_wireWriteDataByte
  3121 ;; This function is called by:
  3122 ;;		_initialize
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           
  3127                           ;psect for function _setGestureEnterThresh
  3128  089C                     _setGestureEnterThresh:	
  3129                           
  3130                           ;incstack = 0
  3131                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  3132                           ;setGestureEnterThresh@threshold stored from wreg
  3133  089C  1283               	bcf	3,5	;RP0=0, select bank0
  3134  089D  1303               	bcf	3,6	;RP1=0, select bank0
  3135  089E  00A4               	movwf	setGestureEnterThresh@threshold
  3136                           
  3137                           ;APDS9960.c: 296: if( !wireWriteDataByte(0xA0, threshold) ) {
  3138  089F  0824               	movf	setGestureEnterThresh@threshold,w
  3139  08A0  00A3               	movwf	??_setGestureEnterThresh
  3140  08A1  0823               	movf	??_setGestureEnterThresh,w
  3141  08A2  00A0               	movwf	wireWriteDataByte@val
  3142  08A3  30A0               	movlw	160
  3143  08A4  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  3144  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  3145  08AA  1303               	bcf	3,6	;RP1=0, select bank0
  3146  08AB  0820               	movf	?_wireWriteDataByte,w
  3147  08AC  0421               	iorwf	?_wireWriteDataByte+1,w
  3148  08AD  1D03               	btfss	3,2
  3149  08AE  28B1               	goto	l4169
  3150                           
  3151                           ;APDS9960.c: 297: return 0;
  3152  08AF  3000               	movlw	0
  3153  08B0  0008               	return
  3154  08B1                     l4169:	
  3155                           
  3156                           ;APDS9960.c: 298: }
  3157                           ;APDS9960.c: 300: return 1;
  3158  08B1  3001               	movlw	1
  3159  08B2  0008               	return
  3160  08B3                     __end_of_setGestureEnterThresh:	
  3161                           
  3162                           	psect	text15
  3163  093D                     __ptext15:	
  3164 ;; *************** function _setAmbientLightGain *****************
  3165 ;; Defined at:
  3166 ;;		line 207 in file "APDS9960.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  drive           1    wreg     unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  drive           1   11[BANK0 ] unsigned char 
  3171 ;;  val             1   12[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      unsigned char 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, pclath, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       0       0       0       0
  3182 ;;      Locals:         0       2       0       0       0
  3183 ;;      Temps:          0       1       0       0       0
  3184 ;;      Totals:         0       3       0       0       0
  3185 ;;Total ram usage:        3 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		_wireReadDataByte
  3190 ;;		_wireWriteDataByte
  3191 ;; This function is called by:
  3192 ;;		_initialize
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _setAmbientLightGain
  3198  093D                     _setAmbientLightGain:	
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  3202                           ;setAmbientLightGain@drive stored from wreg
  3203  093D  1283               	bcf	3,5	;RP0=0, select bank0
  3204  093E  1303               	bcf	3,6	;RP1=0, select bank0
  3205  093F  00AB               	movwf	setAmbientLightGain@drive
  3206                           
  3207                           ;APDS9960.c: 209: uint8_t val;
  3208                           ;APDS9960.c: 212: val= wireReadDataByte(0x8F);
  3209  0940  308F               	movlw	143
  3210  0941  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  3211  0946  1283               	bcf	3,5	;RP0=0, select bank0
  3212  0947  1303               	bcf	3,6	;RP1=0, select bank0
  3213  0948  00AA               	movwf	??_setAmbientLightGain
  3214  0949  082A               	movf	??_setAmbientLightGain,w
  3215  094A  00AC               	movwf	setAmbientLightGain@val
  3216                           
  3217                           ;APDS9960.c: 215: drive &= 0b00000011;
  3218  094B  3003               	movlw	3
  3219  094C  00AA               	movwf	??_setAmbientLightGain
  3220  094D  082A               	movf	??_setAmbientLightGain,w
  3221  094E  05AB               	andwf	setAmbientLightGain@drive,f
  3222                           
  3223                           ;APDS9960.c: 216: val &= 0b11111100;
  3224  094F  30FC               	movlw	252
  3225  0950  00AA               	movwf	??_setAmbientLightGain
  3226  0951  082A               	movf	??_setAmbientLightGain,w
  3227  0952  05AC               	andwf	setAmbientLightGain@val,f
  3228                           
  3229                           ;APDS9960.c: 217: val |= drive;
  3230  0953  082B               	movf	setAmbientLightGain@drive,w
  3231  0954  00AA               	movwf	??_setAmbientLightGain
  3232  0955  082A               	movf	??_setAmbientLightGain,w
  3233  0956  04AC               	iorwf	setAmbientLightGain@val,f
  3234                           
  3235                           ;APDS9960.c: 220: if( !wireWriteDataByte(0x8F, val) ) {
  3236  0957  082C               	movf	setAmbientLightGain@val,w
  3237  0958  00AA               	movwf	??_setAmbientLightGain
  3238  0959  082A               	movf	??_setAmbientLightGain,w
  3239  095A  00A0               	movwf	wireWriteDataByte@val
  3240  095B  308F               	movlw	143
  3241  095C  120A  158A  2160   	fcall	_wireWriteDataByte
  3242                           
  3243                           ;APDS9960.c: 221: return 0;
  3244                           ;	Return value of _setAmbientLightGain is never used
  3245  095F  0008               	return
  3246  0960                     __end_of_setAmbientLightGain:	
  3247                           ;APDS9960.c: 222: }
  3248                           ;APDS9960.c: 224: return 1;
  3249                           ;	Return value of _setAmbientLightGain is never used
  3250                           
  3251                           
  3252                           	psect	text16
  3253  17CE                     __ptext16:	
  3254 ;; *************** function _InitI2C *****************
  3255 ;; Defined at:
  3256 ;;		line 11 in file "i2c.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;		None               void
  3263 ;; Registers used:
  3264 ;;		wreg
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3270 ;;      Params:         0       0       0       0       0
  3271 ;;      Locals:         0       0       0       0       0
  3272 ;;      Temps:          0       0       0       0       0
  3273 ;;      Totals:         0       0       0       0       0
  3274 ;;Total ram usage:        0 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_initialize
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function _InitI2C
  3286  17CE                     _InitI2C:	
  3287                           
  3288                           ;i2c.c: 14: TRISC4 = 1;
  3289                           
  3290                           ;incstack = 0
  3291                           ; Regs used in _InitI2C: [wreg]
  3292  17CE  1683               	bsf	3,5	;RP0=1, select bank1
  3293  17CF  1303               	bcf	3,6	;RP1=0, select bank1
  3294  17D0  1607               	bsf	7,4	;volatile
  3295                           
  3296                           ;i2c.c: 15: TRISC3 = 1;
  3297  17D1  1587               	bsf	7,3	;volatile
  3298                           
  3299                           ;i2c.c: 17: SSPADD = ((20000000/4000)/100) - 1;
  3300  17D2  3031               	movlw	49
  3301  17D3  0093               	movwf	19	;volatile
  3302                           
  3303                           ;i2c.c: 18: SSPSTAT = 0x80;
  3304  17D4  3080               	movlw	128
  3305  17D5  0094               	movwf	20	;volatile
  3306                           
  3307                           ;i2c.c: 19: SSPCON = 0x28;
  3308  17D6  3028               	movlw	40
  3309  17D7  1283               	bcf	3,5	;RP0=0, select bank0
  3310  17D8  1303               	bcf	3,6	;RP1=0, select bank0
  3311  17D9  0094               	movwf	20	;volatile
  3312  17DA  0008               	return
  3313  17DB                     __end_of_InitI2C:	
  3314                           
  3315                           	psect	text17
  3316  0EF3                     __ptext17:	
  3317 ;; *************** function _handleGesture *****************
  3318 ;; Defined at:
  3319 ;;		line 123 in file "GestureTest.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3333 ;;      Params:         0       0       0       0       0
  3334 ;;      Locals:         0       0       0       0       0
  3335 ;;      Temps:          0       3       0       0       0
  3336 ;;      Totals:         0       3       0       0       0
  3337 ;;Total ram usage:        3 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    5
  3340 ;; This function calls:
  3341 ;;		_isGestureAvailable
  3342 ;;		_lcd_clear
  3343 ;;		_lcd_home
  3344 ;;		_lcd_putstr
  3345 ;;		_readGesture
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _handleGesture
  3353  0EF3                     _handleGesture:	
  3354                           
  3355                           ;GestureTest.c: 125: if (isGestureAvailable())
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _handleGesture: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3359  0EF3  120A  158A  206F  120A  158A  	fcall	_isGestureAvailable
  3360  0EF8  3A00               	xorlw	0
  3361  0EF9  1903               	skipnz
  3362  0EFA  0008               	return
  3363  0EFB  2FDC               	goto	l4583
  3364  0EFC                     l4541:	
  3365                           ;GestureTest.c: 128: {
  3366                           ;GestureTest.c: 129: case DIR_UP:
  3367                           
  3368                           ;GestureTest.c: 126: {
  3369                           ;GestureTest.c: 127: switch (readGesture())
  3370                           
  3371                           
  3372                           ;GestureTest.c: 130: lcd_clear();
  3373  0EFC  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3374                           
  3375                           ;GestureTest.c: 131: lcd_home();
  3376  0F01  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3377                           
  3378                           ;GestureTest.c: 132: lcd_putstr("up");
  3379  0F06  3054               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  3380  0F07  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3381                           
  3382                           ;GestureTest.c: 133: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3383  0F0C  301A               	movlw	26
  3384  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  3385  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  3386  0F0F  00DB               	movwf	??_handleGesture+2
  3387  0F10  305E               	movlw	94
  3388  0F11  00DA               	movwf	??_handleGesture+1
  3389  0F12  3086               	movlw	134
  3390  0F13  00D9               	movwf	??_handleGesture
  3391  0F14                     u5537:	
  3392  0F14  0BD9               	decfsz	??_handleGesture,f
  3393  0F15  2F14               	goto	u5537
  3394  0F16  0BDA               	decfsz	??_handleGesture+1,f
  3395  0F17  2F14               	goto	u5537
  3396  0F18  0BDB               	decfsz	??_handleGesture+2,f
  3397  0F19  2F14               	goto	u5537
  3398  0F1A  0000               	nop
  3399                           
  3400                           ;GestureTest.c: 134: break;
  3401  0F1B  2FFC               	goto	l4585
  3402  0F1C                     l4547:	
  3403                           ;GestureTest.c: 135: case DIR_DOWN:
  3404                           
  3405                           
  3406                           ;GestureTest.c: 136: lcd_clear();
  3407  0F1C  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3408                           
  3409                           ;GestureTest.c: 137: lcd_home();
  3410  0F21  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3411                           
  3412                           ;GestureTest.c: 138: lcd_putstr("down");
  3413  0F26  3041               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3414  0F27  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3415                           
  3416                           ;GestureTest.c: 139: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3417  0F2C  301A               	movlw	26
  3418  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  3419  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  3420  0F2F  00DB               	movwf	??_handleGesture+2
  3421  0F30  305E               	movlw	94
  3422  0F31  00DA               	movwf	??_handleGesture+1
  3423  0F32  3086               	movlw	134
  3424  0F33  00D9               	movwf	??_handleGesture
  3425  0F34                     u5547:	
  3426  0F34  0BD9               	decfsz	??_handleGesture,f
  3427  0F35  2F34               	goto	u5547
  3428  0F36  0BDA               	decfsz	??_handleGesture+1,f
  3429  0F37  2F34               	goto	u5547
  3430  0F38  0BDB               	decfsz	??_handleGesture+2,f
  3431  0F39  2F34               	goto	u5547
  3432  0F3A  0000               	nop
  3433                           
  3434                           ;GestureTest.c: 140: break;
  3435  0F3B  2FFC               	goto	l4585
  3436  0F3C                     l4553:	
  3437                           ;GestureTest.c: 141: case DIR_LEFT:
  3438                           
  3439                           
  3440                           ;GestureTest.c: 142: lcd_clear();
  3441  0F3C  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3442                           
  3443                           ;GestureTest.c: 143: lcd_home();
  3444  0F41  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3445                           
  3446                           ;GestureTest.c: 144: lcd_putstr("left");
  3447  0F46  304B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3448  0F47  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3449                           
  3450                           ;GestureTest.c: 145: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3451  0F4C  301A               	movlw	26
  3452  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0F4F  00DB               	movwf	??_handleGesture+2
  3455  0F50  305E               	movlw	94
  3456  0F51  00DA               	movwf	??_handleGesture+1
  3457  0F52  3086               	movlw	134
  3458  0F53  00D9               	movwf	??_handleGesture
  3459  0F54                     u5557:	
  3460  0F54  0BD9               	decfsz	??_handleGesture,f
  3461  0F55  2F54               	goto	u5557
  3462  0F56  0BDA               	decfsz	??_handleGesture+1,f
  3463  0F57  2F54               	goto	u5557
  3464  0F58  0BDB               	decfsz	??_handleGesture+2,f
  3465  0F59  2F54               	goto	u5557
  3466  0F5A  0000               	nop
  3467                           
  3468                           ;GestureTest.c: 146: break;
  3469  0F5B  2FFC               	goto	l4585
  3470  0F5C                     l4559:	
  3471                           ;GestureTest.c: 147: case DIR_RIGHT:
  3472                           
  3473                           
  3474                           ;GestureTest.c: 148: lcd_clear();
  3475  0F5C  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3476                           
  3477                           ;GestureTest.c: 149: lcd_home();
  3478  0F61  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3479                           
  3480                           ;GestureTest.c: 150: lcd_putstr("right");
  3481  0F66  3036               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3482  0F67  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3483                           
  3484                           ;GestureTest.c: 151: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3485  0F6C  301A               	movlw	26
  3486  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0F6F  00DB               	movwf	??_handleGesture+2
  3489  0F70  305E               	movlw	94
  3490  0F71  00DA               	movwf	??_handleGesture+1
  3491  0F72  3086               	movlw	134
  3492  0F73  00D9               	movwf	??_handleGesture
  3493  0F74                     u5567:	
  3494  0F74  0BD9               	decfsz	??_handleGesture,f
  3495  0F75  2F74               	goto	u5567
  3496  0F76  0BDA               	decfsz	??_handleGesture+1,f
  3497  0F77  2F74               	goto	u5567
  3498  0F78  0BDB               	decfsz	??_handleGesture+2,f
  3499  0F79  2F74               	goto	u5567
  3500  0F7A  0000               	nop
  3501                           
  3502                           ;GestureTest.c: 152: break;
  3503  0F7B  2FFC               	goto	l4585
  3504  0F7C                     l4565:	
  3505                           ;GestureTest.c: 153: case DIR_NEAR:
  3506                           
  3507                           
  3508                           ;GestureTest.c: 154: lcd_clear();
  3509  0F7C  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3510                           
  3511                           ;GestureTest.c: 155: lcd_home();
  3512  0F81  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3513                           
  3514                           ;GestureTest.c: 156: lcd_putstr("near");
  3515  0F86  3046               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3516  0F87  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3517                           
  3518                           ;GestureTest.c: 157: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3519  0F8C  301A               	movlw	26
  3520  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0F8F  00DB               	movwf	??_handleGesture+2
  3523  0F90  305E               	movlw	94
  3524  0F91  00DA               	movwf	??_handleGesture+1
  3525  0F92  3086               	movlw	134
  3526  0F93  00D9               	movwf	??_handleGesture
  3527  0F94                     u5577:	
  3528  0F94  0BD9               	decfsz	??_handleGesture,f
  3529  0F95  2F94               	goto	u5577
  3530  0F96  0BDA               	decfsz	??_handleGesture+1,f
  3531  0F97  2F94               	goto	u5577
  3532  0F98  0BDB               	decfsz	??_handleGesture+2,f
  3533  0F99  2F94               	goto	u5577
  3534  0F9A  0000               	nop
  3535                           
  3536                           ;GestureTest.c: 158: break;
  3537  0F9B  2FFC               	goto	l4585
  3538  0F9C                     l4571:	
  3539                           ;GestureTest.c: 159: case DIR_FAR:
  3540                           
  3541                           
  3542                           ;GestureTest.c: 160: lcd_clear();
  3543  0F9C  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3544                           
  3545                           ;GestureTest.c: 161: lcd_home();
  3546  0FA1  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3547                           
  3548                           ;GestureTest.c: 162: lcd_putstr("far");
  3549  0FA6  3050               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3550  0FA7  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3551                           
  3552                           ;GestureTest.c: 163: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3553  0FAC  301A               	movlw	26
  3554  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  3556  0FAF  00DB               	movwf	??_handleGesture+2
  3557  0FB0  305E               	movlw	94
  3558  0FB1  00DA               	movwf	??_handleGesture+1
  3559  0FB2  3086               	movlw	134
  3560  0FB3  00D9               	movwf	??_handleGesture
  3561  0FB4                     u5587:	
  3562  0FB4  0BD9               	decfsz	??_handleGesture,f
  3563  0FB5  2FB4               	goto	u5587
  3564  0FB6  0BDA               	decfsz	??_handleGesture+1,f
  3565  0FB7  2FB4               	goto	u5587
  3566  0FB8  0BDB               	decfsz	??_handleGesture+2,f
  3567  0FB9  2FB4               	goto	u5587
  3568  0FBA  0000               	nop
  3569                           
  3570                           ;GestureTest.c: 164: break;
  3571  0FBB  2FFC               	goto	l4585
  3572  0FBC                     l4577:	
  3573                           ;GestureTest.c: 165: default:
  3574                           
  3575                           
  3576                           ;GestureTest.c: 166: lcd_clear();
  3577  0FBC  160A  118A  277C  120A  158A  	fcall	_lcd_clear
  3578                           
  3579                           ;GestureTest.c: 167: lcd_home();
  3580  0FC1  160A  118A  27AC  120A  158A  	fcall	_lcd_home
  3581                           
  3582                           ;GestureTest.c: 168: lcd_putstr("NONE");
  3583  0FC6  303C               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3584  0FC7  120A  158A  2430  120A  158A  	fcall	_lcd_putstr
  3585                           
  3586                           ;GestureTest.c: 169: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3587  0FCC  301A               	movlw	26
  3588  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  3589  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  3590  0FCF  00DB               	movwf	??_handleGesture+2
  3591  0FD0  305E               	movlw	94
  3592  0FD1  00DA               	movwf	??_handleGesture+1
  3593  0FD2  3086               	movlw	134
  3594  0FD3  00D9               	movwf	??_handleGesture
  3595  0FD4                     u5597:	
  3596  0FD4  0BD9               	decfsz	??_handleGesture,f
  3597  0FD5  2FD4               	goto	u5597
  3598  0FD6  0BDA               	decfsz	??_handleGesture+1,f
  3599  0FD7  2FD4               	goto	u5597
  3600  0FD8  0BDB               	decfsz	??_handleGesture+2,f
  3601  0FD9  2FD4               	goto	u5597
  3602  0FDA  0000               	nop
  3603                           
  3604                           ;GestureTest.c: 170: }
  3605  0FDB  2FFC               	goto	l4585
  3606  0FDC                     l4583:	
  3607  0FDC  120A  118A  269F  120A  158A  	fcall	_readGesture
  3608                           
  3609                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3610                           ; Switch size 1, requested type "space"
  3611                           ; Number of cases is 1, Range of values is 0 to 0
  3612                           ; switch strategies available:
  3613                           ; Name         Instructions Cycles
  3614                           ; simple_byte            4     3 (average)
  3615                           ; direct_byte           11     8 (fixed)
  3616                           ; jumptable            260     6 (fixed)
  3617                           ;	Chosen strategy is simple_byte
  3618  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0FE3  084E               	movf	?_readGesture+1,w
  3621  0FE4  3A00               	xorlw	0	; case 0
  3622  0FE5  1903               	skipnz
  3623  0FE6  2FE8               	goto	l4701
  3624  0FE7  2FBC               	goto	l4577
  3625  0FE8                     l4701:	
  3626                           
  3627                           ; Switch size 1, requested type "space"
  3628                           ; Number of cases is 6, Range of values is 1 to 6
  3629                           ; switch strategies available:
  3630                           ; Name         Instructions Cycles
  3631                           ; simple_byte           19    10 (average)
  3632                           ; direct_byte           29    11 (fixed)
  3633                           ; jumptable            263     9 (fixed)
  3634                           ;	Chosen strategy is simple_byte
  3635  0FE8  084D               	movf	?_readGesture,w
  3636  0FE9  3A01               	xorlw	1	; case 1
  3637  0FEA  1903               	skipnz
  3638  0FEB  2F3C               	goto	l4553
  3639  0FEC  3A03               	xorlw	3	; case 2
  3640  0FED  1903               	skipnz
  3641  0FEE  2F5C               	goto	l4559
  3642  0FEF  3A01               	xorlw	1	; case 3
  3643  0FF0  1903               	skipnz
  3644  0FF1  2EFC               	goto	l4541
  3645  0FF2  3A07               	xorlw	7	; case 4
  3646  0FF3  1903               	skipnz
  3647  0FF4  2F1C               	goto	l4547
  3648  0FF5  3A01               	xorlw	1	; case 5
  3649  0FF6  1903               	skipnz
  3650  0FF7  2F7C               	goto	l4565
  3651  0FF8  3A03               	xorlw	3	; case 6
  3652  0FF9  1903               	skipnz
  3653  0FFA  2F9C               	goto	l4571
  3654  0FFB  2FBC               	goto	l4577
  3655  0FFC                     l4585:	
  3656                           
  3657                           ;GestureTest.c: 171: lcd_clear();
  3658  0FFC  160A  118A  277C   	fcall	_lcd_clear
  3659  0FFF  0008               	return
  3660  1000                     __end_of_handleGesture:	
  3661                           
  3662                           	psect	text18
  3663  069F                     __ptext18:	
  3664 ;; *************** function _readGesture *****************
  3665 ;; Defined at:
  3666 ;;		line 550 in file "APDS9960.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  fifo_data      64    0[BANK3 ] unsigned char [64]
  3671 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  3672 ;;  i               2   55[BANK0 ] int 
  3673 ;;  bytes_read      2   52[BANK0 ] int 
  3674 ;;  motion          2   49[BANK0 ] int 
  3675 ;;  fifo_level      1   54[BANK0 ] unsigned char 
  3676 ;;  gstatus         1   51[BANK0 ] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  2   45[BANK0 ] int 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3686 ;;      Params:         0       2       0       0       0
  3687 ;;      Locals:         0       8      64      64       0
  3688 ;;      Temps:          0       2       0       0       0
  3689 ;;      Totals:         0      12      64      64       0
  3690 ;;Total ram usage:      140 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    4
  3693 ;; This function calls:
  3694 ;;		_decodeGesture
  3695 ;;		_getMode
  3696 ;;		_isGestureAvailable
  3697 ;;		_processGestureData
  3698 ;;		_resetGestureParameters
  3699 ;;		_wireReadDataBlock
  3700 ;;		_wireReadDataByte
  3701 ;; This function is called by:
  3702 ;;		_handleGesture
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _readGesture
  3708  069F                     _readGesture:	
  3709                           
  3710                           ;APDS9960.c: 552: uint8_t fifo_level = 0;
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _readGesture: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3714  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3715  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3716  06A1  01D6               	clrf	readGesture@fifo_level
  3717                           
  3718                           ;APDS9960.c: 553: int bytes_read = 0;
  3719  06A2  01D4               	clrf	readGesture@bytes_read
  3720  06A3  01D5               	clrf	readGesture@bytes_read+1
  3721                           
  3722                           ;APDS9960.c: 554: uint8_t fifo_data[64];
  3723                           ;APDS9960.c: 555: uint8_t fifo_data2[64];
  3724                           ;APDS9960.c: 556: uint8_t gstatus;
  3725                           ;APDS9960.c: 557: int motion;
  3726                           ;APDS9960.c: 558: int i;
  3727                           ;APDS9960.c: 561: if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
  3728  06A4  120A  158A  206F  120A  118A  	fcall	_isGestureAvailable
  3729  06A9  3A00               	xorlw	0
  3730  06AA  1903               	skipnz
  3731  06AB  2EB4               	goto	l4009
  3732  06AC  160A  118A  278B  120A  118A  	fcall	_getMode
  3733  06B1  3941               	andlw	65
  3734  06B2  1D03               	btfss	3,2
  3735  06B3  2F78               	goto	l4013
  3736  06B4                     l4009:	
  3737                           
  3738                           ;APDS9960.c: 562: return DIR_NONE;
  3739  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3740  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3741  06B6  01CD               	clrf	?_readGesture
  3742  06B7  01CE               	clrf	?_readGesture+1
  3743  06B8  0008               	return
  3744  06B9                     l4019:	
  3745                           
  3746                           ;APDS9960.c: 578: {
  3747                           ;APDS9960.c: 580: fifo_level= wireReadDataByte(0xAE);
  3748  06B9  30AE               	movlw	174
  3749  06BA  120A  158A  22D4  120A  118A  	fcall	_wireReadDataByte
  3750  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  3751  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  3752  06C1  00CF               	movwf	??_readGesture
  3753  06C2  084F               	movf	??_readGesture,w
  3754  06C3  00D6               	movwf	readGesture@fifo_level
  3755                           
  3756                           ;APDS9960.c: 584: if( fifo_level > 0) {
  3757  06C4  0856               	movf	readGesture@fifo_level,w
  3758  06C5  1903               	btfsc	3,2
  3759  06C6  2F78               	goto	l4013
  3760                           
  3761                           ;APDS9960.c: 586: if(fifo_level < 17)
  3762  06C7  3011               	movlw	17
  3763  06C8  0256               	subwf	readGesture@fifo_level,w
  3764  06C9  1803               	skipnc
  3765  06CA  2ECF               	goto	l4027
  3766                           
  3767                           ;APDS9960.c: 587: {
  3768                           ;APDS9960.c: 588: bytes_read = wireReadDataBlock( 0xFC,
  3769                           ;APDS9960.c: 589: (uint8_t*)fifo_data,
  3770                           ;APDS9960.c: 590: (fifo_level * 4) );
  3771  06CB  3090               	movlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  3772  06CC  00A8               	movwf	wireReadDataBlock@val
  3773  06CD  3001               	movlw	1
  3774  06CE  2ED2               	goto	L2
  3775  06CF                     l4027:	
  3776                           ;APDS9960.c: 591: } else
  3777                           
  3778                           
  3779                           ;APDS9960.c: 592: {
  3780                           ;APDS9960.c: 593: bytes_read = wireReadDataBlock( 0xFC,
  3781                           ;APDS9960.c: 594: (uint8_t*)fifo_data2,
  3782                           ;APDS9960.c: 595: (fifo_level * 4) );
  3783  06CF  30A0               	movlw	(low (readGesture@fifo_data2| 0))& (0+255)
  3784  06D0  00A8               	movwf	wireReadDataBlock@val
  3785  06D1  3000               	movlw	0
  3786  06D2                     L2:	
  3787  06D2  00A9               	movwf	wireReadDataBlock@val+1
  3788  06D3  0856               	movf	readGesture@fifo_level,w
  3789  06D4  00CF               	movwf	??_readGesture
  3790  06D5  01D0               	clrf	??_readGesture+1
  3791  06D6  1003               	clrc
  3792  06D7  0DCF               	rlf	??_readGesture,f
  3793  06D8  0DD0               	rlf	??_readGesture+1,f
  3794  06D9  1003               	clrc
  3795  06DA  0DCF               	rlf	??_readGesture,f
  3796  06DB  0DD0               	rlf	??_readGesture+1,f
  3797  06DC  084F               	movf	??_readGesture,w
  3798  06DD  00AA               	movwf	wireReadDataBlock@len
  3799  06DE  0850               	movf	??_readGesture+1,w
  3800  06DF  00AB               	movwf	wireReadDataBlock@len+1
  3801  06E0  30FC               	movlw	252
  3802  06E1  120A  158A  2523  120A  118A  	fcall	_wireReadDataBlock
  3803  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  3804  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  3805  06E8  0829               	movf	?_wireReadDataBlock+1,w
  3806  06E9  00D5               	movwf	readGesture@bytes_read+1
  3807  06EA  0828               	movf	?_wireReadDataBlock,w
  3808  06EB  00D4               	movwf	readGesture@bytes_read
  3809                           
  3810                           ;APDS9960.c: 596: }
  3811                           ;APDS9960.c: 599: if( bytes_read == -1 )
  3812  06EC  0A54               	incf	readGesture@bytes_read,w
  3813  06ED  1D03               	skipz
  3814  06EE  2EF7               	goto	l4035
  3815  06EF  0A55               	incf	readGesture@bytes_read+1,w
  3816  06F0  1D03               	btfss	3,2
  3817  06F1  2EF7               	goto	l4035
  3818                           
  3819                           ;APDS9960.c: 600: {
  3820                           ;APDS9960.c: 601: return 0xFF;
  3821  06F2  30FF               	movlw	255
  3822  06F3  00CD               	movwf	?_readGesture
  3823  06F4  3000               	movlw	0
  3824  06F5  00CE               	movwf	?_readGesture+1
  3825  06F6  0008               	return
  3826  06F7                     l4035:	
  3827                           
  3828                           ;APDS9960.c: 602: }
  3829                           ;APDS9960.c: 606: if( bytes_read >= 4 )
  3830  06F7  0855               	movf	readGesture@bytes_read+1,w
  3831  06F8  3A80               	xorlw	128
  3832  06F9  00FF               	movwf	127
  3833  06FA  3080               	movlw	128
  3834  06FB  027F               	subwf	127,w
  3835  06FC  1D03               	skipz
  3836  06FD  2F00               	goto	u4805
  3837  06FE  3004               	movlw	4
  3838  06FF  0254               	subwf	readGesture@bytes_read,w
  3839  0700                     u4805:	
  3840  0700  1C03               	skipc
  3841  0701  2F78               	goto	l4013
  3842                           
  3843                           ;APDS9960.c: 607: {
  3844                           ;APDS9960.c: 609: for( i = 0; i < bytes_read; i += 4 ) {
  3845  0702  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0703  1303               	bcf	3,6	;RP1=0, select bank0
  3847  0704  01D7               	clrf	readGesture@i
  3848  0705  01D8               	clrf	readGesture@i+1
  3849  0706                     l4047:	
  3850  0706  0858               	movf	readGesture@i+1,w
  3851  0707  3A80               	xorlw	128
  3852  0708  00CF               	movwf	??_readGesture
  3853  0709  0855               	movf	readGesture@bytes_read+1,w
  3854  070A  3A80               	xorlw	128
  3855  070B  024F               	subwf	??_readGesture,w
  3856  070C  1D03               	skipz
  3857  070D  2F10               	goto	u4815
  3858  070E  0854               	movf	readGesture@bytes_read,w
  3859  070F  0257               	subwf	readGesture@i,w
  3860  0710                     u4815:	
  3861  0710  1803               	btfsc	3,0
  3862  0711  2F67               	goto	l4049
  3863                           
  3864                           ;APDS9960.c: 610: gesture_data_.u_data[gesture_data_.index] = fifo_data[i + 0];
  3865  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0714  0857               	movf	readGesture@i,w
  3868  0715  3E90               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  3869  0716  0084               	movwf	4
  3870  0717  1783               	bsf	3,7	;select IRP bank3
  3871  0718  0800               	movf	0,w
  3872  0719  00CF               	movwf	??_readGesture
  3873  071A  1283               	bcf	3,5	;RP0=0, select bank2
  3874  071B  1703               	bsf	3,6	;RP1=1, select bank2
  3875  071C  0850               	movf	(_gesture_data_^(0+256)+64),w
  3876  071D  3E10               	addlw	(low (_gesture_data_| (0+256)))& (0+255)
  3877  071E  0084               	movwf	4
  3878  071F  1283               	bcf	3,5	;RP0=0, select bank0
  3879  0720  1303               	bcf	3,6	;RP1=0, select bank0
  3880  0721  084F               	movf	??_readGesture,w
  3881  0722  0080               	movwf	0
  3882                           
  3883                           ;APDS9960.c: 612: gesture_data_.d_data[gesture_data_.index] = fifo_data[i + 1];
  3884  0723  0857               	movf	readGesture@i,w
  3885  0724  3E01               	addlw	1
  3886  0725  3E90               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  3887  0726  0084               	movwf	4
  3888  0727  0800               	movf	0,w
  3889  0728  00CF               	movwf	??_readGesture
  3890  0729  1283               	bcf	3,5	;RP0=0, select bank2
  3891  072A  1703               	bsf	3,6	;RP1=1, select bank2
  3892  072B  0850               	movf	(_gesture_data_^(0+256)+64),w
  3893  072C  3E20               	addlw	(low ((_gesture_data_| (0+256)+16)))& (0+255)
  3894  072D  0084               	movwf	4
  3895  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3896  072F  1303               	bcf	3,6	;RP1=0, select bank0
  3897  0730  084F               	movf	??_readGesture,w
  3898  0731  0080               	movwf	0
  3899                           
  3900                           ;APDS9960.c: 614: gesture_data_.l_data[gesture_data_.index] = fifo_data[i + 2];
  3901  0732  0857               	movf	readGesture@i,w
  3902  0733  3E02               	addlw	2
  3903  0734  3E90               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  3904  0735  0084               	movwf	4
  3905  0736  0800               	movf	0,w
  3906  0737  00CF               	movwf	??_readGesture
  3907  0738  1283               	bcf	3,5	;RP0=0, select bank2
  3908  0739  1703               	bsf	3,6	;RP1=1, select bank2
  3909  073A  0850               	movf	(_gesture_data_^(0+256)+64),w
  3910  073B  3E30               	addlw	(low ((_gesture_data_| (0+256)+32)))& (0+255)
  3911  073C  0084               	movwf	4
  3912  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3913  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3914  073F  084F               	movf	??_readGesture,w
  3915  0740  0080               	movwf	0
  3916                           
  3917                           ;APDS9960.c: 616: gesture_data_.r_data[gesture_data_.index] = fifo_data[i + 3];
  3918  0741  0857               	movf	readGesture@i,w
  3919  0742  3E03               	addlw	3
  3920  0743  3E90               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  3921  0744  0084               	movwf	4
  3922  0745  0800               	movf	0,w
  3923  0746  00CF               	movwf	??_readGesture
  3924  0747  1283               	bcf	3,5	;RP0=0, select bank2
  3925  0748  1703               	bsf	3,6	;RP1=1, select bank2
  3926  0749  0850               	movf	(_gesture_data_^(0+256)+64),w
  3927  074A  3E40               	addlw	(low ((_gesture_data_| (0+256)+48)))& (0+255)
  3928  074B  0084               	movwf	4
  3929  074C  1283               	bcf	3,5	;RP0=0, select bank0
  3930  074D  1303               	bcf	3,6	;RP1=0, select bank0
  3931  074E  084F               	movf	??_readGesture,w
  3932  074F  0080               	movwf	0
  3933                           
  3934                           ;APDS9960.c: 618: gesture_data_.index++;
  3935  0750  3001               	movlw	1
  3936  0751  00CF               	movwf	??_readGesture
  3937  0752  084F               	movf	??_readGesture,w
  3938  0753  1283               	bcf	3,5	;RP0=0, select bank2
  3939  0754  1703               	bsf	3,6	;RP1=1, select bank2
  3940  0755  07D0               	addwf	(_gesture_data_^(0+256)+64),f
  3941                           
  3942                           ;APDS9960.c: 619: gesture_data_.total_gestures++;
  3943  0756  3001               	movlw	1
  3944  0757  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0758  1303               	bcf	3,6	;RP1=0, select bank0
  3946  0759  00CF               	movwf	??_readGesture
  3947  075A  084F               	movf	??_readGesture,w
  3948  075B  1283               	bcf	3,5	;RP0=0, select bank2
  3949  075C  1703               	bsf	3,6	;RP1=1, select bank2
  3950  075D  07D1               	addwf	(_gesture_data_^(0+256)+65),f
  3951  075E  3004               	movlw	4
  3952  075F  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0760  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0761  07D7               	addwf	readGesture@i,f
  3955  0762  1803               	skipnc
  3956  0763  0AD8               	incf	readGesture@i+1,f
  3957  0764  3000               	movlw	0
  3958  0765  07D8               	addwf	readGesture@i+1,f
  3959  0766  2F06               	goto	l4047
  3960  0767                     l4049:	
  3961                           
  3962                           ;APDS9960.c: 620: }
  3963                           ;APDS9960.c: 623: if( processGestureData() )
  3964  0767  120A  118A  2035  120A  118A  	fcall	_processGestureData
  3965  076C  3A00               	xorlw	0
  3966  076D  1903               	skipnz
  3967  076E  2F74               	goto	l4053
  3968                           
  3969                           ;APDS9960.c: 624: {
  3970                           ;APDS9960.c: 626: if( decodeGesture() ) {
  3971  076F  120A  118A  2362  120A  118A  	fcall	_decodeGesture
  3972  0774                     l4053:	
  3973                           
  3974                           ;APDS9960.c: 628: }
  3975                           ;APDS9960.c: 629: }
  3976                           ;APDS9960.c: 632: gesture_data_.index = 0;
  3977  0774  1283               	bcf	3,5	;RP0=0, select bank2
  3978  0775  1703               	bsf	3,6	;RP1=1, select bank2
  3979  0776  01D0               	clrf	(_gesture_data_^(0+256)+64)
  3980                           
  3981                           ;APDS9960.c: 633: gesture_data_.total_gestures = 0;
  3982  0777  01D1               	clrf	(_gesture_data_^(0+256)+65)
  3983  0778                     l4013:	
  3984                           ;APDS9960.c: 563: }
  3985                           ;APDS9960.c: 566: while(1) {
  3986                           
  3987                           ;APDS9960.c: 634: }
  3988                           ;APDS9960.c: 635: }
  3989                           ;APDS9960.c: 636: } else {
  3990                           
  3991                           
  3992                           ;APDS9960.c: 569: _delay((unsigned long)((30)*(20000000/4000.0)));
  3993  0778  30C3               	movlw	195
  3994  0779  1283               	bcf	3,5	;RP0=0, select bank0
  3995  077A  1303               	bcf	3,6	;RP1=0, select bank0
  3996  077B  00D0               	movwf	??_readGesture+1
  3997  077C  30CD               	movlw	205
  3998  077D  00CF               	movwf	??_readGesture
  3999  077E                     u5607:	
  4000  077E  0BCF               	decfsz	??_readGesture,f
  4001  077F  2F7E               	goto	u5607
  4002  0780  0BD0               	decfsz	??_readGesture+1,f
  4003  0781  2F7E               	goto	u5607
  4004                           
  4005                           ;APDS9960.c: 572: gstatus = wireReadDataByte(0xAF);
  4006  0782  30AF               	movlw	175
  4007  0783  120A  158A  22D4  120A  118A  	fcall	_wireReadDataByte
  4008  0788  1283               	bcf	3,5	;RP0=0, select bank0
  4009  0789  1303               	bcf	3,6	;RP1=0, select bank0
  4010  078A  00CF               	movwf	??_readGesture
  4011  078B  084F               	movf	??_readGesture,w
  4012  078C  00D3               	movwf	readGesture@gstatus
  4013                           
  4014                           ;APDS9960.c: 577: if( (gstatus & 0b00000001) == 0b00000001 )
  4015  078D  1853               	btfsc	readGesture@gstatus,0
  4016  078E  2EB9               	goto	l4019
  4017                           
  4018                           ;APDS9960.c: 639: _delay((unsigned long)((30)*(20000000/4000.0)));
  4019  078F  30C3               	movlw	195
  4020  0790  1303               	bcf	3,6	;RP1=0, select bank0
  4021  0791  00D0               	movwf	??_readGesture+1
  4022  0792  30CD               	movlw	205
  4023  0793  00CF               	movwf	??_readGesture
  4024  0794                     u5617:	
  4025  0794  0BCF               	decfsz	??_readGesture,f
  4026  0795  2F94               	goto	u5617
  4027  0796  0BD0               	decfsz	??_readGesture+1,f
  4028  0797  2F94               	goto	u5617
  4029                           
  4030                           ;APDS9960.c: 640: decodeGesture();
  4031  0798  120A  118A  2362  120A  118A  	fcall	_decodeGesture
  4032                           
  4033                           ;APDS9960.c: 641: motion = gesture_motion_;
  4034  079D  1283               	bcf	3,5	;RP0=0, select bank0
  4035  079E  1303               	bcf	3,6	;RP1=0, select bank0
  4036  079F  0863               	movf	_gesture_motion_+1,w
  4037  07A0  00D2               	movwf	readGesture@motion+1
  4038  07A1  0862               	movf	_gesture_motion_,w
  4039  07A2  00D1               	movwf	readGesture@motion
  4040                           
  4041                           ;APDS9960.c: 643: resetGestureParameters();
  4042  07A3  120A  158A  2085   	fcall	_resetGestureParameters
  4043                           
  4044                           ;APDS9960.c: 645: return motion;
  4045  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  4046  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  4047  07A8  0852               	movf	readGesture@motion+1,w
  4048  07A9  00CE               	movwf	?_readGesture+1
  4049  07AA  0851               	movf	readGesture@motion,w
  4050  07AB  00CD               	movwf	?_readGesture
  4051  07AC  0008               	return
  4052  07AD                     __end_of_readGesture:	
  4053                           
  4054                           	psect	text19
  4055  0D23                     __ptext19:	
  4056 ;; *************** function _wireReadDataBlock *****************
  4057 ;; Defined at:
  4058 ;;		line 841 in file "APDS9960.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  reg             1    wreg     unsigned char 
  4061 ;;  val             2    8[BANK0 ] PTR unsigned char 
  4062 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  4063 ;;  len             2   10[BANK0 ] unsigned int 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  reg             1   15[BANK0 ] unsigned char 
  4066 ;;  j               1   16[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  2    8[BANK0 ] int 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4076 ;;      Params:         0       4       0       0       0
  4077 ;;      Locals:         0       2       0       0       0
  4078 ;;      Temps:          0       3       0       0       0
  4079 ;;      Totals:         0       9       0       0       0
  4080 ;;Total ram usage:        9 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    2
  4083 ;; This function calls:
  4084 ;;		_I2C_ReStart
  4085 ;;		_I2C_Read_Byte
  4086 ;;		_I2C_Send_NACK
  4087 ;;		_I2C_Start
  4088 ;;		_I2C_Stop
  4089 ;;		_I2C_Write_Byte
  4090 ;; This function is called by:
  4091 ;;		_readGesture
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           
  4096                           ;psect for function _wireReadDataBlock
  4097  0D23                     _wireReadDataBlock:	
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _wireReadDataBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4101                           ;wireReadDataBlock@reg stored from wreg
  4102  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  4103  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  4104  0D25  00AF               	movwf	wireReadDataBlock@reg
  4105                           
  4106                           ;APDS9960.c: 843: unsigned char j = 0;
  4107  0D26  01B0               	clrf	wireReadDataBlock@j
  4108                           
  4109                           ;APDS9960.c: 845: I2C_Start();
  4110  0D27  160A  118A  2763  120A  158A  	fcall	_I2C_Start
  4111                           
  4112                           ;APDS9960.c: 846: I2C_Write_Byte((0x39 << 1 )| 0x00);
  4113  0D2C  3072               	movlw	114
  4114  0D2D  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  4115                           
  4116                           ;APDS9960.c: 848: I2C_Write_Byte(reg);
  4117  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0D34  082F               	movf	wireReadDataBlock@reg,w
  4120  0D35  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  4121                           
  4122                           ;APDS9960.c: 850: for(j= 0; j < len ; j++)
  4123  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  4124  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  4125  0D3C  01B0               	clrf	wireReadDataBlock@j
  4126  0D3D                     l3805:	
  4127  0D3D  0830               	movf	wireReadDataBlock@j,w
  4128  0D3E  00AC               	movwf	??_wireReadDataBlock
  4129  0D3F  01AD               	clrf	??_wireReadDataBlock+1
  4130  0D40  082B               	movf	wireReadDataBlock@len+1,w
  4131  0D41  022D               	subwf	??_wireReadDataBlock+1,w
  4132  0D42  1D03               	skipz
  4133  0D43  2D46               	goto	u4255
  4134  0D44  082A               	movf	wireReadDataBlock@len,w
  4135  0D45  022C               	subwf	??_wireReadDataBlock,w
  4136  0D46                     u4255:	
  4137  0D46  1803               	btfsc	3,0
  4138  0D47  2D75               	goto	l3807
  4139                           
  4140                           ;APDS9960.c: 851: {
  4141                           ;APDS9960.c: 853: I2C_ReStart();
  4142  0D48  160A  118A  275D  120A  158A  	fcall	_I2C_ReStart
  4143                           
  4144                           ;APDS9960.c: 854: I2C_Write_Byte((0x39 << 1) | 0x01);
  4145  0D4D  3073               	movlw	115
  4146  0D4E  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  4147                           
  4148                           ;APDS9960.c: 855: val[j]=I2C_Read_Byte();
  4149  0D53  120A  118A  27AD  120A  158A  	fcall	_I2C_Read_Byte
  4150  0D58  1283               	bcf	3,5	;RP0=0, select bank0
  4151  0D59  1303               	bcf	3,6	;RP1=0, select bank0
  4152  0D5A  00AC               	movwf	??_wireReadDataBlock
  4153  0D5B  0830               	movf	wireReadDataBlock@j,w
  4154  0D5C  0728               	addwf	wireReadDataBlock@val,w
  4155  0D5D  00AD               	movwf	??_wireReadDataBlock+1
  4156  0D5E  0829               	movf	wireReadDataBlock@val+1,w
  4157  0D5F  1803               	skipnc
  4158  0D60  3E01               	addlw	1
  4159  0D61  00AE               	movwf	??_wireReadDataBlock+2
  4160  0D62  082D               	movf	??_wireReadDataBlock+1,w
  4161  0D63  0084               	movwf	4
  4162  0D64  1383               	bcf	3,7
  4163  0D65  182E               	btfsc	??_wireReadDataBlock+2,0
  4164  0D66  1783               	bsf	3,7
  4165  0D67  082C               	movf	??_wireReadDataBlock,w
  4166  0D68  0080               	movwf	0
  4167                           
  4168                           ;APDS9960.c: 856: I2C_Send_NACK();
  4169  0D69  160A  118A  2775  120A  158A  	fcall	_I2C_Send_NACK
  4170  0D6E  3001               	movlw	1
  4171  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4172  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4173  0D71  00AC               	movwf	??_wireReadDataBlock
  4174  0D72  082C               	movf	??_wireReadDataBlock,w
  4175  0D73  07B0               	addwf	wireReadDataBlock@j,f
  4176  0D74  2D3D               	goto	l3805
  4177  0D75                     l3807:	
  4178                           
  4179                           ;APDS9960.c: 858: }
  4180                           ;APDS9960.c: 860: I2C_Stop();
  4181  0D75  160A  118A  2769   	fcall	_I2C_Stop
  4182                           
  4183                           ;APDS9960.c: 862: return (int)j;
  4184  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  4185  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  4186  0D7A  0830               	movf	wireReadDataBlock@j,w
  4187  0D7B  00AC               	movwf	??_wireReadDataBlock
  4188  0D7C  01AD               	clrf	??_wireReadDataBlock+1
  4189  0D7D  082C               	movf	??_wireReadDataBlock,w
  4190  0D7E  00A8               	movwf	?_wireReadDataBlock
  4191  0D7F  082D               	movf	??_wireReadDataBlock+1,w
  4192  0D80  00A9               	movwf	?_wireReadDataBlock+1
  4193  0D81  0008               	return
  4194  0D82                     __end_of_wireReadDataBlock:	
  4195                           
  4196                           	psect	text20
  4197  0035                     __ptext20:	
  4198 ;; *************** function _processGestureData *****************
  4199 ;; Defined at:
  4200 ;;		line 651 in file "APDS9960.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  i               2   43[BANK0 ] int 
  4205 ;;  lr_delta        2   41[BANK0 ] int 
  4206 ;;  ud_delta        2   39[BANK0 ] int 
  4207 ;;  lr_ratio_las    2   21[BANK0 ] int 
  4208 ;;  ud_ratio_las    2   19[BANK0 ] int 
  4209 ;;  lr_ratio_fir    2   17[BANK0 ] int 
  4210 ;;  ud_ratio_fir    2   15[BANK0 ] int 
  4211 ;;  r_first         1   38[BANK0 ] unsigned char 
  4212 ;;  l_first         1   37[BANK0 ] unsigned char 
  4213 ;;  d_first         1   36[BANK0 ] unsigned char 
  4214 ;;  u_first         1   35[BANK0 ] unsigned char 
  4215 ;;  r_last          1   34[BANK0 ] unsigned char 
  4216 ;;  l_last          1   33[BANK0 ] unsigned char 
  4217 ;;  d_last          1   32[BANK0 ] unsigned char 
  4218 ;;  u_last          1   31[BANK0 ] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      unsigned char 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4228 ;;      Params:         0       0       0       0       0
  4229 ;;      Locals:         0      30       0       0       0
  4230 ;;      Temps:          0       2       0       0       0
  4231 ;;      Totals:         0      32       0       0       0
  4232 ;;Total ram usage:       32 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    2
  4235 ;; This function calls:
  4236 ;;		___awdiv
  4237 ;;		___wmul
  4238 ;; This function is called by:
  4239 ;;		_readGesture
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           
  4244                           ;psect for function _processGestureData
  4245  0035                     _processGestureData:	
  4246                           
  4247                           ;APDS9960.c: 653: uint8_t u_first = 0;
  4248                           
  4249                           ;incstack = 0
  4250                           ; Regs used in _processGestureData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4251  0035  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0036  1303               	bcf	3,6	;RP1=0, select bank0
  4253  0037  01C3               	clrf	processGestureData@u_first
  4254                           
  4255                           ;APDS9960.c: 654: uint8_t d_first = 0;
  4256  0038  01C4               	clrf	processGestureData@d_first
  4257                           
  4258                           ;APDS9960.c: 655: uint8_t l_first = 0;
  4259  0039  01C5               	clrf	processGestureData@l_first
  4260                           
  4261                           ;APDS9960.c: 656: uint8_t r_first = 0;
  4262  003A  01C6               	clrf	processGestureData@r_first
  4263                           
  4264                           ;APDS9960.c: 657: uint8_t u_last = 0;
  4265  003B  01BF               	clrf	processGestureData@u_last
  4266                           
  4267                           ;APDS9960.c: 658: uint8_t d_last = 0;
  4268  003C  01C0               	clrf	processGestureData@d_last
  4269                           
  4270                           ;APDS9960.c: 659: uint8_t l_last = 0;
  4271  003D  01C1               	clrf	processGestureData@l_last
  4272                           
  4273                           ;APDS9960.c: 660: uint8_t r_last = 0;
  4274  003E  01C2               	clrf	processGestureData@r_last
  4275                           
  4276                           ;APDS9960.c: 661: int ud_ratio_first;
  4277                           ;APDS9960.c: 662: int lr_ratio_first;
  4278                           ;APDS9960.c: 663: int ud_ratio_last;
  4279                           ;APDS9960.c: 664: int lr_ratio_last;
  4280                           ;APDS9960.c: 665: int ud_delta;
  4281                           ;APDS9960.c: 666: int lr_delta;
  4282                           ;APDS9960.c: 667: int i;
  4283                           ;APDS9960.c: 670: if( gesture_data_.total_gestures <= 4 ) {
  4284  003F  3005               	movlw	5
  4285  0040  1283               	bcf	3,5	;RP0=0, select bank2
  4286  0041  1703               	bsf	3,6	;RP1=1, select bank2
  4287  0042  0251               	subwf	(_gesture_data_^(0+256)+65),w
  4288  0043  1803               	skipnc
  4289  0044  2847               	goto	l3821
  4290                           
  4291                           ;APDS9960.c: 671: return 0;
  4292  0045  3000               	movlw	0
  4293  0046  0008               	return
  4294  0047                     l3821:	
  4295                           
  4296                           ;APDS9960.c: 672: }
  4297                           ;APDS9960.c: 675: if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_gestu
      +                          res > 0) ) {
  4298  0047  3021               	movlw	33
  4299  0048  0251               	subwf	(_gesture_data_^(0+256)+65),w
  4300  0049  1803               	skipnc
  4301  004A  2901               	goto	l3871
  4302  004B  0851               	movf	(_gesture_data_^(0+256)+65),w
  4303  004C  1903               	btfsc	3,2
  4304  004D  2901               	goto	l3871
  4305                           
  4306                           ;APDS9960.c: 679: for( i = 0; i < gesture_data_.total_gestures; i++ ) {
  4307  004E  1283               	bcf	3,5	;RP0=0, select bank0
  4308  004F  1303               	bcf	3,6	;RP1=0, select bank0
  4309  0050  01CB               	clrf	processGestureData@i
  4310  0051  01CC               	clrf	processGestureData@i+1
  4311  0052  2859               	goto	l355
  4312  0053                     l3837:	
  4313                           ;APDS9960.c: 689: break;
  4314                           
  4315  0053  3001               	movlw	1
  4316  0054  07CB               	addwf	processGestureData@i,f
  4317  0055  1803               	skipnc
  4318  0056  0ACC               	incf	processGestureData@i+1,f
  4319  0057  3000               	movlw	0
  4320  0058  07CC               	addwf	processGestureData@i+1,f
  4321  0059                     l355:	
  4322  0059  084C               	movf	processGestureData@i+1,w
  4323  005A  3A80               	xorlw	128
  4324  005B  00AD               	movwf	??_processGestureData
  4325  005C  3080               	movlw	128
  4326  005D  022D               	subwf	??_processGestureData,w
  4327  005E  1D03               	skipz
  4328  005F  2866               	goto	u4335
  4329  0060  1283               	bcf	3,5	;RP0=0, select bank2
  4330  0061  1703               	bsf	3,6	;RP1=1, select bank2
  4331  0062  0851               	movf	(_gesture_data_^(0+256)+65),w
  4332  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0064  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0065  024B               	subwf	processGestureData@i,w
  4335  0066                     u4335:	
  4336  0066  1803               	btfsc	3,0
  4337  0067  28A3               	goto	l3839
  4338                           
  4339                           ;APDS9960.c: 680: if( (gesture_data_.u_data[i] > 10) &&
  4340                           ;APDS9960.c: 681: (gesture_data_.d_data[i] > 10) &&
  4341                           ;APDS9960.c: 682: (gesture_data_.l_data[i] > 10) &&
  4342                           ;APDS9960.c: 683: (gesture_data_.r_data[i] > 10) ) {
  4343  0068  1283               	bcf	3,5	;RP0=0, select bank0
  4344  0069  1303               	bcf	3,6	;RP1=0, select bank0
  4345  006A  084B               	movf	processGestureData@i,w
  4346  006B  3E10               	addlw	(low (_gesture_data_| (0+256)))& (0+255)
  4347  006C  0084               	movwf	4
  4348  006D  300B               	movlw	11
  4349  006E  1783               	bsf	3,7	;select IRP bank2
  4350  006F  0200               	subwf	0,w
  4351  0070  1C03               	skipc
  4352  0071  2853               	goto	l3837
  4353  0072  084B               	movf	processGestureData@i,w
  4354  0073  3E20               	addlw	(low ((_gesture_data_| (0+256)+16)))& (0+255)
  4355  0074  0084               	movwf	4
  4356  0075  300B               	movlw	11
  4357  0076  0200               	subwf	0,w
  4358  0077  1C03               	skipc
  4359  0078  2853               	goto	l3837
  4360  0079  084B               	movf	processGestureData@i,w
  4361  007A  3E30               	addlw	(low ((_gesture_data_| (0+256)+32)))& (0+255)
  4362  007B  0084               	movwf	4
  4363  007C  300B               	movlw	11
  4364  007D  0200               	subwf	0,w
  4365  007E  1C03               	skipc
  4366  007F  2853               	goto	l3837
  4367  0080  084B               	movf	processGestureData@i,w
  4368  0081  3E40               	addlw	(low ((_gesture_data_| (0+256)+48)))& (0+255)
  4369  0082  0084               	movwf	4
  4370  0083  300B               	movlw	11
  4371  0084  0200               	subwf	0,w
  4372  0085  1C03               	skipc
  4373  0086  2853               	goto	l3837
  4374                           
  4375                           ;APDS9960.c: 685: u_first = gesture_data_.u_data[i];
  4376  0087  084B               	movf	processGestureData@i,w
  4377  0088  3E10               	addlw	(low (_gesture_data_| (0+256)))& (0+255)
  4378  0089  0084               	movwf	4
  4379  008A  0800               	movf	0,w
  4380  008B  00AD               	movwf	??_processGestureData
  4381  008C  082D               	movf	??_processGestureData,w
  4382  008D  00C3               	movwf	processGestureData@u_first
  4383                           
  4384                           ;APDS9960.c: 686: d_first = gesture_data_.d_data[i];
  4385  008E  084B               	movf	processGestureData@i,w
  4386  008F  3E20               	addlw	(low ((_gesture_data_| (0+256)+16)))& (0+255)
  4387  0090  0084               	movwf	4
  4388  0091  0800               	movf	0,w
  4389  0092  00AD               	movwf	??_processGestureData
  4390  0093  082D               	movf	??_processGestureData,w
  4391  0094  00C4               	movwf	processGestureData@d_first
  4392                           
  4393                           ;APDS9960.c: 687: l_first = gesture_data_.l_data[i];
  4394  0095  084B               	movf	processGestureData@i,w
  4395  0096  3E30               	addlw	(low ((_gesture_data_| (0+256)+32)))& (0+255)
  4396  0097  0084               	movwf	4
  4397  0098  0800               	movf	0,w
  4398  0099  00AD               	movwf	??_processGestureData
  4399  009A  082D               	movf	??_processGestureData,w
  4400  009B  00C5               	movwf	processGestureData@l_first
  4401                           
  4402                           ;APDS9960.c: 688: r_first = gesture_data_.r_data[i];
  4403  009C  084B               	movf	processGestureData@i,w
  4404  009D  3E40               	addlw	(low ((_gesture_data_| (0+256)+48)))& (0+255)
  4405  009E  0084               	movwf	4
  4406  009F  0800               	movf	0,w
  4407  00A0  00AD               	movwf	??_processGestureData
  4408  00A1  082D               	movf	??_processGestureData,w
  4409  00A2  00C6               	movwf	processGestureData@r_first
  4410  00A3                     l3839:	
  4411                           
  4412                           ;APDS9960.c: 690: }
  4413                           ;APDS9960.c: 691: }
  4414                           ;APDS9960.c: 694: if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_first == 
      +                          0) ) {
  4415  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  4416  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  4417  00A5  0843               	movf	processGestureData@u_first,w
  4418  00A6  1903               	btfsc	3,2
  4419  00A7  28B0               	goto	l3847
  4420  00A8  0844               	movf	processGestureData@d_first,w
  4421  00A9  1903               	btfsc	3,2
  4422  00AA  28B0               	goto	l3847
  4423  00AB  0845               	movf	processGestureData@l_first,w
  4424  00AC  1D03               	btfss	3,2
  4425  00AD  0846               	movf	processGestureData@r_first,w
  4426  00AE  1D03               	btfss	3,2
  4427  00AF  28B2               	goto	l3851
  4428  00B0                     l3847:	
  4429                           
  4430                           ;APDS9960.c: 697: return 0;
  4431  00B0  3000               	movlw	0
  4432  00B1  0008               	return
  4433  00B2                     l3851:	
  4434                           
  4435                           ;APDS9960.c: 698: }
  4436                           ;APDS9960.c: 700: for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  4437  00B2  1283               	bcf	3,5	;RP0=0, select bank2
  4438  00B3  1703               	bsf	3,6	;RP1=1, select bank2
  4439  00B4  0851               	movf	(_gesture_data_^(0+256)+65),w
  4440  00B5  3EFF               	addlw	255
  4441  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  4442  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  4443  00B8  00CB               	movwf	processGestureData@i
  4444  00B9  30FF               	movlw	255
  4445  00BA  1803               	skipnc
  4446  00BB  3000               	movlw	0
  4447  00BC  00CC               	movwf	processGestureData@i+1
  4448  00BD  1BCC               	btfsc	processGestureData@i+1,7
  4449  00BE  2901               	goto	l3871
  4450  00BF                     l3857:	
  4451                           
  4452                           ;APDS9960.c: 702: if( (gesture_data_.u_data[i] > 10) &&
  4453                           ;APDS9960.c: 703: (gesture_data_.d_data[i] > 10) &&
  4454                           ;APDS9960.c: 704: (gesture_data_.l_data[i] > 10) &&
  4455                           ;APDS9960.c: 705: (gesture_data_.r_data[i] > 10) ) {
  4456  00BF  084B               	movf	processGestureData@i,w
  4457  00C0  3E10               	addlw	(low (_gesture_data_| (0+256)))& (0+255)
  4458  00C1  0084               	movwf	4
  4459  00C2  300B               	movlw	11
  4460  00C3  1783               	bsf	3,7	;select IRP bank2
  4461  00C4  0200               	subwf	0,w
  4462  00C5  1C03               	skipc
  4463  00C6  28F9               	goto	l3867
  4464  00C7  084B               	movf	processGestureData@i,w
  4465  00C8  3E20               	addlw	(low ((_gesture_data_| (0+256)+16)))& (0+255)
  4466  00C9  0084               	movwf	4
  4467  00CA  300B               	movlw	11
  4468  00CB  0200               	subwf	0,w
  4469  00CC  1C03               	skipc
  4470  00CD  28F9               	goto	l3867
  4471  00CE  084B               	movf	processGestureData@i,w
  4472  00CF  3E30               	addlw	(low ((_gesture_data_| (0+256)+32)))& (0+255)
  4473  00D0  0084               	movwf	4
  4474  00D1  300B               	movlw	11
  4475  00D2  0200               	subwf	0,w
  4476  00D3  1C03               	skipc
  4477  00D4  28F9               	goto	l3867
  4478  00D5  084B               	movf	processGestureData@i,w
  4479  00D6  3E40               	addlw	(low ((_gesture_data_| (0+256)+48)))& (0+255)
  4480  00D7  0084               	movwf	4
  4481  00D8  300B               	movlw	11
  4482  00D9  0200               	subwf	0,w
  4483  00DA  1C03               	skipc
  4484  00DB  28F9               	goto	l3867
  4485                           
  4486                           ;APDS9960.c: 707: u_last = gesture_data_.u_data[i];
  4487  00DC  084B               	movf	processGestureData@i,w
  4488  00DD  3E10               	addlw	(low (_gesture_data_| (0+256)))& (0+255)
  4489  00DE  0084               	movwf	4
  4490  00DF  0800               	movf	0,w
  4491  00E0  00AD               	movwf	??_processGestureData
  4492  00E1  082D               	movf	??_processGestureData,w
  4493  00E2  00BF               	movwf	processGestureData@u_last
  4494                           
  4495                           ;APDS9960.c: 708: d_last = gesture_data_.d_data[i];
  4496  00E3  084B               	movf	processGestureData@i,w
  4497  00E4  3E20               	addlw	(low ((_gesture_data_| (0+256)+16)))& (0+255)
  4498  00E5  0084               	movwf	4
  4499  00E6  0800               	movf	0,w
  4500  00E7  00AD               	movwf	??_processGestureData
  4501  00E8  082D               	movf	??_processGestureData,w
  4502  00E9  00C0               	movwf	processGestureData@d_last
  4503                           
  4504                           ;APDS9960.c: 709: l_last = gesture_data_.l_data[i];
  4505  00EA  084B               	movf	processGestureData@i,w
  4506  00EB  3E30               	addlw	(low ((_gesture_data_| (0+256)+32)))& (0+255)
  4507  00EC  0084               	movwf	4
  4508  00ED  0800               	movf	0,w
  4509  00EE  00AD               	movwf	??_processGestureData
  4510  00EF  082D               	movf	??_processGestureData,w
  4511  00F0  00C1               	movwf	processGestureData@l_last
  4512                           
  4513                           ;APDS9960.c: 710: r_last = gesture_data_.r_data[i];
  4514  00F1  084B               	movf	processGestureData@i,w
  4515  00F2  3E40               	addlw	(low ((_gesture_data_| (0+256)+48)))& (0+255)
  4516  00F3  0084               	movwf	4
  4517  00F4  0800               	movf	0,w
  4518  00F5  00AD               	movwf	??_processGestureData
  4519  00F6  082D               	movf	??_processGestureData,w
  4520  00F7  00C2               	movwf	processGestureData@r_last
  4521                           
  4522                           ;APDS9960.c: 711: break;
  4523  00F8  2901               	goto	l3871
  4524  00F9                     l3867:	
  4525  00F9  30FF               	movlw	255
  4526  00FA  07CB               	addwf	processGestureData@i,f
  4527  00FB  1803               	skipnc
  4528  00FC  0ACC               	incf	processGestureData@i+1,f
  4529  00FD  30FF               	movlw	255
  4530  00FE  07CC               	addwf	processGestureData@i+1,f
  4531  00FF  1FCC               	btfss	processGestureData@i+1,7
  4532  0100  28BF               	goto	l3857
  4533  0101                     l3871:	
  4534                           
  4535                           ;APDS9960.c: 712: }
  4536                           ;APDS9960.c: 713: }
  4537                           ;APDS9960.c: 714: }
  4538                           ;APDS9960.c: 717: ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first);
  4539  0101  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0102  0843               	movf	processGestureData@u_first,w
  4541  0103  0744               	addwf	processGestureData@d_first,w
  4542  0104  00A4               	movwf	___awdiv@divisor
  4543  0105  01A5               	clrf	___awdiv@divisor+1
  4544  0106  0DA5               	rlf	___awdiv@divisor+1,f
  4545  0107  0844               	movf	processGestureData@d_first,w
  4546  0108  00AD               	movwf	??_processGestureData
  4547  0109  01AE               	clrf	??_processGestureData+1
  4548  010A  09AD               	comf	??_processGestureData,f
  4549  010B  09AE               	comf	??_processGestureData+1,f
  4550  010C  0AAD               	incf	??_processGestureData,f
  4551  010D  1903               	skipnz
  4552  010E  0AAE               	incf	??_processGestureData+1,f
  4553  010F  0843               	movf	processGestureData@u_first,w
  4554  0110  072D               	addwf	??_processGestureData,w
  4555  0111  00A0               	movwf	___wmul@multiplier
  4556  0112  082E               	movf	??_processGestureData+1,w
  4557  0113  1803               	skipnc
  4558  0114  0A2E               	incf	??_processGestureData+1,w
  4559  0115  00A1               	movwf	___wmul@multiplier+1
  4560  0116  3064               	movlw	100
  4561  0117  00A2               	movwf	___wmul@multiplicand
  4562  0118  3000               	movlw	0
  4563  0119  00A3               	movwf	___wmul@multiplicand+1
  4564  011A  120A  158A  211A  120A  118A  	fcall	___wmul
  4565  011F  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0120  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0121  0821               	movf	?___wmul+1,w
  4568  0122  00A7               	movwf	___awdiv@dividend+1
  4569  0123  0820               	movf	?___wmul,w
  4570  0124  00A6               	movwf	___awdiv@dividend
  4571  0125  120A  158A  246C  120A  118A  	fcall	___awdiv
  4572  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4573  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4574  012C  0825               	movf	?___awdiv+1,w
  4575  012D  00B0               	movwf	processGestureData@ud_ratio_first+1
  4576  012E  0824               	movf	?___awdiv,w
  4577  012F  00AF               	movwf	processGestureData@ud_ratio_first
  4578                           
  4579                           ;APDS9960.c: 718: lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);
  4580  0130  0845               	movf	processGestureData@l_first,w
  4581  0131  0746               	addwf	processGestureData@r_first,w
  4582  0132  00A4               	movwf	___awdiv@divisor
  4583  0133  01A5               	clrf	___awdiv@divisor+1
  4584  0134  0DA5               	rlf	___awdiv@divisor+1,f
  4585  0135  0846               	movf	processGestureData@r_first,w
  4586  0136  00AD               	movwf	??_processGestureData
  4587  0137  01AE               	clrf	??_processGestureData+1
  4588  0138  09AD               	comf	??_processGestureData,f
  4589  0139  09AE               	comf	??_processGestureData+1,f
  4590  013A  0AAD               	incf	??_processGestureData,f
  4591  013B  1903               	skipnz
  4592  013C  0AAE               	incf	??_processGestureData+1,f
  4593  013D  0845               	movf	processGestureData@l_first,w
  4594  013E  072D               	addwf	??_processGestureData,w
  4595  013F  00A0               	movwf	___wmul@multiplier
  4596  0140  082E               	movf	??_processGestureData+1,w
  4597  0141  1803               	skipnc
  4598  0142  0A2E               	incf	??_processGestureData+1,w
  4599  0143  00A1               	movwf	___wmul@multiplier+1
  4600  0144  3064               	movlw	100
  4601  0145  00A2               	movwf	___wmul@multiplicand
  4602  0146  3000               	movlw	0
  4603  0147  00A3               	movwf	___wmul@multiplicand+1
  4604  0148  120A  158A  211A  120A  118A  	fcall	___wmul
  4605  014D  1283               	bcf	3,5	;RP0=0, select bank0
  4606  014E  1303               	bcf	3,6	;RP1=0, select bank0
  4607  014F  0821               	movf	?___wmul+1,w
  4608  0150  00A7               	movwf	___awdiv@dividend+1
  4609  0151  0820               	movf	?___wmul,w
  4610  0152  00A6               	movwf	___awdiv@dividend
  4611  0153  120A  158A  246C  120A  118A  	fcall	___awdiv
  4612  0158  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0159  1303               	bcf	3,6	;RP1=0, select bank0
  4614  015A  0825               	movf	?___awdiv+1,w
  4615  015B  00B2               	movwf	processGestureData@lr_ratio_first+1
  4616  015C  0824               	movf	?___awdiv,w
  4617  015D  00B1               	movwf	processGestureData@lr_ratio_first
  4618                           
  4619                           ;APDS9960.c: 719: ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  4620  015E  083F               	movf	processGestureData@u_last,w
  4621  015F  0740               	addwf	processGestureData@d_last,w
  4622  0160  00A4               	movwf	___awdiv@divisor
  4623  0161  01A5               	clrf	___awdiv@divisor+1
  4624  0162  0DA5               	rlf	___awdiv@divisor+1,f
  4625  0163  0840               	movf	processGestureData@d_last,w
  4626  0164  00AD               	movwf	??_processGestureData
  4627  0165  01AE               	clrf	??_processGestureData+1
  4628  0166  09AD               	comf	??_processGestureData,f
  4629  0167  09AE               	comf	??_processGestureData+1,f
  4630  0168  0AAD               	incf	??_processGestureData,f
  4631  0169  1903               	skipnz
  4632  016A  0AAE               	incf	??_processGestureData+1,f
  4633  016B  083F               	movf	processGestureData@u_last,w
  4634  016C  072D               	addwf	??_processGestureData,w
  4635  016D  00A0               	movwf	___wmul@multiplier
  4636  016E  082E               	movf	??_processGestureData+1,w
  4637  016F  1803               	skipnc
  4638  0170  0A2E               	incf	??_processGestureData+1,w
  4639  0171  00A1               	movwf	___wmul@multiplier+1
  4640  0172  3064               	movlw	100
  4641  0173  00A2               	movwf	___wmul@multiplicand
  4642  0174  3000               	movlw	0
  4643  0175  00A3               	movwf	___wmul@multiplicand+1
  4644  0176  120A  158A  211A  120A  118A  	fcall	___wmul
  4645  017B  1283               	bcf	3,5	;RP0=0, select bank0
  4646  017C  1303               	bcf	3,6	;RP1=0, select bank0
  4647  017D  0821               	movf	?___wmul+1,w
  4648  017E  00A7               	movwf	___awdiv@dividend+1
  4649  017F  0820               	movf	?___wmul,w
  4650  0180  00A6               	movwf	___awdiv@dividend
  4651  0181  120A  158A  246C  120A  118A  	fcall	___awdiv
  4652  0186  1283               	bcf	3,5	;RP0=0, select bank0
  4653  0187  1303               	bcf	3,6	;RP1=0, select bank0
  4654  0188  0825               	movf	?___awdiv+1,w
  4655  0189  00B4               	movwf	processGestureData@ud_ratio_last+1
  4656  018A  0824               	movf	?___awdiv,w
  4657  018B  00B3               	movwf	processGestureData@ud_ratio_last
  4658                           
  4659                           ;APDS9960.c: 720: lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  4660  018C  0841               	movf	processGestureData@l_last,w
  4661  018D  0742               	addwf	processGestureData@r_last,w
  4662  018E  00A4               	movwf	___awdiv@divisor
  4663  018F  01A5               	clrf	___awdiv@divisor+1
  4664  0190  0DA5               	rlf	___awdiv@divisor+1,f
  4665  0191  0842               	movf	processGestureData@r_last,w
  4666  0192  00AD               	movwf	??_processGestureData
  4667  0193  01AE               	clrf	??_processGestureData+1
  4668  0194  09AD               	comf	??_processGestureData,f
  4669  0195  09AE               	comf	??_processGestureData+1,f
  4670  0196  0AAD               	incf	??_processGestureData,f
  4671  0197  1903               	skipnz
  4672  0198  0AAE               	incf	??_processGestureData+1,f
  4673  0199  0841               	movf	processGestureData@l_last,w
  4674  019A  072D               	addwf	??_processGestureData,w
  4675  019B  00A0               	movwf	___wmul@multiplier
  4676  019C  082E               	movf	??_processGestureData+1,w
  4677  019D  1803               	skipnc
  4678  019E  0A2E               	incf	??_processGestureData+1,w
  4679  019F  00A1               	movwf	___wmul@multiplier+1
  4680  01A0  3064               	movlw	100
  4681  01A1  00A2               	movwf	___wmul@multiplicand
  4682  01A2  3000               	movlw	0
  4683  01A3  00A3               	movwf	___wmul@multiplicand+1
  4684  01A4  120A  158A  211A  120A  118A  	fcall	___wmul
  4685  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  4686  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  4687  01AB  0821               	movf	?___wmul+1,w
  4688  01AC  00A7               	movwf	___awdiv@dividend+1
  4689  01AD  0820               	movf	?___wmul,w
  4690  01AE  00A6               	movwf	___awdiv@dividend
  4691  01AF  120A  158A  246C  120A  118A  	fcall	___awdiv
  4692  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  4693  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  4694  01B6  0825               	movf	?___awdiv+1,w
  4695  01B7  00B6               	movwf	processGestureData@lr_ratio_last+1
  4696  01B8  0824               	movf	?___awdiv,w
  4697  01B9  00B5               	movwf	processGestureData@lr_ratio_last
  4698                           
  4699                           ;APDS9960.c: 723: ud_delta = ud_ratio_last - ud_ratio_first;
  4700  01BA  092F               	comf	processGestureData@ud_ratio_first,w
  4701  01BB  00AD               	movwf	??_processGestureData
  4702  01BC  0930               	comf	processGestureData@ud_ratio_first+1,w
  4703  01BD  00AE               	movwf	??_processGestureData+1
  4704  01BE  0AAD               	incf	??_processGestureData,f
  4705  01BF  1903               	skipnz
  4706  01C0  0AAE               	incf	??_processGestureData+1,f
  4707  01C1  0833               	movf	processGestureData@ud_ratio_last,w
  4708  01C2  072D               	addwf	??_processGestureData,w
  4709  01C3  00C7               	movwf	processGestureData@ud_delta
  4710  01C4  0834               	movf	processGestureData@ud_ratio_last+1,w
  4711  01C5  1803               	skipnc
  4712  01C6  0A34               	incf	processGestureData@ud_ratio_last+1,w
  4713  01C7  072E               	addwf	??_processGestureData+1,w
  4714  01C8  00C8               	movwf	processGestureData@ud_delta+1
  4715                           
  4716                           ;APDS9960.c: 724: lr_delta = lr_ratio_last - lr_ratio_first;
  4717  01C9  0931               	comf	processGestureData@lr_ratio_first,w
  4718  01CA  00AD               	movwf	??_processGestureData
  4719  01CB  0932               	comf	processGestureData@lr_ratio_first+1,w
  4720  01CC  00AE               	movwf	??_processGestureData+1
  4721  01CD  0AAD               	incf	??_processGestureData,f
  4722  01CE  1903               	skipnz
  4723  01CF  0AAE               	incf	??_processGestureData+1,f
  4724  01D0  0835               	movf	processGestureData@lr_ratio_last,w
  4725  01D1  072D               	addwf	??_processGestureData,w
  4726  01D2  00C9               	movwf	processGestureData@lr_delta
  4727  01D3  0836               	movf	processGestureData@lr_ratio_last+1,w
  4728  01D4  1803               	skipnc
  4729  01D5  0A36               	incf	processGestureData@lr_ratio_last+1,w
  4730  01D6  072E               	addwf	??_processGestureData+1,w
  4731  01D7  00CA               	movwf	processGestureData@lr_delta+1
  4732                           
  4733                           ;APDS9960.c: 727: gesture_ud_delta_ += ud_delta;
  4734  01D8  0847               	movf	processGestureData@ud_delta,w
  4735  01D9  07EA               	addwf	_gesture_ud_delta_,f
  4736  01DA  1803               	skipnc
  4737  01DB  0AEB               	incf	_gesture_ud_delta_+1,f
  4738  01DC  0848               	movf	processGestureData@ud_delta+1,w
  4739  01DD  07EB               	addwf	_gesture_ud_delta_+1,f
  4740                           
  4741                           ;APDS9960.c: 728: gesture_lr_delta_ += lr_delta;
  4742  01DE  0849               	movf	processGestureData@lr_delta,w
  4743  01DF  07E0               	addwf	_gesture_lr_delta_,f
  4744  01E0  1803               	skipnc
  4745  01E1  0AE1               	incf	_gesture_lr_delta_+1,f
  4746  01E2  084A               	movf	processGestureData@lr_delta+1,w
  4747  01E3  07E1               	addwf	_gesture_lr_delta_+1,f
  4748                           
  4749                           ;APDS9960.c: 731: if( gesture_ud_delta_ >= 50 ) {
  4750  01E4  086B               	movf	_gesture_ud_delta_+1,w
  4751  01E5  3A80               	xorlw	128
  4752  01E6  00FF               	movwf	127
  4753  01E7  3080               	movlw	128
  4754  01E8  027F               	subwf	127,w
  4755  01E9  1D03               	skipz
  4756  01EA  29ED               	goto	u4445
  4757  01EB  3032               	movlw	50
  4758  01EC  026A               	subwf	_gesture_ud_delta_,w
  4759  01ED                     u4445:	
  4760  01ED  1C03               	skipc
  4761  01EE  29F5               	goto	l3885
  4762                           
  4763                           ;APDS9960.c: 732: gesture_ud_count_ = 1;
  4764  01EF  3001               	movlw	1
  4765  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  4766  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  4767  01F2  00E8               	movwf	_gesture_ud_count_
  4768  01F3  3000               	movlw	0
  4769  01F4  2A07               	goto	L3
  4770  01F5                     l3885:	
  4771                           ;APDS9960.c: 733: } else if( gesture_ud_delta_ <= -50 ) {
  4772                           
  4773  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  4774  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  4775  01F7  086B               	movf	_gesture_ud_delta_+1,w
  4776  01F8  3A80               	xorlw	128
  4777  01F9  00FF               	movwf	127
  4778  01FA  307F               	movlw	127
  4779  01FB  027F               	subwf	127,w
  4780  01FC  1D03               	skipz
  4781  01FD  2A00               	goto	u4455
  4782  01FE  30CF               	movlw	207
  4783  01FF  026A               	subwf	_gesture_ud_delta_,w
  4784  0200                     u4455:	
  4785  0200  1803               	skipnc
  4786  0201  2A09               	goto	l3889
  4787                           
  4788                           ;APDS9960.c: 734: gesture_ud_count_ = -1;
  4789  0202  30FF               	movlw	255
  4790  0203  1283               	bcf	3,5	;RP0=0, select bank0
  4791  0204  1303               	bcf	3,6	;RP1=0, select bank0
  4792  0205  00E8               	movwf	_gesture_ud_count_
  4793  0206  30FF               	movlw	255
  4794  0207                     L3:	
  4795  0207  00E9               	movwf	_gesture_ud_count_+1
  4796                           
  4797                           ;APDS9960.c: 735: } else {
  4798  0208  2A0D               	goto	l3891
  4799  0209                     l3889:	
  4800                           
  4801                           ;APDS9960.c: 736: gesture_ud_count_ = 0;
  4802  0209  1283               	bcf	3,5	;RP0=0, select bank0
  4803  020A  1303               	bcf	3,6	;RP1=0, select bank0
  4804  020B  01E8               	clrf	_gesture_ud_count_
  4805  020C  01E9               	clrf	_gesture_ud_count_+1
  4806  020D                     l3891:	
  4807                           
  4808                           ;APDS9960.c: 737: }
  4809                           ;APDS9960.c: 740: if( gesture_lr_delta_ >= 50 ) {
  4810  020D  0861               	movf	_gesture_lr_delta_+1,w
  4811  020E  3A80               	xorlw	128
  4812  020F  00FF               	movwf	127
  4813  0210  3080               	movlw	128
  4814  0211  027F               	subwf	127,w
  4815  0212  1D03               	skipz
  4816  0213  2A16               	goto	u4465
  4817  0214  3032               	movlw	50
  4818  0215  0260               	subwf	_gesture_lr_delta_,w
  4819  0216                     u4465:	
  4820  0216  1C03               	skipc
  4821  0217  2A1E               	goto	l3895
  4822                           
  4823                           ;APDS9960.c: 741: gesture_lr_count_ = 1;
  4824  0218  3001               	movlw	1
  4825  0219  1283               	bcf	3,5	;RP0=0, select bank0
  4826  021A  1303               	bcf	3,6	;RP1=0, select bank0
  4827  021B  00DE               	movwf	_gesture_lr_count_
  4828  021C  3000               	movlw	0
  4829  021D  2A30               	goto	L4
  4830  021E                     l3895:	
  4831                           ;APDS9960.c: 742: } else if( gesture_lr_delta_ <= -50 ) {
  4832                           
  4833  021E  1283               	bcf	3,5	;RP0=0, select bank0
  4834  021F  1303               	bcf	3,6	;RP1=0, select bank0
  4835  0220  0861               	movf	_gesture_lr_delta_+1,w
  4836  0221  3A80               	xorlw	128
  4837  0222  00FF               	movwf	127
  4838  0223  307F               	movlw	127
  4839  0224  027F               	subwf	127,w
  4840  0225  1D03               	skipz
  4841  0226  2A29               	goto	u4475
  4842  0227  30CF               	movlw	207
  4843  0228  0260               	subwf	_gesture_lr_delta_,w
  4844  0229                     u4475:	
  4845  0229  1803               	skipnc
  4846  022A  2A32               	goto	l3899
  4847                           
  4848                           ;APDS9960.c: 743: gesture_lr_count_ = -1;
  4849  022B  30FF               	movlw	255
  4850  022C  1283               	bcf	3,5	;RP0=0, select bank0
  4851  022D  1303               	bcf	3,6	;RP1=0, select bank0
  4852  022E  00DE               	movwf	_gesture_lr_count_
  4853  022F  30FF               	movlw	255
  4854  0230                     L4:	
  4855  0230  00DF               	movwf	_gesture_lr_count_+1
  4856                           
  4857                           ;APDS9960.c: 744: } else {
  4858  0231  2A36               	goto	l3901
  4859  0232                     l3899:	
  4860                           
  4861                           ;APDS9960.c: 745: gesture_lr_count_ = 0;
  4862  0232  1283               	bcf	3,5	;RP0=0, select bank0
  4863  0233  1303               	bcf	3,6	;RP1=0, select bank0
  4864  0234  01DE               	clrf	_gesture_lr_count_
  4865  0235  01DF               	clrf	_gesture_lr_count_+1
  4866  0236                     l3901:	
  4867                           
  4868                           ;APDS9960.c: 746: }
  4869                           ;APDS9960.c: 749: if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  4870  0236  0868               	movf	_gesture_ud_count_,w
  4871  0237  0469               	iorwf	_gesture_ud_count_+1,w
  4872  0238  1D03               	btfss	3,2
  4873  0239  2AE5               	goto	l3951
  4874  023A  085E               	movf	_gesture_lr_count_,w
  4875  023B  045F               	iorwf	_gesture_lr_count_+1,w
  4876  023C  1D03               	btfss	3,2
  4877  023D  2AE5               	goto	l3951
  4878                           
  4879                           ;APDS9960.c: 750: if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((lr_delta)
      +                           > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  4880  023E  0848               	movf	processGestureData@ud_delta+1,w
  4881  023F  3A80               	xorlw	128
  4882  0240  00FF               	movwf	127
  4883  0241  3080               	movlw	128
  4884  0242  027F               	subwf	127,w
  4885  0243  1D03               	skipz
  4886  0244  2A47               	goto	u4505
  4887  0245  3001               	movlw	1
  4888  0246  0247               	subwf	processGestureData@ud_delta,w
  4889  0247                     u4505:	
  4890  0247  1803               	skipnc
  4891  0248  2A57               	goto	l3909
  4892  0249  1283               	bcf	3,5	;RP0=0, select bank0
  4893  024A  1303               	bcf	3,6	;RP1=0, select bank0
  4894  024B  0947               	comf	processGestureData@ud_delta,w
  4895  024C  00AD               	movwf	??_processGestureData
  4896  024D  0948               	comf	processGestureData@ud_delta+1,w
  4897  024E  00AE               	movwf	??_processGestureData+1
  4898  024F  0AAD               	incf	??_processGestureData,f
  4899  0250  1903               	skipnz
  4900  0251  0AAE               	incf	??_processGestureData+1,f
  4901  0252  082D               	movf	??_processGestureData,w
  4902  0253  00B7               	movwf	_processGestureData$410
  4903  0254  082E               	movf	??_processGestureData+1,w
  4904  0255  00B8               	movwf	_processGestureData$410+1
  4905  0256  2A5D               	goto	l3911
  4906  0257                     l3909:	
  4907  0257  1283               	bcf	3,5	;RP0=0, select bank0
  4908  0258  1303               	bcf	3,6	;RP1=0, select bank0
  4909  0259  0848               	movf	processGestureData@ud_delta+1,w
  4910  025A  00B8               	movwf	_processGestureData$410+1
  4911  025B  0847               	movf	processGestureData@ud_delta,w
  4912  025C  00B7               	movwf	_processGestureData$410
  4913  025D                     l3911:	
  4914  025D  0838               	movf	_processGestureData$410+1,w
  4915  025E  3A80               	xorlw	128
  4916  025F  00FF               	movwf	127
  4917  0260  3080               	movlw	128
  4918  0261  027F               	subwf	127,w
  4919  0262  1D03               	skipz
  4920  0263  2A66               	goto	u4515
  4921  0264  3014               	movlw	20
  4922  0265  0237               	subwf	_processGestureData$410,w
  4923  0266                     u4515:	
  4924  0266  1803               	skipnc
  4925  0267  2B60               	goto	l3977
  4926  0268  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0269  1303               	bcf	3,6	;RP1=0, select bank0
  4928  026A  084A               	movf	processGestureData@lr_delta+1,w
  4929  026B  3A80               	xorlw	128
  4930  026C  00FF               	movwf	127
  4931  026D  3080               	movlw	128
  4932  026E  027F               	subwf	127,w
  4933  026F  1D03               	skipz
  4934  0270  2A73               	goto	u4525
  4935  0271  3001               	movlw	1
  4936  0272  0249               	subwf	processGestureData@lr_delta,w
  4937  0273                     u4525:	
  4938  0273  1803               	skipnc
  4939  0274  2A83               	goto	l3917
  4940  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4941  0276  1303               	bcf	3,6	;RP1=0, select bank0
  4942  0277  0949               	comf	processGestureData@lr_delta,w
  4943  0278  00AD               	movwf	??_processGestureData
  4944  0279  094A               	comf	processGestureData@lr_delta+1,w
  4945  027A  00AE               	movwf	??_processGestureData+1
  4946  027B  0AAD               	incf	??_processGestureData,f
  4947  027C  1903               	skipnz
  4948  027D  0AAE               	incf	??_processGestureData+1,f
  4949  027E  082D               	movf	??_processGestureData,w
  4950  027F  00B9               	movwf	_processGestureData$411
  4951  0280  082E               	movf	??_processGestureData+1,w
  4952  0281  00BA               	movwf	_processGestureData$411+1
  4953  0282  2A89               	goto	l3919
  4954  0283                     l3917:	
  4955  0283  1283               	bcf	3,5	;RP0=0, select bank0
  4956  0284  1303               	bcf	3,6	;RP1=0, select bank0
  4957  0285  084A               	movf	processGestureData@lr_delta+1,w
  4958  0286  00BA               	movwf	_processGestureData$411+1
  4959  0287  0849               	movf	processGestureData@lr_delta,w
  4960  0288  00B9               	movwf	_processGestureData$411
  4961  0289                     l3919:	
  4962  0289  083A               	movf	_processGestureData$411+1,w
  4963  028A  3A80               	xorlw	128
  4964  028B  00FF               	movwf	127
  4965  028C  3080               	movlw	128
  4966  028D  027F               	subwf	127,w
  4967  028E  1D03               	skipz
  4968  028F  2A92               	goto	u4535
  4969  0290  3014               	movlw	20
  4970  0291  0239               	subwf	_processGestureData$411,w
  4971  0292                     u4535:	
  4972  0292  1803               	skipnc
  4973  0293  2B60               	goto	l3977
  4974                           
  4975                           ;APDS9960.c: 753: if( (ud_delta == 0) && (lr_delta == 0) ) {
  4976  0294  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0295  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0296  0847               	movf	processGestureData@ud_delta,w
  4979  0297  0448               	iorwf	processGestureData@ud_delta+1,w
  4980  0298  1D03               	btfss	3,2
  4981  0299  2AA5               	goto	l3927
  4982  029A  0849               	movf	processGestureData@lr_delta,w
  4983  029B  044A               	iorwf	processGestureData@lr_delta+1,w
  4984  029C  1D03               	btfss	3,2
  4985  029D  2AA5               	goto	l3927
  4986                           
  4987                           ;APDS9960.c: 754: gesture_near_count_++;
  4988  029E  3001               	movlw	1
  4989  029F  07E4               	addwf	_gesture_near_count_,f
  4990  02A0  1803               	skipnc
  4991  02A1  0AE5               	incf	_gesture_near_count_+1,f
  4992  02A2  3000               	movlw	0
  4993  02A3  07E5               	addwf	_gesture_near_count_+1,f
  4994                           
  4995                           ;APDS9960.c: 755: } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  4996  02A4  2AB3               	goto	l3933
  4997  02A5                     l3927:	
  4998  02A5  0847               	movf	processGestureData@ud_delta,w
  4999  02A6  0448               	iorwf	processGestureData@ud_delta+1,w
  5000  02A7  1D03               	btfss	3,2
  5001  02A8  2AAD               	goto	l3931
  5002  02A9  0849               	movf	processGestureData@lr_delta,w
  5003  02AA  044A               	iorwf	processGestureData@lr_delta+1,w
  5004  02AB  1903               	btfsc	3,2
  5005  02AC  2AB3               	goto	l3933
  5006  02AD                     l3931:	
  5007                           
  5008                           ;APDS9960.c: 756: gesture_far_count_++;
  5009  02AD  3001               	movlw	1
  5010  02AE  07DC               	addwf	_gesture_far_count_,f
  5011  02AF  1803               	skipnc
  5012  02B0  0ADD               	incf	_gesture_far_count_+1,f
  5013  02B1  3000               	movlw	0
  5014  02B2  07DD               	addwf	_gesture_far_count_+1,f
  5015  02B3                     l3933:	
  5016                           
  5017                           ;APDS9960.c: 757: }
  5018                           ;APDS9960.c: 759: if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 2) ) {
  5019  02B3  0865               	movf	_gesture_near_count_+1,w
  5020  02B4  3A80               	xorlw	128
  5021  02B5  00FF               	movwf	127
  5022  02B6  3080               	movlw	128
  5023  02B7  027F               	subwf	127,w
  5024  02B8  1D03               	skipz
  5025  02B9  2ABC               	goto	u4585
  5026  02BA  300A               	movlw	10
  5027  02BB  0264               	subwf	_gesture_near_count_,w
  5028  02BC                     u4585:	
  5029  02BC  1C03               	skipc
  5030  02BD  2B60               	goto	l3977
  5031  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  5032  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  5033  02C0  085D               	movf	_gesture_far_count_+1,w
  5034  02C1  3A80               	xorlw	128
  5035  02C2  00FF               	movwf	127
  5036  02C3  3080               	movlw	128
  5037  02C4  027F               	subwf	127,w
  5038  02C5  1D03               	skipz
  5039  02C6  2AC9               	goto	u4595
  5040  02C7  3002               	movlw	2
  5041  02C8  025C               	subwf	_gesture_far_count_,w
  5042  02C9                     u4595:	
  5043  02C9  1C03               	skipc
  5044  02CA  2B60               	goto	l3977
  5045                           
  5046                           ;APDS9960.c: 760: if( (ud_delta == 0) && (lr_delta == 0) ) {
  5047  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5048  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5049  02CD  0847               	movf	processGestureData@ud_delta,w
  5050  02CE  0448               	iorwf	processGestureData@ud_delta+1,w
  5051  02CF  1D03               	btfss	3,2
  5052  02D0  2AD7               	goto	l3943
  5053  02D1  0849               	movf	processGestureData@lr_delta,w
  5054  02D2  044A               	iorwf	processGestureData@lr_delta+1,w
  5055  02D3  1D03               	btfss	3,2
  5056  02D4  2AD7               	goto	l3943
  5057                           
  5058                           ;APDS9960.c: 761: gesture_state_ = NEAR_STATE;
  5059  02D5  3001               	movlw	1
  5060  02D6  2AE0               	goto	L5
  5061  02D7                     l3943:	
  5062                           ;APDS9960.c: 762: } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  5063                           
  5064  02D7  0847               	movf	processGestureData@ud_delta,w
  5065  02D8  0448               	iorwf	processGestureData@ud_delta+1,w
  5066  02D9  1903               	btfsc	3,2
  5067  02DA  2AE3               	goto	l390
  5068  02DB  0849               	movf	processGestureData@lr_delta,w
  5069  02DC  044A               	iorwf	processGestureData@lr_delta+1,w
  5070  02DD  1903               	btfsc	3,2
  5071  02DE  2AE3               	goto	l390
  5072                           
  5073                           ;APDS9960.c: 763: gesture_state_ = FAR_STATE;
  5074  02DF  3002               	movlw	2
  5075  02E0                     L5:	
  5076  02E0  00E6               	movwf	_gesture_state_
  5077  02E1  3000               	movlw	0
  5078  02E2  00E7               	movwf	_gesture_state_+1
  5079  02E3                     l390:	
  5080                           
  5081                           ;APDS9960.c: 764: }
  5082                           ;APDS9960.c: 765: return 1;
  5083  02E3  3001               	movlw	1
  5084  02E4  0008               	return
  5085  02E5                     l3951:	
  5086                           ;APDS9960.c: 766: }
  5087                           ;APDS9960.c: 767: }
  5088                           ;APDS9960.c: 768: } else {
  5089                           
  5090                           
  5091                           ;APDS9960.c: 769: if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((lr_delta)
      +                           > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  5092  02E5  0848               	movf	processGestureData@ud_delta+1,w
  5093  02E6  3A80               	xorlw	128
  5094  02E7  00FF               	movwf	127
  5095  02E8  3080               	movlw	128
  5096  02E9  027F               	subwf	127,w
  5097  02EA  1D03               	skipz
  5098  02EB  2AEE               	goto	u4645
  5099  02EC  3001               	movlw	1
  5100  02ED  0247               	subwf	processGestureData@ud_delta,w
  5101  02EE                     u4645:	
  5102  02EE  1803               	skipnc
  5103  02EF  2AFE               	goto	l3955
  5104  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5105  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5106  02F2  0947               	comf	processGestureData@ud_delta,w
  5107  02F3  00AD               	movwf	??_processGestureData
  5108  02F4  0948               	comf	processGestureData@ud_delta+1,w
  5109  02F5  00AE               	movwf	??_processGestureData+1
  5110  02F6  0AAD               	incf	??_processGestureData,f
  5111  02F7  1903               	skipnz
  5112  02F8  0AAE               	incf	??_processGestureData+1,f
  5113  02F9  082D               	movf	??_processGestureData,w
  5114  02FA  00BB               	movwf	_processGestureData$412
  5115  02FB  082E               	movf	??_processGestureData+1,w
  5116  02FC  00BC               	movwf	_processGestureData$412+1
  5117  02FD  2B04               	goto	l3957
  5118  02FE                     l3955:	
  5119  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5120  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5121  0300  0848               	movf	processGestureData@ud_delta+1,w
  5122  0301  00BC               	movwf	_processGestureData$412+1
  5123  0302  0847               	movf	processGestureData@ud_delta,w
  5124  0303  00BB               	movwf	_processGestureData$412
  5125  0304                     l3957:	
  5126  0304  083C               	movf	_processGestureData$412+1,w
  5127  0305  3A80               	xorlw	128
  5128  0306  00FF               	movwf	127
  5129  0307  3080               	movlw	128
  5130  0308  027F               	subwf	127,w
  5131  0309  1D03               	skipz
  5132  030A  2B0D               	goto	u4655
  5133  030B  3014               	movlw	20
  5134  030C  023B               	subwf	_processGestureData$412,w
  5135  030D                     u4655:	
  5136  030D  1803               	skipnc
  5137  030E  2B60               	goto	l3977
  5138  030F  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0310  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0311  084A               	movf	processGestureData@lr_delta+1,w
  5141  0312  3A80               	xorlw	128
  5142  0313  00FF               	movwf	127
  5143  0314  3080               	movlw	128
  5144  0315  027F               	subwf	127,w
  5145  0316  1D03               	skipz
  5146  0317  2B1A               	goto	u4665
  5147  0318  3001               	movlw	1
  5148  0319  0249               	subwf	processGestureData@lr_delta,w
  5149  031A                     u4665:	
  5150  031A  1803               	skipnc
  5151  031B  2B2A               	goto	l3963
  5152  031C  1283               	bcf	3,5	;RP0=0, select bank0
  5153  031D  1303               	bcf	3,6	;RP1=0, select bank0
  5154  031E  0949               	comf	processGestureData@lr_delta,w
  5155  031F  00AD               	movwf	??_processGestureData
  5156  0320  094A               	comf	processGestureData@lr_delta+1,w
  5157  0321  00AE               	movwf	??_processGestureData+1
  5158  0322  0AAD               	incf	??_processGestureData,f
  5159  0323  1903               	skipnz
  5160  0324  0AAE               	incf	??_processGestureData+1,f
  5161  0325  082D               	movf	??_processGestureData,w
  5162  0326  00BD               	movwf	_processGestureData$413
  5163  0327  082E               	movf	??_processGestureData+1,w
  5164  0328  00BE               	movwf	_processGestureData$413+1
  5165  0329  2B30               	goto	l3965
  5166  032A                     l3963:	
  5167  032A  1283               	bcf	3,5	;RP0=0, select bank0
  5168  032B  1303               	bcf	3,6	;RP1=0, select bank0
  5169  032C  084A               	movf	processGestureData@lr_delta+1,w
  5170  032D  00BE               	movwf	_processGestureData$413+1
  5171  032E  0849               	movf	processGestureData@lr_delta,w
  5172  032F  00BD               	movwf	_processGestureData$413
  5173  0330                     l3965:	
  5174  0330  083E               	movf	_processGestureData$413+1,w
  5175  0331  3A80               	xorlw	128
  5176  0332  00FF               	movwf	127
  5177  0333  3080               	movlw	128
  5178  0334  027F               	subwf	127,w
  5179  0335  1D03               	skipz
  5180  0336  2B39               	goto	u4675
  5181  0337  3014               	movlw	20
  5182  0338  023D               	subwf	_processGestureData$413,w
  5183  0339                     u4675:	
  5184  0339  1803               	skipnc
  5185  033A  2B60               	goto	l3977
  5186                           
  5187                           ;APDS9960.c: 772: if( (ud_delta == 0) && (lr_delta == 0) ) {
  5188  033B  1283               	bcf	3,5	;RP0=0, select bank0
  5189  033C  1303               	bcf	3,6	;RP1=0, select bank0
  5190  033D  0847               	movf	processGestureData@ud_delta,w
  5191  033E  0448               	iorwf	processGestureData@ud_delta+1,w
  5192  033F  1D03               	btfss	3,2
  5193  0340  2B4B               	goto	l3973
  5194  0341  0849               	movf	processGestureData@lr_delta,w
  5195  0342  044A               	iorwf	processGestureData@lr_delta+1,w
  5196  0343  1D03               	btfss	3,2
  5197  0344  2B4B               	goto	l3973
  5198                           
  5199                           ;APDS9960.c: 773: gesture_near_count_++;
  5200  0345  3001               	movlw	1
  5201  0346  07E4               	addwf	_gesture_near_count_,f
  5202  0347  1803               	skipnc
  5203  0348  0AE5               	incf	_gesture_near_count_+1,f
  5204  0349  3000               	movlw	0
  5205  034A  07E5               	addwf	_gesture_near_count_+1,f
  5206  034B                     l3973:	
  5207                           
  5208                           ;APDS9960.c: 774: }
  5209                           ;APDS9960.c: 776: if( gesture_near_count_ >= 10 ) {
  5210  034B  0865               	movf	_gesture_near_count_+1,w
  5211  034C  3A80               	xorlw	128
  5212  034D  00FF               	movwf	127
  5213  034E  3080               	movlw	128
  5214  034F  027F               	subwf	127,w
  5215  0350  1D03               	skipz
  5216  0351  2B54               	goto	u4705
  5217  0352  300A               	movlw	10
  5218  0353  0264               	subwf	_gesture_near_count_,w
  5219  0354                     u4705:	
  5220  0354  1C03               	skipc
  5221  0355  2B60               	goto	l3977
  5222                           
  5223                           ;APDS9960.c: 777: gesture_ud_count_ = 0;
  5224  0356  1283               	bcf	3,5	;RP0=0, select bank0
  5225  0357  1303               	bcf	3,6	;RP1=0, select bank0
  5226  0358  01E8               	clrf	_gesture_ud_count_
  5227  0359  01E9               	clrf	_gesture_ud_count_+1
  5228                           
  5229                           ;APDS9960.c: 778: gesture_lr_count_ = 0;
  5230  035A  01DE               	clrf	_gesture_lr_count_
  5231  035B  01DF               	clrf	_gesture_lr_count_+1
  5232                           
  5233                           ;APDS9960.c: 779: gesture_ud_delta_ = 0;
  5234  035C  01EA               	clrf	_gesture_ud_delta_
  5235  035D  01EB               	clrf	_gesture_ud_delta_+1
  5236                           
  5237                           ;APDS9960.c: 780: gesture_lr_delta_ = 0;
  5238  035E  01E0               	clrf	_gesture_lr_delta_
  5239  035F  01E1               	clrf	_gesture_lr_delta_+1
  5240  0360                     l3977:	
  5241                           
  5242                           ;APDS9960.c: 781: }
  5243                           ;APDS9960.c: 782: }
  5244                           ;APDS9960.c: 783: }
  5245                           ;APDS9960.c: 785: return 0;
  5246  0360  3000               	movlw	0
  5247  0361  0008               	return
  5248  0362                     __end_of_processGestureData:	
  5249                           
  5250                           	psect	text21
  5251  091A                     __ptext21:	
  5252 ;; *************** function ___wmul *****************
  5253 ;; Defined at:
  5254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5257 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  product         2    4[COMMON] unsigned int 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  2    0[BANK0 ] unsigned int 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5269 ;;      Params:         0       4       0       0       0
  5270 ;;      Locals:         2       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0
  5272 ;;      Totals:         2       4       0       0       0
  5273 ;;Total ram usage:        6 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    1
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_processGestureData
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function ___wmul
  5285  091A                     ___wmul:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5289  091A  01F4               	clrf	___wmul@product
  5290  091B  01F5               	clrf	___wmul@product+1
  5291  091C                     l3721:	
  5292  091C  1283               	bcf	3,5	;RP0=0, select bank0
  5293  091D  1303               	bcf	3,6	;RP1=0, select bank0
  5294  091E  1C20               	btfss	___wmul@multiplier,0
  5295  091F  2926               	goto	l715
  5296  0920  0822               	movf	___wmul@multiplicand,w
  5297  0921  07F4               	addwf	___wmul@product,f
  5298  0922  1803               	skipnc
  5299  0923  0AF5               	incf	___wmul@product+1,f
  5300  0924  0823               	movf	___wmul@multiplicand+1,w
  5301  0925  07F5               	addwf	___wmul@product+1,f
  5302  0926                     l715:	
  5303  0926  3001               	movlw	1
  5304  0927                     u4135:	
  5305  0927  1003               	clrc
  5306  0928  0DA2               	rlf	___wmul@multiplicand,f
  5307  0929  0DA3               	rlf	___wmul@multiplicand+1,f
  5308  092A  3EFF               	addlw	-1
  5309  092B  1D03               	skipz
  5310  092C  2927               	goto	u4135
  5311  092D  3001               	movlw	1
  5312  092E                     u4145:	
  5313  092E  1003               	clrc
  5314  092F  0CA1               	rrf	___wmul@multiplier+1,f
  5315  0930  0CA0               	rrf	___wmul@multiplier,f
  5316  0931  3EFF               	addlw	-1
  5317  0932  1D03               	skipz
  5318  0933  292E               	goto	u4145
  5319  0934  0820               	movf	___wmul@multiplier,w
  5320  0935  0421               	iorwf	___wmul@multiplier+1,w
  5321  0936  1D03               	btfss	3,2
  5322  0937  291C               	goto	l3721
  5323  0938  0875               	movf	___wmul@product+1,w
  5324  0939  00A1               	movwf	?___wmul+1
  5325  093A  0874               	movf	___wmul@product,w
  5326  093B  00A0               	movwf	?___wmul
  5327  093C  0008               	return
  5328  093D                     __end_of___wmul:	
  5329                           
  5330                           	psect	text22
  5331  0C6C                     __ptext22:	
  5332 ;; *************** function ___awdiv *****************
  5333 ;; Defined at:
  5334 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  divisor         2    4[BANK0 ] int 
  5337 ;;  dividend        2    6[BANK0 ] int 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  quotient        2   11[BANK0 ] int 
  5340 ;;  sign            1   10[BANK0 ] unsigned char 
  5341 ;;  counter         1    9[BANK0 ] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  2    4[BANK0 ] int 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5351 ;;      Params:         0       4       0       0       0
  5352 ;;      Locals:         0       4       0       0       0
  5353 ;;      Temps:          0       1       0       0       0
  5354 ;;      Totals:         0       9       0       0       0
  5355 ;;Total ram usage:        9 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_processGestureData
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function ___awdiv
  5367  0C6C                     ___awdiv:	
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5371  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0C6E  01AA               	clrf	___awdiv@sign
  5374  0C6F  1FA5               	btfss	___awdiv@divisor+1,7
  5375  0C70  2C78               	goto	l2447
  5376  0C71  09A4               	comf	___awdiv@divisor,f
  5377  0C72  09A5               	comf	___awdiv@divisor+1,f
  5378  0C73  0AA4               	incf	___awdiv@divisor,f
  5379  0C74  1903               	skipnz
  5380  0C75  0AA5               	incf	___awdiv@divisor+1,f
  5381  0C76  01AA               	clrf	___awdiv@sign
  5382  0C77  0AAA               	incf	___awdiv@sign,f
  5383  0C78                     l2447:	
  5384  0C78  1FA7               	btfss	___awdiv@dividend+1,7
  5385  0C79  2C83               	goto	l2453
  5386  0C7A  09A6               	comf	___awdiv@dividend,f
  5387  0C7B  09A7               	comf	___awdiv@dividend+1,f
  5388  0C7C  0AA6               	incf	___awdiv@dividend,f
  5389  0C7D  1903               	skipnz
  5390  0C7E  0AA7               	incf	___awdiv@dividend+1,f
  5391  0C7F  3001               	movlw	1
  5392  0C80  00A8               	movwf	??___awdiv
  5393  0C81  0828               	movf	??___awdiv,w
  5394  0C82  06AA               	xorwf	___awdiv@sign,f
  5395  0C83                     l2453:	
  5396  0C83  01AB               	clrf	___awdiv@quotient
  5397  0C84  01AC               	clrf	___awdiv@quotient+1
  5398  0C85  0824               	movf	___awdiv@divisor,w
  5399  0C86  0425               	iorwf	___awdiv@divisor+1,w
  5400  0C87  1903               	btfsc	3,2
  5401  0C88  2CBA               	goto	l2475
  5402  0C89  01A9               	clrf	___awdiv@counter
  5403  0C8A  0AA9               	incf	___awdiv@counter,f
  5404  0C8B                     l2463:	
  5405  0C8B  1BA5               	btfsc	___awdiv@divisor+1,7
  5406  0C8C  2C99               	goto	l2465
  5407  0C8D  3001               	movlw	1
  5408  0C8E                     u2155:	
  5409  0C8E  1003               	clrc
  5410  0C8F  0DA4               	rlf	___awdiv@divisor,f
  5411  0C90  0DA5               	rlf	___awdiv@divisor+1,f
  5412  0C91  3EFF               	addlw	-1
  5413  0C92  1D03               	skipz
  5414  0C93  2C8E               	goto	u2155
  5415  0C94  3001               	movlw	1
  5416  0C95  00A8               	movwf	??___awdiv
  5417  0C96  0828               	movf	??___awdiv,w
  5418  0C97  07A9               	addwf	___awdiv@counter,f
  5419  0C98  2C8B               	goto	l2463
  5420  0C99                     l2465:	
  5421  0C99  3001               	movlw	1
  5422  0C9A                     u2175:	
  5423  0C9A  1003               	clrc
  5424  0C9B  0DAB               	rlf	___awdiv@quotient,f
  5425  0C9C  0DAC               	rlf	___awdiv@quotient+1,f
  5426  0C9D  3EFF               	addlw	-1
  5427  0C9E  1D03               	skipz
  5428  0C9F  2C9A               	goto	u2175
  5429  0CA0  0825               	movf	___awdiv@divisor+1,w
  5430  0CA1  0227               	subwf	___awdiv@dividend+1,w
  5431  0CA2  1D03               	skipz
  5432  0CA3  2CA6               	goto	u2185
  5433  0CA4  0824               	movf	___awdiv@divisor,w
  5434  0CA5  0226               	subwf	___awdiv@dividend,w
  5435  0CA6                     u2185:	
  5436  0CA6  1C03               	skipc
  5437  0CA7  2CAF               	goto	l2471
  5438  0CA8  0824               	movf	___awdiv@divisor,w
  5439  0CA9  02A6               	subwf	___awdiv@dividend,f
  5440  0CAA  0825               	movf	___awdiv@divisor+1,w
  5441  0CAB  1C03               	skipc
  5442  0CAC  03A7               	decf	___awdiv@dividend+1,f
  5443  0CAD  02A7               	subwf	___awdiv@dividend+1,f
  5444  0CAE  142B               	bsf	___awdiv@quotient,0
  5445  0CAF                     l2471:	
  5446  0CAF  3001               	movlw	1
  5447  0CB0                     u2195:	
  5448  0CB0  1003               	clrc
  5449  0CB1  0CA5               	rrf	___awdiv@divisor+1,f
  5450  0CB2  0CA4               	rrf	___awdiv@divisor,f
  5451  0CB3  3EFF               	addlw	-1
  5452  0CB4  1D03               	skipz
  5453  0CB5  2CB0               	goto	u2195
  5454  0CB6  3001               	movlw	1
  5455  0CB7  02A9               	subwf	___awdiv@counter,f
  5456  0CB8  1D03               	btfss	3,2
  5457  0CB9  2C99               	goto	l2465
  5458  0CBA                     l2475:	
  5459  0CBA  082A               	movf	___awdiv@sign,w
  5460  0CBB  1903               	btfsc	3,2
  5461  0CBC  2CC2               	goto	l2479
  5462  0CBD  09AB               	comf	___awdiv@quotient,f
  5463  0CBE  09AC               	comf	___awdiv@quotient+1,f
  5464  0CBF  0AAB               	incf	___awdiv@quotient,f
  5465  0CC0  1903               	skipnz
  5466  0CC1  0AAC               	incf	___awdiv@quotient+1,f
  5467  0CC2                     l2479:	
  5468  0CC2  082C               	movf	___awdiv@quotient+1,w
  5469  0CC3  00A5               	movwf	?___awdiv+1
  5470  0CC4  082B               	movf	___awdiv@quotient,w
  5471  0CC5  00A4               	movwf	?___awdiv
  5472  0CC6  0008               	return
  5473  0CC7                     __end_of___awdiv:	
  5474                           
  5475                           	psect	text23
  5476  086F                     __ptext23:	
  5477 ;; *************** function _isGestureAvailable *****************
  5478 ;; Defined at:
  5479 ;;		line 531 in file "APDS9960.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;  val             1   11[BANK0 ] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      unsigned char 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0, pclath, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5493 ;;      Params:         0       0       0       0       0
  5494 ;;      Locals:         0       1       0       0       0
  5495 ;;      Temps:          0       1       0       0       0
  5496 ;;      Totals:         0       2       0       0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    3
  5500 ;; This function calls:
  5501 ;;		_wireReadDataByte
  5502 ;; This function is called by:
  5503 ;;		_handleGesture
  5504 ;;		_readGesture
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           
  5509                           ;psect for function _isGestureAvailable
  5510  086F                     _isGestureAvailable:	
  5511                           
  5512                           ;APDS9960.c: 533: uint8_t val;
  5513                           ;APDS9960.c: 536: val=wireReadDataByte(0xAF);
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  5517  086F  30AF               	movlw	175
  5518  0870  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  5519  0875  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0876  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0877  00AA               	movwf	??_isGestureAvailable
  5522  0878  082A               	movf	??_isGestureAvailable,w
  5523  0879  00AB               	movwf	isGestureAvailable@val
  5524                           
  5525                           ;APDS9960.c: 539: val &= 0b00000001;
  5526  087A  3001               	movlw	1
  5527  087B  00AA               	movwf	??_isGestureAvailable
  5528  087C  082A               	movf	??_isGestureAvailable,w
  5529  087D  05AB               	andwf	isGestureAvailable@val,f
  5530                           
  5531                           ;APDS9960.c: 542: if( val == 1) {
  5532  087E  032B               	decf	isGestureAvailable@val,w
  5533  087F  1D03               	btfss	3,2
  5534  0880  2883               	goto	l3745
  5535                           
  5536                           ;APDS9960.c: 543: return 1;
  5537  0881  3001               	movlw	1
  5538                           
  5539                           ;APDS9960.c: 544: } else {
  5540  0882  0008               	return
  5541  0883                     l3745:	
  5542                           
  5543                           ;APDS9960.c: 545: return 0;
  5544  0883  3000               	movlw	0
  5545  0884  0008               	return
  5546  0885                     __end_of_isGestureAvailable:	
  5547                           
  5548                           	psect	text24
  5549  0362                     __ptext24:	
  5550 ;; *************** function _decodeGesture *****************
  5551 ;; Defined at:
  5552 ;;		line 789 in file "APDS9960.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;		None
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      unsigned char 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0, btemp+1
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5566 ;;      Params:         0       0       0       0       0
  5567 ;;      Locals:         0      16       0       0       0
  5568 ;;      Temps:          2       0       0       0       0
  5569 ;;      Totals:         2      16       0       0       0
  5570 ;;Total ram usage:       18 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    1
  5573 ;; This function calls:
  5574 ;;		Nothing
  5575 ;; This function is called by:
  5576 ;;		_readGesture
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           
  5581                           ;psect for function _decodeGesture
  5582  0362                     _decodeGesture:	
  5583                           
  5584                           ;APDS9960.c: 792: if( gesture_state_ == NEAR_STATE ) {
  5585                           
  5586                           ;incstack = 0
  5587                           ; Regs used in _decodeGesture: [wreg+status,2+status,0+btemp+1]
  5588  0362  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0363  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0364  0366               	decf	_gesture_state_,w
  5591  0365  0467               	iorwf	_gesture_state_+1,w
  5592  0366  1D03               	btfss	3,2
  5593  0367  2B6E               	goto	l2741
  5594                           
  5595                           ;APDS9960.c: 793: gesture_motion_ = DIR_NEAR;
  5596  0368  3005               	movlw	5
  5597  0369  00E2               	movwf	_gesture_motion_
  5598  036A  3000               	movlw	0
  5599  036B  00E3               	movwf	_gesture_motion_+1
  5600                           
  5601                           ;APDS9960.c: 794: return 1;
  5602  036C  3001               	movlw	1
  5603  036D  0008               	return
  5604  036E                     l2741:	
  5605                           ;APDS9960.c: 795: } else if ( gesture_state_ == FAR_STATE ) {
  5606                           
  5607  036E  3002               	movlw	2
  5608  036F  0666               	xorwf	_gesture_state_,w
  5609  0370  0467               	iorwf	_gesture_state_+1,w
  5610  0371  1D03               	btfss	3,2
  5611  0372  2B79               	goto	l2747
  5612                           
  5613                           ;APDS9960.c: 796: gesture_motion_ = DIR_FAR;
  5614  0373  3006               	movlw	6
  5615  0374  00E2               	movwf	_gesture_motion_
  5616  0375  3000               	movlw	0
  5617  0376  00E3               	movwf	_gesture_motion_+1
  5618                           
  5619                           ;APDS9960.c: 797: return 1;
  5620  0377  3001               	movlw	1
  5621  0378  0008               	return
  5622  0379                     l2747:	
  5623                           
  5624                           ;APDS9960.c: 798: }
  5625                           ;APDS9960.c: 801: if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  5626  0379  0A68               	incf	_gesture_ud_count_,w
  5627  037A  1D03               	skipz
  5628  037B  2B85               	goto	l2753
  5629  037C  0A69               	incf	_gesture_ud_count_+1,w
  5630  037D  1D03               	btfss	3,2
  5631  037E  2B85               	goto	l2753
  5632  037F  085E               	movf	_gesture_lr_count_,w
  5633  0380  045F               	iorwf	_gesture_lr_count_+1,w
  5634  0381  1D03               	btfss	3,2
  5635  0382  2B85               	goto	l2753
  5636                           
  5637                           ;APDS9960.c: 802: gesture_motion_ = DIR_UP;
  5638  0383  3003               	movlw	3
  5639  0384  2D00               	goto	L16
  5640  0385                     l2753:	
  5641                           ;APDS9960.c: 803: } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) {
  5642                           
  5643  0385  0368               	decf	_gesture_ud_count_,w
  5644  0386  0469               	iorwf	_gesture_ud_count_+1,w
  5645  0387  1D03               	btfss	3,2
  5646  0388  2B8F               	goto	l2759
  5647  0389  085E               	movf	_gesture_lr_count_,w
  5648  038A  045F               	iorwf	_gesture_lr_count_+1,w
  5649  038B  1D03               	btfss	3,2
  5650  038C  2B8F               	goto	l2759
  5651                           
  5652                           ;APDS9960.c: 804: gesture_motion_ = DIR_DOWN;
  5653  038D  3004               	movlw	4
  5654  038E  2D00               	goto	L16
  5655  038F                     l2759:	
  5656                           ;APDS9960.c: 805: } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) {
  5657                           
  5658  038F  0868               	movf	_gesture_ud_count_,w
  5659  0390  0469               	iorwf	_gesture_ud_count_+1,w
  5660  0391  1D03               	btfss	3,2
  5661  0392  2B99               	goto	l2765
  5662  0393  035E               	decf	_gesture_lr_count_,w
  5663  0394  045F               	iorwf	_gesture_lr_count_+1,w
  5664  0395  1D03               	btfss	3,2
  5665  0396  2B99               	goto	l2765
  5666                           
  5667                           ;APDS9960.c: 806: gesture_motion_ = DIR_RIGHT;
  5668  0397  3002               	movlw	2
  5669  0398  2D00               	goto	L16
  5670  0399                     l2765:	
  5671                           ;APDS9960.c: 807: } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) ) {
  5672                           
  5673  0399  0868               	movf	_gesture_ud_count_,w
  5674  039A  0469               	iorwf	_gesture_ud_count_+1,w
  5675  039B  1D03               	btfss	3,2
  5676  039C  2BA5               	goto	l2771
  5677  039D  0A5E               	incf	_gesture_lr_count_,w
  5678  039E  1D03               	skipz
  5679  039F  2BA5               	goto	l2771
  5680  03A0  0A5F               	incf	_gesture_lr_count_+1,w
  5681  03A1  1D03               	btfss	3,2
  5682  03A2  2BA5               	goto	l2771
  5683                           
  5684                           ;APDS9960.c: 808: gesture_motion_ = DIR_LEFT;
  5685  03A3  3001               	movlw	1
  5686  03A4  2D00               	goto	L16
  5687  03A5                     l2771:	
  5688                           ;APDS9960.c: 809: } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) ) {
  5689                           
  5690  03A5  0A68               	incf	_gesture_ud_count_,w
  5691  03A6  1D03               	skipz
  5692  03A7  2BFA               	goto	l2791
  5693  03A8  0A69               	incf	_gesture_ud_count_+1,w
  5694  03A9  1D03               	btfss	3,2
  5695  03AA  2BFA               	goto	l2791
  5696  03AB  035E               	decf	_gesture_lr_count_,w
  5697  03AC  045F               	iorwf	_gesture_lr_count_+1,w
  5698  03AD  1D03               	btfss	3,2
  5699  03AE  2BFA               	goto	l2791
  5700                           
  5701                           ;APDS9960.c: 810: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  5702  03AF  086B               	movf	_gesture_ud_delta_+1,w
  5703  03B0  3A80               	xorlw	128
  5704  03B1  00FF               	movwf	127
  5705  03B2  3080               	movlw	128
  5706  03B3  027F               	subwf	127,w
  5707  03B4  1D03               	skipz
  5708  03B5  2BB8               	goto	u2895
  5709  03B6  3001               	movlw	1
  5710  03B7  026A               	subwf	_gesture_ud_delta_,w
  5711  03B8                     u2895:	
  5712  03B8  1803               	skipnc
  5713  03B9  2BC8               	goto	l2779
  5714  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  5715  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  5716  03BC  096A               	comf	_gesture_ud_delta_,w
  5717  03BD  00F4               	movwf	??_decodeGesture
  5718  03BE  096B               	comf	_gesture_ud_delta_+1,w
  5719  03BF  00F5               	movwf	??_decodeGesture+1
  5720  03C0  0AF4               	incf	??_decodeGesture,f
  5721  03C1  1903               	skipnz
  5722  03C2  0AF5               	incf	??_decodeGesture+1,f
  5723  03C3  0874               	movf	??_decodeGesture,w
  5724  03C4  00A0               	movwf	_decodeGesture$415
  5725  03C5  0875               	movf	??_decodeGesture+1,w
  5726  03C6  00A1               	movwf	_decodeGesture$415+1
  5727  03C7  2BCE               	goto	l2781
  5728  03C8                     l2779:	
  5729  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  5730  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  5731  03CA  086B               	movf	_gesture_ud_delta_+1,w
  5732  03CB  00A1               	movwf	_decodeGesture$415+1
  5733  03CC  086A               	movf	_gesture_ud_delta_,w
  5734  03CD  00A0               	movwf	_decodeGesture$415
  5735  03CE                     l2781:	
  5736  03CE  0861               	movf	_gesture_lr_delta_+1,w
  5737  03CF  3A80               	xorlw	128
  5738  03D0  00FF               	movwf	127
  5739  03D1  3080               	movlw	128
  5740  03D2  027F               	subwf	127,w
  5741  03D3  1D03               	skipz
  5742  03D4  2BD7               	goto	u2905
  5743  03D5  3001               	movlw	1
  5744  03D6  0260               	subwf	_gesture_lr_delta_,w
  5745  03D7                     u2905:	
  5746  03D7  1803               	skipnc
  5747  03D8  2BE7               	goto	l2785
  5748  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  5749  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  5750  03DB  0960               	comf	_gesture_lr_delta_,w
  5751  03DC  00F4               	movwf	??_decodeGesture
  5752  03DD  0961               	comf	_gesture_lr_delta_+1,w
  5753  03DE  00F5               	movwf	??_decodeGesture+1
  5754  03DF  0AF4               	incf	??_decodeGesture,f
  5755  03E0  1903               	skipnz
  5756  03E1  0AF5               	incf	??_decodeGesture+1,f
  5757  03E2  0874               	movf	??_decodeGesture,w
  5758  03E3  00A2               	movwf	_decodeGesture$416
  5759  03E4  0875               	movf	??_decodeGesture+1,w
  5760  03E5  00A3               	movwf	_decodeGesture$416+1
  5761  03E6  2BED               	goto	l427
  5762  03E7                     l2785:	
  5763  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  5764  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  5765  03E9  0861               	movf	_gesture_lr_delta_+1,w
  5766  03EA  00A3               	movwf	_decodeGesture$416+1
  5767  03EB  0860               	movf	_gesture_lr_delta_,w
  5768  03EC  00A2               	movwf	_decodeGesture$416
  5769  03ED                     l427:	
  5770  03ED  0823               	movf	_decodeGesture$416+1,w
  5771  03EE  3A80               	xorlw	128
  5772  03EF  00F4               	movwf	??_decodeGesture
  5773  03F0  0821               	movf	_decodeGesture$415+1,w
  5774  03F1  3A80               	xorlw	128
  5775  03F2  0274               	subwf	??_decodeGesture,w
  5776  03F3  1D03               	skipz
  5777  03F4  2BF7               	goto	u2915
  5778  03F5  0820               	movf	_decodeGesture$415,w
  5779  03F6  0222               	subwf	_decodeGesture$416,w
  5780  03F7                     u2915:	
  5781  03F7  1C03               	btfss	3,0
  5782  03F8  2CA5               	goto	L18
  5783                           
  5784                           ;APDS9960.c: 812: } else {
  5785                           
  5786                           ;APDS9960.c: 811: gesture_motion_ = DIR_UP;
  5787  03F9  2CFD               	goto	l2849
  5788  03FA                     l2791:	
  5789                           ;APDS9960.c: 814: }
  5790                           ;APDS9960.c: 815: } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == -1) ) {
  5791                           
  5792                           ;APDS9960.c: 813: gesture_motion_ = DIR_RIGHT;
  5793                           
  5794  03FA  0368               	decf	_gesture_ud_count_,w
  5795  03FB  0469               	iorwf	_gesture_ud_count_+1,w
  5796  03FC  1D03               	btfss	3,2
  5797  03FD  2C4F               	goto	l2811
  5798  03FE  0A5E               	incf	_gesture_lr_count_,w
  5799  03FF  1D03               	skipz
  5800  0400  2C4F               	goto	l2811
  5801  0401  0A5F               	incf	_gesture_lr_count_+1,w
  5802  0402  1D03               	btfss	3,2
  5803  0403  2C4F               	goto	l2811
  5804                           
  5805                           ;APDS9960.c: 816: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  5806  0404  086B               	movf	_gesture_ud_delta_+1,w
  5807  0405  3A80               	xorlw	128
  5808  0406  00FF               	movwf	127
  5809  0407  3080               	movlw	128
  5810  0408  027F               	subwf	127,w
  5811  0409  1D03               	skipz
  5812  040A  2C0D               	goto	u2945
  5813  040B  3001               	movlw	1
  5814  040C  026A               	subwf	_gesture_ud_delta_,w
  5815  040D                     u2945:	
  5816  040D  1803               	skipnc
  5817  040E  2C1D               	goto	l2799
  5818  040F  1283               	bcf	3,5	;RP0=0, select bank0
  5819  0410  1303               	bcf	3,6	;RP1=0, select bank0
  5820  0411  096A               	comf	_gesture_ud_delta_,w
  5821  0412  00F4               	movwf	??_decodeGesture
  5822  0413  096B               	comf	_gesture_ud_delta_+1,w
  5823  0414  00F5               	movwf	??_decodeGesture+1
  5824  0415  0AF4               	incf	??_decodeGesture,f
  5825  0416  1903               	skipnz
  5826  0417  0AF5               	incf	??_decodeGesture+1,f
  5827  0418  0874               	movf	??_decodeGesture,w
  5828  0419  00A4               	movwf	_decodeGesture$417
  5829  041A  0875               	movf	??_decodeGesture+1,w
  5830  041B  00A5               	movwf	_decodeGesture$417+1
  5831  041C  2C23               	goto	l2801
  5832  041D                     l2799:	
  5833  041D  1283               	bcf	3,5	;RP0=0, select bank0
  5834  041E  1303               	bcf	3,6	;RP1=0, select bank0
  5835  041F  086B               	movf	_gesture_ud_delta_+1,w
  5836  0420  00A5               	movwf	_decodeGesture$417+1
  5837  0421  086A               	movf	_gesture_ud_delta_,w
  5838  0422  00A4               	movwf	_decodeGesture$417
  5839  0423                     l2801:	
  5840  0423  0861               	movf	_gesture_lr_delta_+1,w
  5841  0424  3A80               	xorlw	128
  5842  0425  00FF               	movwf	127
  5843  0426  3080               	movlw	128
  5844  0427  027F               	subwf	127,w
  5845  0428  1D03               	skipz
  5846  0429  2C2C               	goto	u2955
  5847  042A  3001               	movlw	1
  5848  042B  0260               	subwf	_gesture_lr_delta_,w
  5849  042C                     u2955:	
  5850  042C  1803               	skipnc
  5851  042D  2C3C               	goto	l2805
  5852  042E  1283               	bcf	3,5	;RP0=0, select bank0
  5853  042F  1303               	bcf	3,6	;RP1=0, select bank0
  5854  0430  0960               	comf	_gesture_lr_delta_,w
  5855  0431  00F4               	movwf	??_decodeGesture
  5856  0432  0961               	comf	_gesture_lr_delta_+1,w
  5857  0433  00F5               	movwf	??_decodeGesture+1
  5858  0434  0AF4               	incf	??_decodeGesture,f
  5859  0435  1903               	skipnz
  5860  0436  0AF5               	incf	??_decodeGesture+1,f
  5861  0437  0874               	movf	??_decodeGesture,w
  5862  0438  00A6               	movwf	_decodeGesture$418
  5863  0439  0875               	movf	??_decodeGesture+1,w
  5864  043A  00A7               	movwf	_decodeGesture$418+1
  5865  043B  2C42               	goto	l439
  5866  043C                     l2805:	
  5867  043C  1283               	bcf	3,5	;RP0=0, select bank0
  5868  043D  1303               	bcf	3,6	;RP1=0, select bank0
  5869  043E  0861               	movf	_gesture_lr_delta_+1,w
  5870  043F  00A7               	movwf	_decodeGesture$418+1
  5871  0440  0860               	movf	_gesture_lr_delta_,w
  5872  0441  00A6               	movwf	_decodeGesture$418
  5873  0442                     l439:	
  5874  0442  0827               	movf	_decodeGesture$418+1,w
  5875  0443  3A80               	xorlw	128
  5876  0444  00F4               	movwf	??_decodeGesture
  5877  0445  0825               	movf	_decodeGesture$417+1,w
  5878  0446  3A80               	xorlw	128
  5879  0447  0274               	subwf	??_decodeGesture,w
  5880  0448  1D03               	skipz
  5881  0449  2C4C               	goto	u2965
  5882  044A  0824               	movf	_decodeGesture$417,w
  5883  044B  0226               	subwf	_decodeGesture$418,w
  5884  044C                     u2965:	
  5885  044C  1C03               	btfss	3,0
  5886  044D  2CFB               	goto	L19
  5887                           
  5888                           ;APDS9960.c: 818: } else {
  5889                           
  5890                           ;APDS9960.c: 817: gesture_motion_ = DIR_DOWN;
  5891  044E  2CA7               	goto	l2829
  5892  044F                     l2811:	
  5893                           ;APDS9960.c: 820: }
  5894                           ;APDS9960.c: 821: } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == -1) ) {
  5895                           
  5896                           ;APDS9960.c: 819: gesture_motion_ = DIR_LEFT;
  5897                           
  5898  044F  0A68               	incf	_gesture_ud_count_,w
  5899  0450  1D03               	skipz
  5900  0451  2CA9               	goto	l2831
  5901  0452  0A69               	incf	_gesture_ud_count_+1,w
  5902  0453  1D03               	btfss	3,2
  5903  0454  2CA9               	goto	l2831
  5904  0455  0A5E               	incf	_gesture_lr_count_,w
  5905  0456  1D03               	skipz
  5906  0457  2CA9               	goto	l2831
  5907  0458  0A5F               	incf	_gesture_lr_count_+1,w
  5908  0459  1D03               	btfss	3,2
  5909  045A  2CA9               	goto	l2831
  5910                           
  5911                           ;APDS9960.c: 822: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  5912  045B  086B               	movf	_gesture_ud_delta_+1,w
  5913  045C  3A80               	xorlw	128
  5914  045D  00FF               	movwf	127
  5915  045E  3080               	movlw	128
  5916  045F  027F               	subwf	127,w
  5917  0460  1D03               	skipz
  5918  0461  2C64               	goto	u2995
  5919  0462  3001               	movlw	1
  5920  0463  026A               	subwf	_gesture_ud_delta_,w
  5921  0464                     u2995:	
  5922  0464  1803               	skipnc
  5923  0465  2C74               	goto	l2819
  5924  0466  1283               	bcf	3,5	;RP0=0, select bank0
  5925  0467  1303               	bcf	3,6	;RP1=0, select bank0
  5926  0468  096A               	comf	_gesture_ud_delta_,w
  5927  0469  00F4               	movwf	??_decodeGesture
  5928  046A  096B               	comf	_gesture_ud_delta_+1,w
  5929  046B  00F5               	movwf	??_decodeGesture+1
  5930  046C  0AF4               	incf	??_decodeGesture,f
  5931  046D  1903               	skipnz
  5932  046E  0AF5               	incf	??_decodeGesture+1,f
  5933  046F  0874               	movf	??_decodeGesture,w
  5934  0470  00A8               	movwf	_decodeGesture$419
  5935  0471  0875               	movf	??_decodeGesture+1,w
  5936  0472  00A9               	movwf	_decodeGesture$419+1
  5937  0473  2C7A               	goto	l2821
  5938  0474                     l2819:	
  5939  0474  1283               	bcf	3,5	;RP0=0, select bank0
  5940  0475  1303               	bcf	3,6	;RP1=0, select bank0
  5941  0476  086B               	movf	_gesture_ud_delta_+1,w
  5942  0477  00A9               	movwf	_decodeGesture$419+1
  5943  0478  086A               	movf	_gesture_ud_delta_,w
  5944  0479  00A8               	movwf	_decodeGesture$419
  5945  047A                     l2821:	
  5946  047A  0861               	movf	_gesture_lr_delta_+1,w
  5947  047B  3A80               	xorlw	128
  5948  047C  00FF               	movwf	127
  5949  047D  3080               	movlw	128
  5950  047E  027F               	subwf	127,w
  5951  047F  1D03               	skipz
  5952  0480  2C83               	goto	u3005
  5953  0481  3001               	movlw	1
  5954  0482  0260               	subwf	_gesture_lr_delta_,w
  5955  0483                     u3005:	
  5956  0483  1803               	skipnc
  5957  0484  2C93               	goto	l2825
  5958  0485  1283               	bcf	3,5	;RP0=0, select bank0
  5959  0486  1303               	bcf	3,6	;RP1=0, select bank0
  5960  0487  0960               	comf	_gesture_lr_delta_,w
  5961  0488  00F4               	movwf	??_decodeGesture
  5962  0489  0961               	comf	_gesture_lr_delta_+1,w
  5963  048A  00F5               	movwf	??_decodeGesture+1
  5964  048B  0AF4               	incf	??_decodeGesture,f
  5965  048C  1903               	skipnz
  5966  048D  0AF5               	incf	??_decodeGesture+1,f
  5967  048E  0874               	movf	??_decodeGesture,w
  5968  048F  00AA               	movwf	_decodeGesture$420
  5969  0490  0875               	movf	??_decodeGesture+1,w
  5970  0491  00AB               	movwf	_decodeGesture$420+1
  5971  0492  2C99               	goto	l451
  5972  0493                     l2825:	
  5973  0493  1283               	bcf	3,5	;RP0=0, select bank0
  5974  0494  1303               	bcf	3,6	;RP1=0, select bank0
  5975  0495  0861               	movf	_gesture_lr_delta_+1,w
  5976  0496  00AB               	movwf	_decodeGesture$420+1
  5977  0497  0860               	movf	_gesture_lr_delta_,w
  5978  0498  00AA               	movwf	_decodeGesture$420
  5979  0499                     l451:	
  5980  0499  082B               	movf	_decodeGesture$420+1,w
  5981  049A  3A80               	xorlw	128
  5982  049B  00F4               	movwf	??_decodeGesture
  5983  049C  0829               	movf	_decodeGesture$419+1,w
  5984  049D  3A80               	xorlw	128
  5985  049E  0274               	subwf	??_decodeGesture,w
  5986  049F  1D03               	skipz
  5987  04A0  2CA3               	goto	u3015
  5988  04A1  0828               	movf	_decodeGesture$419,w
  5989  04A2  022A               	subwf	_decodeGesture$420,w
  5990  04A3                     u3015:	
  5991  04A3  1803               	skipnc
  5992  04A4  2CA7               	goto	l2829
  5993  04A5                     L18:	
  5994                           
  5995                           ;APDS9960.c: 823: gesture_motion_ = DIR_UP;
  5996  04A5  3003               	movlw	3
  5997  04A6  2CFE               	goto	L17
  5998  04A7                     l2829:	
  5999                           ;APDS9960.c: 824: } else {
  6000                           
  6001                           
  6002                           ;APDS9960.c: 825: gesture_motion_ = DIR_LEFT;
  6003  04A7  3001               	movlw	1
  6004  04A8  2CFE               	goto	L17
  6005  04A9                     l2831:	
  6006                           ;APDS9960.c: 826: }
  6007                           ;APDS9960.c: 827: } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 1) ) {
  6008                           
  6009  04A9  0368               	decf	_gesture_ud_count_,w
  6010  04AA  0469               	iorwf	_gesture_ud_count_+1,w
  6011  04AB  1D03               	btfss	3,2
  6012  04AC  2D04               	goto	l2851
  6013  04AD  035E               	decf	_gesture_lr_count_,w
  6014  04AE  045F               	iorwf	_gesture_lr_count_+1,w
  6015  04AF  1D03               	btfss	3,2
  6016  04B0  2D04               	goto	l2851
  6017                           
  6018                           ;APDS9960.c: 828: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  6019  04B1  086B               	movf	_gesture_ud_delta_+1,w
  6020  04B2  3A80               	xorlw	128
  6021  04B3  00FF               	movwf	127
  6022  04B4  3080               	movlw	128
  6023  04B5  027F               	subwf	127,w
  6024  04B6  1D03               	skipz
  6025  04B7  2CBA               	goto	u3045
  6026  04B8  3001               	movlw	1
  6027  04B9  026A               	subwf	_gesture_ud_delta_,w
  6028  04BA                     u3045:	
  6029  04BA  1803               	skipnc
  6030  04BB  2CCA               	goto	l2839
  6031  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  6032  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  6033  04BE  096A               	comf	_gesture_ud_delta_,w
  6034  04BF  00F4               	movwf	??_decodeGesture
  6035  04C0  096B               	comf	_gesture_ud_delta_+1,w
  6036  04C1  00F5               	movwf	??_decodeGesture+1
  6037  04C2  0AF4               	incf	??_decodeGesture,f
  6038  04C3  1903               	skipnz
  6039  04C4  0AF5               	incf	??_decodeGesture+1,f
  6040  04C5  0874               	movf	??_decodeGesture,w
  6041  04C6  00AC               	movwf	_decodeGesture$421
  6042  04C7  0875               	movf	??_decodeGesture+1,w
  6043  04C8  00AD               	movwf	_decodeGesture$421+1
  6044  04C9  2CD0               	goto	l2841
  6045  04CA                     l2839:	
  6046  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  6047  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  6048  04CC  086B               	movf	_gesture_ud_delta_+1,w
  6049  04CD  00AD               	movwf	_decodeGesture$421+1
  6050  04CE  086A               	movf	_gesture_ud_delta_,w
  6051  04CF  00AC               	movwf	_decodeGesture$421
  6052  04D0                     l2841:	
  6053  04D0  0861               	movf	_gesture_lr_delta_+1,w
  6054  04D1  3A80               	xorlw	128
  6055  04D2  00FF               	movwf	127
  6056  04D3  3080               	movlw	128
  6057  04D4  027F               	subwf	127,w
  6058  04D5  1D03               	skipz
  6059  04D6  2CD9               	goto	u3055
  6060  04D7  3001               	movlw	1
  6061  04D8  0260               	subwf	_gesture_lr_delta_,w
  6062  04D9                     u3055:	
  6063  04D9  1803               	skipnc
  6064  04DA  2CE9               	goto	l2845
  6065  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  6066  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  6067  04DD  0960               	comf	_gesture_lr_delta_,w
  6068  04DE  00F4               	movwf	??_decodeGesture
  6069  04DF  0961               	comf	_gesture_lr_delta_+1,w
  6070  04E0  00F5               	movwf	??_decodeGesture+1
  6071  04E1  0AF4               	incf	??_decodeGesture,f
  6072  04E2  1903               	skipnz
  6073  04E3  0AF5               	incf	??_decodeGesture+1,f
  6074  04E4  0874               	movf	??_decodeGesture,w
  6075  04E5  00AE               	movwf	_decodeGesture$422
  6076  04E6  0875               	movf	??_decodeGesture+1,w
  6077  04E7  00AF               	movwf	_decodeGesture$422+1
  6078  04E8  2CEF               	goto	l463
  6079  04E9                     l2845:	
  6080  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  6081  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  6082  04EB  0861               	movf	_gesture_lr_delta_+1,w
  6083  04EC  00AF               	movwf	_decodeGesture$422+1
  6084  04ED  0860               	movf	_gesture_lr_delta_,w
  6085  04EE  00AE               	movwf	_decodeGesture$422
  6086  04EF                     l463:	
  6087  04EF  082F               	movf	_decodeGesture$422+1,w
  6088  04F0  3A80               	xorlw	128
  6089  04F1  00F4               	movwf	??_decodeGesture
  6090  04F2  082D               	movf	_decodeGesture$421+1,w
  6091  04F3  3A80               	xorlw	128
  6092  04F4  0274               	subwf	??_decodeGesture,w
  6093  04F5  1D03               	skipz
  6094  04F6  2CF9               	goto	u3065
  6095  04F7  082C               	movf	_decodeGesture$421,w
  6096  04F8  022E               	subwf	_decodeGesture$422,w
  6097  04F9                     u3065:	
  6098  04F9  1803               	skipnc
  6099  04FA  2CFD               	goto	l2849
  6100  04FB                     L19:	
  6101                           
  6102                           ;APDS9960.c: 829: gesture_motion_ = DIR_DOWN;
  6103  04FB  3004               	movlw	4
  6104  04FC  2CFE               	goto	L17
  6105  04FD                     l2849:	
  6106                           ;APDS9960.c: 830: } else {
  6107                           
  6108                           
  6109                           ;APDS9960.c: 831: gesture_motion_ = DIR_RIGHT;
  6110  04FD  3002               	movlw	2
  6111  04FE                     L17:	
  6112  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  6113  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  6114  0500                     L16:	
  6115  0500  00E2               	movwf	_gesture_motion_
  6116  0501  3000               	movlw	0
  6117  0502  00E3               	movwf	_gesture_motion_+1
  6118                           
  6119                           ;APDS9960.c: 832: }
  6120                           ;APDS9960.c: 833: } else {
  6121  0503  2D06               	goto	l2855
  6122  0504                     l2851:	
  6123                           
  6124                           ;APDS9960.c: 834: return 0;
  6125  0504  3000               	movlw	0
  6126  0505  0008               	return
  6127  0506                     l2855:	
  6128                           
  6129                           ;APDS9960.c: 835: }
  6130                           ;APDS9960.c: 837: return 1;
  6131  0506  3001               	movlw	1
  6132  0507  0008               	return
  6133  0508                     __end_of_decodeGesture:	
  6134                           
  6135                           	psect	text25
  6136  0C30                     __ptext25:	
  6137 ;; *************** function _lcd_putstr *****************
  6138 ;; Defined at:
  6139 ;;		line 241 in file "lcd.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  csz_string      1    wreg     PTR const unsigned char 
  6142 ;;		 -> STR_12(5), STR_11(4), STR_10(5), STR_9(6), 
  6143 ;;		 -> STR_8(5), STR_7(5), STR_6(3), STR_5(9), 
  6144 ;;		 -> STR_4(14), STR_3(6), STR_2(11), STR_1(13), 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  csz_string      1    6[BANK0 ] PTR const unsigned char 
  6147 ;;		 -> STR_12(5), STR_11(4), STR_10(5), STR_9(6), 
  6148 ;;		 -> STR_8(5), STR_7(5), STR_6(3), STR_5(9), 
  6149 ;;		 -> STR_4(14), STR_3(6), STR_2(11), STR_1(13), 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;		None               void
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6159 ;;      Params:         0       0       0       0       0
  6160 ;;      Locals:         0       1       0       0       0
  6161 ;;      Temps:          0       1       0       0       0
  6162 ;;      Totals:         0       2       0       0       0
  6163 ;;Total ram usage:        2 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    4
  6166 ;; This function calls:
  6167 ;;		_lcd_2ndline
  6168 ;;		_lcd_putchar
  6169 ;; This function is called by:
  6170 ;;		_main
  6171 ;;		_handleGesture
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           
  6176                           ;psect for function _lcd_putstr
  6177  0C30                     _lcd_putstr:	
  6178                           
  6179                           ;incstack = 0
  6180                           ; Regs used in _lcd_putstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6181                           ;lcd_putstr@csz_string stored from wreg
  6182  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  6183  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  6184  0C32  00A6               	movwf	lcd_putstr@csz_string
  6185  0C33                     l3997:	
  6186                           ;lcd.c: 244: while (*csz_string != '\0') {
  6187                           
  6188  0C33  0826               	movf	lcd_putstr@csz_string,w
  6189  0C34  0084               	movwf	4
  6190  0C35  120A  158A  2000  120A  158A  	fcall	stringdir
  6191  0C3A  3A00               	xorlw	0
  6192  0C3B  1903               	btfsc	3,2
  6193  0C3C  0008               	return
  6194                           
  6195                           ;lcd.c: 247: if (*csz_string == '\n' || *csz_string == '\r') {
  6196  0C3D  0826               	movf	lcd_putstr@csz_string,w
  6197  0C3E  0084               	movwf	4
  6198  0C3F  120A  158A  2000  120A  158A  	fcall	stringdir
  6199  0C44  3A0A               	xorlw	10
  6200  0C45  1903               	skipnz
  6201  0C46  2C51               	goto	l3991
  6202  0C47  0826               	movf	lcd_putstr@csz_string,w
  6203  0C48  0084               	movwf	4
  6204  0C49  120A  158A  2000  120A  158A  	fcall	stringdir
  6205  0C4E  3A0D               	xorlw	13
  6206  0C4F  1D03               	skipz
  6207  0C50  2C57               	goto	l3993
  6208  0C51                     l3991:	
  6209                           
  6210                           ;lcd.c: 248: lcd_2ndline();
  6211  0C51  160A  118A  27B7  120A  158A  	fcall	_lcd_2ndline
  6212                           
  6213                           ;lcd.c: 249: }
  6214  0C56  2C65               	goto	l3995
  6215  0C57                     l3993:	
  6216                           
  6217                           ;lcd.c: 252: else {
  6218                           ;lcd.c: 253: lcd_putchar(*csz_string);
  6219  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  6220  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  6221  0C59  0826               	movf	lcd_putstr@csz_string,w
  6222  0C5A  0084               	movwf	4
  6223  0C5B  120A  158A  2000  120A  158A  	fcall	stringdir
  6224  0C60  160A  118A  27C2  120A  158A  	fcall	_lcd_putchar
  6225  0C65                     l3995:	
  6226                           
  6227                           ;lcd.c: 254: }
  6228                           ;lcd.c: 257: csz_string++;
  6229  0C65  3001               	movlw	1
  6230  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  6231  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  6232  0C68  00A5               	movwf	??_lcd_putstr
  6233  0C69  0825               	movf	??_lcd_putstr,w
  6234  0C6A  07A6               	addwf	lcd_putstr@csz_string,f
  6235  0C6B  2C33               	goto	l3997
  6236  0C6C                     __end_of_lcd_putstr:	
  6237                           
  6238                           	psect	text26
  6239  17C2                     __ptext26:	
  6240 ;; *************** function _lcd_putchar *****************
  6241 ;; Defined at:
  6242 ;;		line 220 in file "lcd.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  c_data          1    wreg     unsigned char 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  c_data          1    4[BANK0 ] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;		None               void
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, pclath, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6256 ;;      Params:         0       0       0       0       0
  6257 ;;      Locals:         0       1       0       0       0
  6258 ;;      Temps:          0       1       0       0       0
  6259 ;;      Totals:         0       2       0       0       0
  6260 ;;Total ram usage:        2 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    3
  6263 ;; This function calls:
  6264 ;;		_send_lcd_data
  6265 ;; This function is called by:
  6266 ;;		_lcd_putstr
  6267 ;;		_lcd_bcd
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           
  6272                           ;psect for function _lcd_putchar
  6273  17C2                     _lcd_putchar:	
  6274                           
  6275                           ;incstack = 0
  6276                           ; Regs used in _lcd_putchar: [wreg+status,2+status,0+pclath+cstack]
  6277                           ;lcd_putchar@c_data stored from wreg
  6278  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  6279  17C3  1303               	bcf	3,6	;RP1=0, select bank0
  6280  17C4  00A4               	movwf	lcd_putchar@c_data
  6281                           
  6282                           ;lcd.c: 223: send_lcd_data(1, (unsigned char)c_data);
  6283  17C5  0824               	movf	lcd_putchar@c_data,w
  6284  17C6  00A3               	movwf	??_lcd_putchar
  6285  17C7  0823               	movf	??_lcd_putchar,w
  6286  17C8  00F5               	movwf	send_lcd_data@uc_data
  6287  17C9  3001               	movlw	1
  6288  17CA  120A  158A  237F   	fcall	_send_lcd_data
  6289  17CD  0008               	return
  6290  17CE                     __end_of_lcd_putchar:	
  6291                           
  6292                           	psect	text27
  6293  17B7                     __ptext27:	
  6294 ;; *************** function _lcd_2ndline *****************
  6295 ;; Defined at:
  6296 ;;		line 178 in file "lcd.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;		None               void
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0, pclath, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6310 ;;      Params:         0       0       0       0       0
  6311 ;;      Locals:         0       0       0       0       0
  6312 ;;      Temps:          0       1       0       0       0
  6313 ;;      Totals:         0       1       0       0       0
  6314 ;;Total ram usage:        1 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    3
  6317 ;; This function calls:
  6318 ;;		_send_lcd_data
  6319 ;; This function is called by:
  6320 ;;		_lcd_putstr
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _lcd_2ndline
  6326  17B7                     _lcd_2ndline:	
  6327                           
  6328                           ;lcd.c: 181: send_lcd_data(0, 0b10000000 | 0x40);
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _lcd_2ndline: [wreg+status,2+status,0+pclath+cstack]
  6332  17B7  30C0               	movlw	192
  6333  17B8  1283               	bcf	3,5	;RP0=0, select bank0
  6334  17B9  1303               	bcf	3,6	;RP1=0, select bank0
  6335  17BA  00A3               	movwf	??_lcd_2ndline
  6336  17BB  0823               	movf	??_lcd_2ndline,w
  6337  17BC  00F5               	movwf	send_lcd_data@uc_data
  6338  17BD  3000               	movlw	0
  6339  17BE  120A  158A  237F   	fcall	_send_lcd_data
  6340  17C1  0008               	return
  6341  17C2                     __end_of_lcd_2ndline:	
  6342                           
  6343                           	psect	text28
  6344  17AC                     __ptext28:	
  6345 ;; *************** function _lcd_home *****************
  6346 ;; Defined at:
  6347 ;;		line 157 in file "lcd.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, status,0, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6361 ;;      Params:         0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0
  6363 ;;      Temps:          0       1       0       0       0
  6364 ;;      Totals:         0       1       0       0       0
  6365 ;;Total ram usage:        1 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    3
  6368 ;; This function calls:
  6369 ;;		_send_lcd_data
  6370 ;; This function is called by:
  6371 ;;		_main
  6372 ;;		_handleGesture
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           
  6377                           ;psect for function _lcd_home
  6378  17AC                     _lcd_home:	
  6379                           
  6380                           ;lcd.c: 160: send_lcd_data(0, 0b00000010);
  6381                           
  6382                           ;incstack = 0
  6383                           ; Regs used in _lcd_home: [wreg+status,2+status,0+pclath+cstack]
  6384  17AC  3002               	movlw	2
  6385  17AD  1283               	bcf	3,5	;RP0=0, select bank0
  6386  17AE  1303               	bcf	3,6	;RP1=0, select bank0
  6387  17AF  00A3               	movwf	??_lcd_home
  6388  17B0  0823               	movf	??_lcd_home,w
  6389  17B1  00F5               	movwf	send_lcd_data@uc_data
  6390  17B2  3000               	movlw	0
  6391  17B3  120A  158A  237F   	fcall	_send_lcd_data
  6392  17B6  0008               	return
  6393  17B7                     __end_of_lcd_home:	
  6394                           
  6395                           	psect	text29
  6396  177C                     __ptext29:	
  6397 ;; *************** function _lcd_clear *****************
  6398 ;; Defined at:
  6399 ;;		line 136 in file "lcd.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;		None               void
  6406 ;; Registers used:
  6407 ;;		wreg, status,2, status,0, pclath, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6413 ;;      Params:         0       0       0       0       0
  6414 ;;      Locals:         0       0       0       0       0
  6415 ;;      Temps:          0       0       0       0       0
  6416 ;;      Totals:         0       0       0       0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    3
  6420 ;; This function calls:
  6421 ;;		_send_lcd_data
  6422 ;; This function is called by:
  6423 ;;		_main
  6424 ;;		_handleGesture
  6425 ;;		_lcd_initialize
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           
  6430                           ;psect for function _lcd_clear
  6431  177C                     _lcd_clear:	
  6432                           
  6433                           ;lcd.c: 139: send_lcd_data(0, 0b00000001);
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  6437  177C  01F5               	clrf	send_lcd_data@uc_data
  6438  177D  0AF5               	incf	send_lcd_data@uc_data,f
  6439  177E  3000               	movlw	0
  6440  177F  120A  158A  237F   	fcall	_send_lcd_data
  6441  1782  0008               	return
  6442  1783                     __end_of_lcd_clear:	
  6443                           
  6444                           	psect	text30
  6445  0B7F                     __ptext30:	
  6446 ;; *************** function _send_lcd_data *****************
  6447 ;; Defined at:
  6448 ;;		line 308 in file "lcd.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  b_rs            1    wreg     unsigned char 
  6451 ;;  uc_data         1    5[COMMON] unsigned char 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  b_rs            1    2[BANK0 ] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0, pclath, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6463 ;;      Params:         1       0       0       0       0
  6464 ;;      Locals:         0       1       0       0       0
  6465 ;;      Temps:          0       2       0       0       0
  6466 ;;      Totals:         1       3       0       0       0
  6467 ;;Total ram usage:        4 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    2
  6470 ;; This function calls:
  6471 ;;		_set_lcd_data
  6472 ;;		_set_lcd_e
  6473 ;;		_set_lcd_rs
  6474 ;; This function is called by:
  6475 ;;		_lcd_initialize
  6476 ;;		_lcd_clear
  6477 ;;		_lcd_home
  6478 ;;		_lcd_2ndline
  6479 ;;		_lcd_goto
  6480 ;;		_lcd_putchar
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _send_lcd_data
  6486  0B7F                     _send_lcd_data:	
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _send_lcd_data: [wreg+status,2+status,0+pclath+cstack]
  6490                           ;send_lcd_data@b_rs stored from wreg
  6491  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  6492  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  6493  0B81  00A2               	movwf	send_lcd_data@b_rs
  6494                           
  6495                           ;lcd.c: 311: set_lcd_rs(b_rs);
  6496  0B82  0822               	movf	send_lcd_data@b_rs,w
  6497  0B83  160A  118A  27A1  120A  158A  	fcall	_set_lcd_rs
  6498                           
  6499                           ;lcd.c: 312: set_lcd_data(uc_data);
  6500  0B88  0875               	movf	send_lcd_data@uc_data,w
  6501  0B89  160A  118A  276F  120A  158A  	fcall	_set_lcd_data
  6502                           
  6503                           ;lcd.c: 315: set_lcd_e(1);
  6504  0B8E  3001               	movlw	1
  6505  0B8F  160A  118A  2796  120A  158A  	fcall	_set_lcd_e
  6506                           
  6507                           ;lcd.c: 316: _delay((unsigned long)((1)*(20000000/4000.0)));
  6508  0B94  3007               	movlw	7
  6509  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  6510  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  6511  0B97  00A1               	movwf	??_send_lcd_data+1
  6512  0B98  307D               	movlw	125
  6513  0B99  00A0               	movwf	??_send_lcd_data
  6514  0B9A                     u5627:	
  6515  0B9A  0BA0               	decfsz	??_send_lcd_data,f
  6516  0B9B  2B9A               	goto	u5627
  6517  0B9C  0BA1               	decfsz	??_send_lcd_data+1,f
  6518  0B9D  2B9A               	goto	u5627
  6519                           
  6520                           ;lcd.c: 317: set_lcd_e(0);
  6521  0B9E  3000               	movlw	0
  6522  0B9F  160A  118A  2796  120A  158A  	fcall	_set_lcd_e
  6523                           
  6524                           ;lcd.c: 318: _delay((unsigned long)((2)*(20000000/4000.0)));
  6525  0BA4  300D               	movlw	13
  6526  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  6527  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  6528  0BA7  00A1               	movwf	??_send_lcd_data+1
  6529  0BA8  30FB               	movlw	251
  6530  0BA9  00A0               	movwf	??_send_lcd_data
  6531  0BAA                     u5637:	
  6532  0BAA  0BA0               	decfsz	??_send_lcd_data,f
  6533  0BAB  2BAA               	goto	u5637
  6534  0BAC  0BA1               	decfsz	??_send_lcd_data+1,f
  6535  0BAD  2BAA               	goto	u5637
  6536  0BAE  2BAF               	nop2
  6537                           
  6538                           ;lcd.c: 321: set_lcd_rs(0);
  6539  0BAF  3000               	movlw	0
  6540  0BB0  160A  118A  27A1  120A  158A  	fcall	_set_lcd_rs
  6541                           
  6542                           ;lcd.c: 322: set_lcd_data(0);
  6543  0BB5  3000               	movlw	0
  6544  0BB6  160A  118A  276F   	fcall	_set_lcd_data
  6545  0BB9  0008               	return
  6546  0BBA                     __end_of_send_lcd_data:	
  6547                           
  6548                           	psect	text31
  6549  17A1                     __ptext31:	
  6550 ;; *************** function _set_lcd_rs *****************
  6551 ;; Defined at:
  6552 ;;		line 360 in file "lcd.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  b_output        1    wreg     unsigned char 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  b_output        1    4[COMMON] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;		None               void
  6559 ;; Registers used:
  6560 ;;		wreg
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6566 ;;      Params:         0       0       0       0       0
  6567 ;;      Locals:         1       0       0       0       0
  6568 ;;      Temps:          0       0       0       0       0
  6569 ;;      Totals:         1       0       0       0       0
  6570 ;;Total ram usage:        1 bytes
  6571 ;; Hardware stack levels used:    1
  6572 ;; Hardware stack levels required when called:    1
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_send_lcd_data
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _set_lcd_rs
  6582  17A1                     _set_lcd_rs:	
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in _set_lcd_rs: [wreg]
  6586                           ;set_lcd_rs@b_output stored from wreg
  6587  17A1  00F4               	movwf	set_lcd_rs@b_output
  6588                           
  6589                           ;lcd.c: 362: RB4 = b_output;
  6590  17A2  1C74               	btfss	set_lcd_rs@b_output,0
  6591  17A3  2FA8               	goto	u4100
  6592  17A4  1283               	bcf	3,5	;RP0=0, select bank0
  6593  17A5  1303               	bcf	3,6	;RP1=0, select bank0
  6594  17A6  1606               	bsf	6,4	;volatile
  6595  17A7  0008               	return
  6596  17A8                     u4100:	
  6597  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  6598  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  6599  17AA  1206               	bcf	6,4	;volatile
  6600  17AB  0008               	return
  6601  17AC                     __end_of_set_lcd_rs:	
  6602                           
  6603                           	psect	text32
  6604  1796                     __ptext32:	
  6605 ;; *************** function _set_lcd_e *****************
  6606 ;; Defined at:
  6607 ;;		line 340 in file "lcd.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  b_output        1    wreg     unsigned char 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  b_output        1    4[COMMON] unsigned char 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;		None               void
  6614 ;; Registers used:
  6615 ;;		wreg
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6621 ;;      Params:         0       0       0       0       0
  6622 ;;      Locals:         1       0       0       0       0
  6623 ;;      Temps:          0       0       0       0       0
  6624 ;;      Totals:         1       0       0       0       0
  6625 ;;Total ram usage:        1 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    1
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_lcd_initialize
  6632 ;;		_send_lcd_data
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _set_lcd_e
  6638  1796                     _set_lcd_e:	
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _set_lcd_e: [wreg]
  6642                           ;set_lcd_e@b_output stored from wreg
  6643  1796  00F4               	movwf	set_lcd_e@b_output
  6644                           
  6645                           ;lcd.c: 342: RB5 = b_output;
  6646  1797  1C74               	btfss	set_lcd_e@b_output,0
  6647  1798  2F9D               	goto	u4080
  6648  1799  1283               	bcf	3,5	;RP0=0, select bank0
  6649  179A  1303               	bcf	3,6	;RP1=0, select bank0
  6650  179B  1686               	bsf	6,5	;volatile
  6651  179C  0008               	return
  6652  179D                     u4080:	
  6653  179D  1283               	bcf	3,5	;RP0=0, select bank0
  6654  179E  1303               	bcf	3,6	;RP1=0, select bank0
  6655  179F  1286               	bcf	6,5	;volatile
  6656  17A0  0008               	return
  6657  17A1                     __end_of_set_lcd_e:	
  6658                           
  6659                           	psect	text33
  6660  176F                     __ptext33:	
  6661 ;; *************** function _set_lcd_data *****************
  6662 ;; Defined at:
  6663 ;;		line 380 in file "lcd.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  uc_data         1    wreg     unsigned char 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  uc_data         1    4[COMMON] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6677 ;;      Params:         0       0       0       0       0
  6678 ;;      Locals:         1       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0
  6680 ;;      Totals:         1       0       0       0       0
  6681 ;;Total ram usage:        1 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    1
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_send_lcd_data
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _set_lcd_data
  6693  176F                     _set_lcd_data:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _set_lcd_data: [wreg]
  6697                           ;set_lcd_data@uc_data stored from wreg
  6698  176F  00F4               	movwf	set_lcd_data@uc_data
  6699                           
  6700                           ;lcd.c: 382: PORTD = uc_data;
  6701  1770  0874               	movf	set_lcd_data@uc_data,w
  6702  1771  1283               	bcf	3,5	;RP0=0, select bank0
  6703  1772  1303               	bcf	3,6	;RP1=0, select bank0
  6704  1773  0088               	movwf	8	;volatile
  6705  1774  0008               	return
  6706  1775                     __end_of_set_lcd_data:	
  6707                           
  6708                           	psect	text34
  6709  0D82                     __ptext34:	
  6710 ;; *************** function _enableGestureSensor *****************
  6711 ;; Defined at:
  6712 ;;		line 403 in file "APDS9960.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  interrupts      1    wreg     unsigned char 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  interrupts      1   18[BANK0 ] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      unsigned char 
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, status,0, pclath, cstack
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6726 ;;      Params:         0       0       0       0       0
  6727 ;;      Locals:         0       1       0       0       0
  6728 ;;      Temps:          0       1       0       0       0
  6729 ;;      Totals:         0       2       0       0       0
  6730 ;;Total ram usage:        2 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    6
  6733 ;; This function calls:
  6734 ;;		_enablePower
  6735 ;;		_resetGestureParameters
  6736 ;;		_setGestureIntEnable
  6737 ;;		_setGestureMode
  6738 ;;		_setLEDBoost
  6739 ;;		_setMode
  6740 ;;		_wireWriteDataByte
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           
  6747                           ;psect for function _enableGestureSensor
  6748  0D82                     _enableGestureSensor:	
  6749                           
  6750                           ;incstack = 0
  6751                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  6752                           ;enableGestureSensor@interrupts stored from wreg
  6753  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  6754  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  6755  0D84  00B2               	movwf	enableGestureSensor@interrupts
  6756                           
  6757                           ;APDS9960.c: 412: resetGestureParameters();
  6758  0D85  120A  158A  2085  120A  158A  	fcall	_resetGestureParameters
  6759                           
  6760                           ;APDS9960.c: 413: if( !wireWriteDataByte(0x83, 0xFF) ) {
  6761  0D8A  30FF               	movlw	255
  6762  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  6763  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  6764  0D8D  00B1               	movwf	??_enableGestureSensor
  6765  0D8E  0831               	movf	??_enableGestureSensor,w
  6766  0D8F  00A0               	movwf	wireWriteDataByte@val
  6767  0D90  3083               	movlw	131
  6768  0D91  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  6769  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  6770  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  6771  0D98  0820               	movf	?_wireWriteDataByte,w
  6772  0D99  0421               	iorwf	?_wireWriteDataByte+1,w
  6773  0D9A  1D03               	btfss	3,2
  6774  0D9B  2D9E               	goto	l4477
  6775                           
  6776                           ;APDS9960.c: 414: return 0;
  6777  0D9C  3000               	movlw	0
  6778  0D9D  0008               	return
  6779  0D9E                     l4477:	
  6780                           
  6781                           ;APDS9960.c: 415: }
  6782                           ;APDS9960.c: 416: if( !wireWriteDataByte(0x8E, 0x89) ) {
  6783  0D9E  3089               	movlw	137
  6784  0D9F  00B1               	movwf	??_enableGestureSensor
  6785  0DA0  0831               	movf	??_enableGestureSensor,w
  6786  0DA1  00A0               	movwf	wireWriteDataByte@val
  6787  0DA2  308E               	movlw	142
  6788  0DA3  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  6789  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  6790  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  6791  0DAA  0820               	movf	?_wireWriteDataByte,w
  6792  0DAB  0421               	iorwf	?_wireWriteDataByte+1,w
  6793  0DAC  1D03               	btfss	3,2
  6794  0DAD  2DB0               	goto	l4483
  6795                           
  6796                           ;APDS9960.c: 417: return 0;
  6797  0DAE  3000               	movlw	0
  6798  0DAF  0008               	return
  6799  0DB0                     l4483:	
  6800                           
  6801                           ;APDS9960.c: 418: }
  6802                           ;APDS9960.c: 419: if( !setLEDBoost(3) ) {
  6803  0DB0  3003               	movlw	3
  6804  0DB1  120A  158A  2344  120A  158A  	fcall	_setLEDBoost
  6805  0DB6  3A00               	xorlw	0
  6806  0DB7  1D03               	skipz
  6807  0DB8  2DBB               	goto	l4489
  6808                           
  6809                           ;APDS9960.c: 420: return 0;
  6810  0DB9  3000               	movlw	0
  6811  0DBA  0008               	return
  6812  0DBB                     l4489:	
  6813                           
  6814                           ;APDS9960.c: 421: }
  6815                           ;APDS9960.c: 422: if( interrupts ) {
  6816  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6817  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6818  0DBD  0832               	movf	enableGestureSensor@interrupts,w
  6819  0DBE  1903               	btfsc	3,2
  6820  0DBF  2DCB               	goto	l4497
  6821                           
  6822                           ;APDS9960.c: 423: if( !setGestureIntEnable(1) ) {
  6823  0DC0  3001               	movlw	1
  6824  0DC1  120A  158A  22A0  120A  158A  	fcall	_setGestureIntEnable
  6825  0DC6  3A00               	xorlw	0
  6826  0DC7  1D03               	skipz
  6827  0DC8  2DD6               	goto	l4503
  6828                           
  6829                           ;APDS9960.c: 424: return 0;
  6830  0DC9  3000               	movlw	0
  6831  0DCA  0008               	return
  6832  0DCB                     l4497:	
  6833                           ;APDS9960.c: 425: }
  6834                           ;APDS9960.c: 426: } else {
  6835                           
  6836                           
  6837                           ;APDS9960.c: 427: if( !setGestureIntEnable(0) ) {
  6838  0DCB  3000               	movlw	0
  6839  0DCC  120A  158A  22A0  120A  158A  	fcall	_setGestureIntEnable
  6840  0DD1  3A00               	xorlw	0
  6841  0DD2  1D03               	skipz
  6842  0DD3  2DD6               	goto	l4503
  6843                           
  6844                           ;APDS9960.c: 428: return 0;
  6845  0DD4  3000               	movlw	0
  6846  0DD5  0008               	return
  6847  0DD6                     l4503:	
  6848                           
  6849                           ;APDS9960.c: 429: }
  6850                           ;APDS9960.c: 430: }
  6851                           ;APDS9960.c: 431: if( !setGestureMode(1) ) {
  6852  0DD6  3001               	movlw	1
  6853  0DD7  120A  158A  2184  120A  158A  	fcall	_setGestureMode
  6854  0DDC  3A00               	xorlw	0
  6855  0DDD  1D03               	skipz
  6856  0DDE  2DE1               	goto	l4509
  6857                           
  6858                           ;APDS9960.c: 432: return 0;
  6859  0DDF  3000               	movlw	0
  6860  0DE0  0008               	return
  6861  0DE1                     l4509:	
  6862                           
  6863                           ;APDS9960.c: 433: }
  6864                           ;APDS9960.c: 434: if( !enablePower() ){
  6865  0DE1  160A  118A  27DB  120A  158A  	fcall	_enablePower
  6866  0DE6  3A00               	xorlw	0
  6867  0DE7  1D03               	skipz
  6868  0DE8  2DEB               	goto	l4515
  6869                           
  6870                           ;APDS9960.c: 435: return 0;
  6871  0DE9  3000               	movlw	0
  6872  0DEA  0008               	return
  6873  0DEB                     l4515:	
  6874                           
  6875                           ;APDS9960.c: 436: }
  6876                           ;APDS9960.c: 437: if( !setMode(3, 1) ) {
  6877  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  6878  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  6879  0DED  01AC               	clrf	setMode@enable
  6880  0DEE  0AAC               	incf	setMode@enable,f
  6881  0DEF  3003               	movlw	3
  6882  0DF0  120A  158A  24C7  120A  158A  	fcall	_setMode
  6883  0DF5  3A00               	xorlw	0
  6884  0DF6  1D03               	skipz
  6885  0DF7  2DFA               	goto	l4521
  6886                           
  6887                           ;APDS9960.c: 438: return 0;
  6888  0DF8  3000               	movlw	0
  6889  0DF9  0008               	return
  6890  0DFA                     l4521:	
  6891                           
  6892                           ;APDS9960.c: 439: }
  6893                           ;APDS9960.c: 440: if( !setMode(2, 1) ) {
  6894  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  6895  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  6896  0DFC  01AC               	clrf	setMode@enable
  6897  0DFD  0AAC               	incf	setMode@enable,f
  6898  0DFE  3002               	movlw	2
  6899  0DFF  120A  158A  24C7  120A  158A  	fcall	_setMode
  6900  0E04  3A00               	xorlw	0
  6901  0E05  1D03               	skipz
  6902  0E06  2E09               	goto	l4527
  6903                           
  6904                           ;APDS9960.c: 441: return 0;
  6905  0E07  3000               	movlw	0
  6906  0E08  0008               	return
  6907  0E09                     l4527:	
  6908                           
  6909                           ;APDS9960.c: 442: }
  6910                           ;APDS9960.c: 443: if( !setMode(6, 1) ) {
  6911  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  6913  0E0B  01AC               	clrf	setMode@enable
  6914  0E0C  0AAC               	incf	setMode@enable,f
  6915  0E0D  3006               	movlw	6
  6916  0E0E  120A  158A  24C7  120A  158A  	fcall	_setMode
  6917  0E13  3A00               	xorlw	0
  6918  0E14  1D03               	skipz
  6919  0E15  2E18               	goto	l4533
  6920                           
  6921                           ;APDS9960.c: 444: return 0;
  6922  0E16  3000               	movlw	0
  6923  0E17  0008               	return
  6924  0E18                     l4533:	
  6925                           
  6926                           ;APDS9960.c: 445: }
  6927                           ;APDS9960.c: 447: return 1;
  6928  0E18  3001               	movlw	1
  6929  0E19  0008               	return
  6930  0E1A                     __end_of_enableGestureSensor:	
  6931                           
  6932                           	psect	text35
  6933  0B44                     __ptext35:	
  6934 ;; *************** function _setLEDBoost *****************
  6935 ;; Defined at:
  6936 ;;		line 478 in file "APDS9960.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  boost           1    wreg     unsigned char 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;  boost           1   13[BANK0 ] unsigned char 
  6941 ;;  val             1   12[BANK0 ] unsigned char 
  6942 ;; Return value:  Size  Location     Type
  6943 ;;                  1    wreg      unsigned char 
  6944 ;; Registers used:
  6945 ;;		wreg, status,2, status,0, pclath, cstack
  6946 ;; Tracked objects:
  6947 ;;		On entry : 0/0
  6948 ;;		On exit  : 0/0
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6951 ;;      Params:         0       0       0       0       0
  6952 ;;      Locals:         0       2       0       0       0
  6953 ;;      Temps:          0       2       0       0       0
  6954 ;;      Totals:         0       4       0       0       0
  6955 ;;Total ram usage:        4 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; Hardware stack levels required when called:    3
  6958 ;; This function calls:
  6959 ;;		_wireReadDataByte
  6960 ;;		_wireWriteDataByte
  6961 ;; This function is called by:
  6962 ;;		_enableGestureSensor
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _setLEDBoost
  6968  0B44                     _setLEDBoost:	
  6969                           
  6970                           ;incstack = 0
  6971                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  6972                           ;setLEDBoost@boost stored from wreg
  6973  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  6974  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  6975  0B46  00AD               	movwf	setLEDBoost@boost
  6976                           
  6977                           ;APDS9960.c: 480: uint8_t val;
  6978                           ;APDS9960.c: 483: val=wireReadDataByte(0x90);
  6979  0B47  3090               	movlw	144
  6980  0B48  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  6981  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  6982  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  6983  0B4F  00AA               	movwf	??_setLEDBoost
  6984  0B50  082A               	movf	??_setLEDBoost,w
  6985  0B51  00AC               	movwf	setLEDBoost@val
  6986                           
  6987                           ;APDS9960.c: 486: boost &= 0b00000011;
  6988  0B52  3003               	movlw	3
  6989  0B53  00AA               	movwf	??_setLEDBoost
  6990  0B54  082A               	movf	??_setLEDBoost,w
  6991  0B55  05AD               	andwf	setLEDBoost@boost,f
  6992                           
  6993                           ;APDS9960.c: 487: boost = boost << 4;
  6994  0B56  082D               	movf	setLEDBoost@boost,w
  6995  0B57  00AA               	movwf	??_setLEDBoost
  6996  0B58  3003               	movlw	3
  6997  0B59                     u4995:	
  6998  0B59  1003               	clrc
  6999  0B5A  0DAA               	rlf	??_setLEDBoost,f
  7000  0B5B  3EFF               	addlw	-1
  7001  0B5C  1D03               	skipz
  7002  0B5D  2B59               	goto	u4995
  7003  0B5E  1003               	clrc
  7004  0B5F  0D2A               	rlf	??_setLEDBoost,w
  7005  0B60  00AB               	movwf	??_setLEDBoost+1
  7006  0B61  082B               	movf	??_setLEDBoost+1,w
  7007  0B62  00AD               	movwf	setLEDBoost@boost
  7008                           
  7009                           ;APDS9960.c: 488: val &= 0b11001111;
  7010  0B63  30CF               	movlw	207
  7011  0B64  00AA               	movwf	??_setLEDBoost
  7012  0B65  082A               	movf	??_setLEDBoost,w
  7013  0B66  05AC               	andwf	setLEDBoost@val,f
  7014                           
  7015                           ;APDS9960.c: 489: val |= boost;
  7016  0B67  082D               	movf	setLEDBoost@boost,w
  7017  0B68  00AA               	movwf	??_setLEDBoost
  7018  0B69  082A               	movf	??_setLEDBoost,w
  7019  0B6A  04AC               	iorwf	setLEDBoost@val,f
  7020                           
  7021                           ;APDS9960.c: 492: if( !wireWriteDataByte(0x90, val) ) {
  7022  0B6B  082C               	movf	setLEDBoost@val,w
  7023  0B6C  00AA               	movwf	??_setLEDBoost
  7024  0B6D  082A               	movf	??_setLEDBoost,w
  7025  0B6E  00A0               	movwf	wireWriteDataByte@val
  7026  0B6F  3090               	movlw	144
  7027  0B70  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  7028  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  7030  0B77  0820               	movf	?_wireWriteDataByte,w
  7031  0B78  0421               	iorwf	?_wireWriteDataByte+1,w
  7032  0B79  1D03               	btfss	3,2
  7033  0B7A  2B7D               	goto	l4269
  7034                           
  7035                           ;APDS9960.c: 493: return 0;
  7036  0B7B  3000               	movlw	0
  7037  0B7C  0008               	return
  7038  0B7D                     l4269:	
  7039                           
  7040                           ;APDS9960.c: 494: }
  7041                           ;APDS9960.c: 496: return 1;
  7042  0B7D  3001               	movlw	1
  7043  0B7E  0008               	return
  7044  0B7F                     __end_of_setLEDBoost:	
  7045                           
  7046                           	psect	text36
  7047  0984                     __ptext36:	
  7048 ;; *************** function _setGestureMode *****************
  7049 ;; Defined at:
  7050 ;;		line 500 in file "APDS9960.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  mode            1    wreg     unsigned char 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;  mode            1   11[BANK0 ] unsigned char 
  7055 ;;  val             1   12[BANK0 ] unsigned char 
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      unsigned char 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0, pclath, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7065 ;;      Params:         0       0       0       0       0
  7066 ;;      Locals:         0       2       0       0       0
  7067 ;;      Temps:          0       1       0       0       0
  7068 ;;      Totals:         0       3       0       0       0
  7069 ;;Total ram usage:        3 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    3
  7072 ;; This function calls:
  7073 ;;		_wireReadDataByte
  7074 ;;		_wireWriteDataByte
  7075 ;; This function is called by:
  7076 ;;		_enableGestureSensor
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _setGestureMode
  7082  0984                     _setGestureMode:	
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  7086                           ;setGestureMode@mode stored from wreg
  7087  0984  1283               	bcf	3,5	;RP0=0, select bank0
  7088  0985  1303               	bcf	3,6	;RP1=0, select bank0
  7089  0986  00AB               	movwf	setGestureMode@mode
  7090                           
  7091                           ;APDS9960.c: 502: uint8_t val;
  7092                           ;APDS9960.c: 505: val = wireReadDataByte(0xAB);
  7093  0987  30AB               	movlw	171
  7094  0988  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  7095  098D  1283               	bcf	3,5	;RP0=0, select bank0
  7096  098E  1303               	bcf	3,6	;RP1=0, select bank0
  7097  098F  00AA               	movwf	??_setGestureMode
  7098  0990  082A               	movf	??_setGestureMode,w
  7099  0991  00AC               	movwf	setGestureMode@val
  7100                           
  7101                           ;APDS9960.c: 508: mode &= 0b00000001;
  7102  0992  3001               	movlw	1
  7103  0993  00AA               	movwf	??_setGestureMode
  7104  0994  082A               	movf	??_setGestureMode,w
  7105  0995  05AB               	andwf	setGestureMode@mode,f
  7106                           
  7107                           ;APDS9960.c: 509: val &= 0b11111110;
  7108  0996  30FE               	movlw	254
  7109  0997  00AA               	movwf	??_setGestureMode
  7110  0998  082A               	movf	??_setGestureMode,w
  7111  0999  05AC               	andwf	setGestureMode@val,f
  7112                           
  7113                           ;APDS9960.c: 510: val |= mode;
  7114  099A  082B               	movf	setGestureMode@mode,w
  7115  099B  00AA               	movwf	??_setGestureMode
  7116  099C  082A               	movf	??_setGestureMode,w
  7117  099D  04AC               	iorwf	setGestureMode@val,f
  7118                           
  7119                           ;APDS9960.c: 513: if( !wireWriteDataByte(0xAB, val) ) {
  7120  099E  082C               	movf	setGestureMode@val,w
  7121  099F  00AA               	movwf	??_setGestureMode
  7122  09A0  082A               	movf	??_setGestureMode,w
  7123  09A1  00A0               	movwf	wireWriteDataByte@val
  7124  09A2  30AB               	movlw	171
  7125  09A3  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  7126  09A8  1283               	bcf	3,5	;RP0=0, select bank0
  7127  09A9  1303               	bcf	3,6	;RP1=0, select bank0
  7128  09AA  0820               	movf	?_wireWriteDataByte,w
  7129  09AB  0421               	iorwf	?_wireWriteDataByte+1,w
  7130  09AC  1D03               	btfss	3,2
  7131  09AD  29B0               	goto	l4287
  7132                           
  7133                           ;APDS9960.c: 514: return 0;
  7134  09AE  3000               	movlw	0
  7135  09AF  0008               	return
  7136  09B0                     l4287:	
  7137                           
  7138                           ;APDS9960.c: 515: }
  7139                           ;APDS9960.c: 517: return 1;
  7140  09B0  3001               	movlw	1
  7141  09B1  0008               	return
  7142  09B2                     __end_of_setGestureMode:	
  7143                           
  7144                           	psect	text37
  7145  0AA0                     __ptext37:	
  7146 ;; *************** function _setGestureIntEnable *****************
  7147 ;; Defined at:
  7148 ;;		line 381 in file "APDS9960.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  enable          1    wreg     unsigned char 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  enable          1   13[BANK0 ] unsigned char 
  7153 ;;  val             1   12[BANK0 ] unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      unsigned char 
  7156 ;; Registers used:
  7157 ;;		wreg, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7163 ;;      Params:         0       0       0       0       0
  7164 ;;      Locals:         0       2       0       0       0
  7165 ;;      Temps:          0       2       0       0       0
  7166 ;;      Totals:         0       4       0       0       0
  7167 ;;Total ram usage:        4 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    3
  7170 ;; This function calls:
  7171 ;;		_wireReadDataByte
  7172 ;;		_wireWriteDataByte
  7173 ;; This function is called by:
  7174 ;;		_initialize
  7175 ;;		_enableGestureSensor
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _setGestureIntEnable
  7181  0AA0                     _setGestureIntEnable:	
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  7185                           ;setGestureIntEnable@enable stored from wreg
  7186  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  7187  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  7188  0AA2  00AD               	movwf	setGestureIntEnable@enable
  7189                           
  7190                           ;APDS9960.c: 383: uint8_t val;
  7191                           ;APDS9960.c: 386: val = wireReadDataByte(0xAB);
  7192  0AA3  30AB               	movlw	171
  7193  0AA4  120A  158A  22D4  120A  158A  	fcall	_wireReadDataByte
  7194  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  7195  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  7196  0AAB  00AA               	movwf	??_setGestureIntEnable
  7197  0AAC  082A               	movf	??_setGestureIntEnable,w
  7198  0AAD  00AC               	movwf	setGestureIntEnable@val
  7199                           
  7200                           ;APDS9960.c: 389: enable &= 0b00000001;
  7201  0AAE  3001               	movlw	1
  7202  0AAF  00AA               	movwf	??_setGestureIntEnable
  7203  0AB0  082A               	movf	??_setGestureIntEnable,w
  7204  0AB1  05AD               	andwf	setGestureIntEnable@enable,f
  7205                           
  7206                           ;APDS9960.c: 390: enable = enable << 1;
  7207  0AB2  082D               	movf	setGestureIntEnable@enable,w
  7208  0AB3  00AA               	movwf	??_setGestureIntEnable
  7209  0AB4  072A               	addwf	??_setGestureIntEnable,w
  7210  0AB5  00AB               	movwf	??_setGestureIntEnable+1
  7211  0AB6  082B               	movf	??_setGestureIntEnable+1,w
  7212  0AB7  00AD               	movwf	setGestureIntEnable@enable
  7213                           
  7214                           ;APDS9960.c: 391: val &= 0b11111101;
  7215  0AB8  30FD               	movlw	253
  7216  0AB9  00AA               	movwf	??_setGestureIntEnable
  7217  0ABA  082A               	movf	??_setGestureIntEnable,w
  7218  0ABB  05AC               	andwf	setGestureIntEnable@val,f
  7219                           
  7220                           ;APDS9960.c: 392: val |= enable;
  7221  0ABC  082D               	movf	setGestureIntEnable@enable,w
  7222  0ABD  00AA               	movwf	??_setGestureIntEnable
  7223  0ABE  082A               	movf	??_setGestureIntEnable,w
  7224  0ABF  04AC               	iorwf	setGestureIntEnable@val,f
  7225                           
  7226                           ;APDS9960.c: 395: if( !wireWriteDataByte(0xAB, val) ) {
  7227  0AC0  082C               	movf	setGestureIntEnable@val,w
  7228  0AC1  00AA               	movwf	??_setGestureIntEnable
  7229  0AC2  082A               	movf	??_setGestureIntEnable,w
  7230  0AC3  00A0               	movwf	wireWriteDataByte@val
  7231  0AC4  30AB               	movlw	171
  7232  0AC5  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  7233  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  7234  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  7235  0ACC  0820               	movf	?_wireWriteDataByte,w
  7236  0ACD  0421               	iorwf	?_wireWriteDataByte+1,w
  7237  0ACE  1D03               	btfss	3,2
  7238  0ACF  2AD2               	goto	l4251
  7239                           
  7240                           ;APDS9960.c: 396: return 0;
  7241  0AD0  3000               	movlw	0
  7242  0AD1  0008               	return
  7243  0AD2                     l4251:	
  7244                           
  7245                           ;APDS9960.c: 397: }
  7246                           ;APDS9960.c: 399: return 1;
  7247  0AD2  3001               	movlw	1
  7248  0AD3  0008               	return
  7249  0AD4                     __end_of_setGestureIntEnable:	
  7250                           
  7251                           	psect	text38
  7252  0885                     __ptext38:	
  7253 ;; *************** function _resetGestureParameters *****************
  7254 ;; Defined at:
  7255 ;;		line 451 in file "APDS9960.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;		None
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;		None               void
  7262 ;; Registers used:
  7263 ;;		status,2
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7269 ;;      Params:         0       0       0       0       0
  7270 ;;      Locals:         0       0       0       0       0
  7271 ;;      Temps:          0       0       0       0       0
  7272 ;;      Totals:         0       0       0       0       0
  7273 ;;Total ram usage:        0 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    1
  7276 ;; This function calls:
  7277 ;;		Nothing
  7278 ;; This function is called by:
  7279 ;;		_enableGestureSensor
  7280 ;;		_readGesture
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _resetGestureParameters
  7286  0885                     _resetGestureParameters:	
  7287                           
  7288                           ;APDS9960.c: 454: gesture_data_.index = 0;
  7289                           
  7290                           ;incstack = 0
  7291                           ; Regs used in _resetGestureParameters: [status,2]
  7292  0885  1283               	bcf	3,5	;RP0=0, select bank2
  7293  0886  1703               	bsf	3,6	;RP1=1, select bank2
  7294  0887  01D0               	clrf	(_gesture_data_^(0+256)+64)
  7295                           
  7296                           ;APDS9960.c: 455: gesture_data_.total_gestures = 0;
  7297  0888  01D1               	clrf	(_gesture_data_^(0+256)+65)
  7298                           
  7299                           ;APDS9960.c: 457: gesture_ud_delta_ = 0;
  7300  0889  1283               	bcf	3,5	;RP0=0, select bank0
  7301  088A  1303               	bcf	3,6	;RP1=0, select bank0
  7302  088B  01EA               	clrf	_gesture_ud_delta_
  7303  088C  01EB               	clrf	_gesture_ud_delta_+1
  7304                           
  7305                           ;APDS9960.c: 458: gesture_lr_delta_ = 0;
  7306  088D  01E0               	clrf	_gesture_lr_delta_
  7307  088E  01E1               	clrf	_gesture_lr_delta_+1
  7308                           
  7309                           ;APDS9960.c: 460: gesture_ud_count_ = 0;
  7310  088F  01E8               	clrf	_gesture_ud_count_
  7311  0890  01E9               	clrf	_gesture_ud_count_+1
  7312                           
  7313                           ;APDS9960.c: 461: gesture_lr_count_ = 0;
  7314  0891  01DE               	clrf	_gesture_lr_count_
  7315  0892  01DF               	clrf	_gesture_lr_count_+1
  7316                           
  7317                           ;APDS9960.c: 463: gesture_near_count_ = 0;
  7318  0893  01E4               	clrf	_gesture_near_count_
  7319  0894  01E5               	clrf	_gesture_near_count_+1
  7320                           
  7321                           ;APDS9960.c: 464: gesture_far_count_ = 0;
  7322  0895  01DC               	clrf	_gesture_far_count_
  7323  0896  01DD               	clrf	_gesture_far_count_+1
  7324                           
  7325                           ;APDS9960.c: 466: gesture_state_ = 0;
  7326  0897  01E6               	clrf	_gesture_state_
  7327  0898  01E7               	clrf	_gesture_state_+1
  7328                           
  7329                           ;APDS9960.c: 467: gesture_motion_ = DIR_NONE;
  7330  0899  01E2               	clrf	_gesture_motion_
  7331  089A  01E3               	clrf	_gesture_motion_+1
  7332  089B  0008               	return
  7333  089C                     __end_of_resetGestureParameters:	
  7334                           
  7335                           	psect	text39
  7336  17DB                     __ptext39:	
  7337 ;; *************** function _enablePower *****************
  7338 ;; Defined at:
  7339 ;;		line 521 in file "APDS9960.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      unsigned char 
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7353 ;;      Params:         0       0       0       0       0
  7354 ;;      Locals:         0       0       0       0       0
  7355 ;;      Temps:          0       0       0       0       0
  7356 ;;      Totals:         0       0       0       0       0
  7357 ;;Total ram usage:        0 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    5
  7360 ;; This function calls:
  7361 ;;		_setMode
  7362 ;; This function is called by:
  7363 ;;		_enableGestureSensor
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _enablePower
  7369  17DB                     _enablePower:	
  7370                           
  7371                           ;APDS9960.c: 523: if( !setMode(0, 1) ) {
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  7375  17DB  1283               	bcf	3,5	;RP0=0, select bank0
  7376  17DC  1303               	bcf	3,6	;RP1=0, select bank0
  7377  17DD  01AC               	clrf	setMode@enable
  7378  17DE  0AAC               	incf	setMode@enable,f
  7379  17DF  3000               	movlw	0
  7380  17E0  120A  158A  24C7  160A  118A  	fcall	_setMode
  7381  17E5  3A00               	xorlw	0
  7382  17E6  1D03               	skipz
  7383  17E7  2FEA               	goto	l4297
  7384                           
  7385                           ;APDS9960.c: 524: return 0;
  7386  17E8  3000               	movlw	0
  7387  17E9  0008               	return
  7388  17EA                     l4297:	
  7389                           
  7390                           ;APDS9960.c: 525: }
  7391                           ;APDS9960.c: 527: return 1;
  7392  17EA  3001               	movlw	1
  7393  17EB  0008               	return
  7394  17EC                     __end_of_enablePower:	
  7395                           
  7396                           	psect	text40
  7397  0CC7                     __ptext40:	
  7398 ;; *************** function _setMode *****************
  7399 ;; Defined at:
  7400 ;;		line 118 in file "APDS9960.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;  mode            1    wreg     unsigned char 
  7403 ;;  enable          1   12[BANK0 ] unsigned char 
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;  mode            1   16[BANK0 ] unsigned char 
  7406 ;;  reg_val         1   15[BANK0 ] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      unsigned char 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7416 ;;      Params:         0       1       0       0       0
  7417 ;;      Locals:         0       2       0       0       0
  7418 ;;      Temps:          0       2       0       0       0
  7419 ;;      Totals:         0       5       0       0       0
  7420 ;;Total ram usage:        5 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    4
  7423 ;; This function calls:
  7424 ;;		_getMode
  7425 ;;		_wireWriteDataByte
  7426 ;; This function is called by:
  7427 ;;		_initialize
  7428 ;;		_enableGestureSensor
  7429 ;;		_enablePower
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           
  7434                           ;psect for function _setMode
  7435  0CC7                     _setMode:	
  7436                           
  7437                           ;incstack = 0
  7438                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  7439                           ;setMode@mode stored from wreg
  7440  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  7441  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  7442  0CC9  00B0               	movwf	setMode@mode
  7443                           
  7444                           ;APDS9960.c: 120: uint8_t reg_val;
  7445                           ;APDS9960.c: 123: reg_val = getMode();
  7446  0CCA  160A  118A  278B  120A  158A  	fcall	_getMode
  7447  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  7448  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  7449  0CD1  00AD               	movwf	??_setMode
  7450  0CD2  082D               	movf	??_setMode,w
  7451  0CD3  00AF               	movwf	setMode@reg_val
  7452                           
  7453                           ;APDS9960.c: 124: if( reg_val == 0xFF ) {
  7454  0CD4  0A2F               	incf	setMode@reg_val,w
  7455  0CD5  1D03               	btfss	3,2
  7456  0CD6  2CD9               	goto	l3757
  7457                           
  7458                           ;APDS9960.c: 125: return 0;
  7459  0CD7  3000               	movlw	0
  7460  0CD8  0008               	return
  7461  0CD9                     l3757:	
  7462                           
  7463                           ;APDS9960.c: 126: }
  7464                           ;APDS9960.c: 129: enable = enable & 0x01;
  7465  0CD9  082C               	movf	setMode@enable,w
  7466  0CDA  3901               	andlw	1
  7467  0CDB  00AD               	movwf	??_setMode
  7468  0CDC  082D               	movf	??_setMode,w
  7469  0CDD  00AC               	movwf	setMode@enable
  7470                           
  7471                           ;APDS9960.c: 130: if( mode >= 0 && mode <= 6 ) {
  7472  0CDE  3007               	movlw	7
  7473  0CDF  0230               	subwf	setMode@mode,w
  7474  0CE0  1803               	skipnc
  7475  0CE1  2D02               	goto	l3767
  7476                           
  7477                           ;APDS9960.c: 131: if (enable) {
  7478  0CE2  082C               	movf	setMode@enable,w
  7479  0CE3  1903               	btfsc	3,2
  7480  0CE4  2CF3               	goto	l3765
  7481                           
  7482                           ;APDS9960.c: 132: reg_val |= (1 << mode);
  7483  0CE5  3001               	movlw	1
  7484  0CE6  00AD               	movwf	??_setMode
  7485  0CE7  0A30               	incf	setMode@mode,w
  7486  0CE8  2CEB               	goto	u4204
  7487  0CE9                     u4205:	
  7488  0CE9  1003               	clrc
  7489  0CEA  0DAD               	rlf	??_setMode,f
  7490  0CEB                     u4204:	
  7491  0CEB  3EFF               	addlw	-1
  7492  0CEC  1D03               	skipz
  7493  0CED  2CE9               	goto	u4205
  7494  0CEE  082D               	movf	??_setMode,w
  7495  0CEF  00AE               	movwf	??_setMode+1
  7496  0CF0  082E               	movf	??_setMode+1,w
  7497  0CF1  04AF               	iorwf	setMode@reg_val,f
  7498                           
  7499                           ;APDS9960.c: 133: } else {
  7500  0CF2  2D0F               	goto	l3775
  7501  0CF3                     l3765:	
  7502                           
  7503                           ;APDS9960.c: 134: reg_val &= ~(1 << mode);
  7504  0CF3  3001               	movlw	1
  7505  0CF4  00AD               	movwf	??_setMode
  7506  0CF5  0A30               	incf	setMode@mode,w
  7507  0CF6  2CF9               	goto	u4214
  7508  0CF7                     u4215:	
  7509  0CF7  1003               	clrc
  7510  0CF8  0DAD               	rlf	??_setMode,f
  7511  0CF9                     u4214:	
  7512  0CF9  3EFF               	addlw	-1
  7513  0CFA  1D03               	skipz
  7514  0CFB  2CF7               	goto	u4215
  7515  0CFC  082D               	movf	??_setMode,w
  7516  0CFD  3AFF               	xorlw	255
  7517  0CFE  00AE               	movwf	??_setMode+1
  7518  0CFF  082E               	movf	??_setMode+1,w
  7519  0D00  05AF               	andwf	setMode@reg_val,f
  7520                           
  7521                           ;APDS9960.c: 135: }
  7522                           ;APDS9960.c: 136: } else if( mode == 7 ) {
  7523  0D01  2D0F               	goto	l3775
  7524  0D02                     l3767:	
  7525  0D02  3007               	movlw	7
  7526  0D03  0630               	xorwf	setMode@mode,w
  7527  0D04  1D03               	btfss	3,2
  7528  0D05  2D0F               	goto	l3775
  7529                           
  7530                           ;APDS9960.c: 137: if (enable) {
  7531  0D06  082C               	movf	setMode@enable,w
  7532  0D07  1903               	btfsc	3,2
  7533  0D08  2D0E               	goto	l3773
  7534                           
  7535                           ;APDS9960.c: 138: reg_val = 0x7F;
  7536  0D09  307F               	movlw	127
  7537  0D0A  00AD               	movwf	??_setMode
  7538  0D0B  082D               	movf	??_setMode,w
  7539  0D0C  00AF               	movwf	setMode@reg_val
  7540                           
  7541                           ;APDS9960.c: 139: } else {
  7542  0D0D  2D0F               	goto	l3775
  7543  0D0E                     l3773:	
  7544                           
  7545                           ;APDS9960.c: 140: reg_val = 0x00;
  7546  0D0E  01AF               	clrf	setMode@reg_val
  7547  0D0F                     l3775:	
  7548                           
  7549                           ;APDS9960.c: 141: }
  7550                           ;APDS9960.c: 142: }
  7551                           ;APDS9960.c: 145: if( !wireWriteDataByte(0x80, reg_val) ) {
  7552  0D0F  082F               	movf	setMode@reg_val,w
  7553  0D10  00AD               	movwf	??_setMode
  7554  0D11  082D               	movf	??_setMode,w
  7555  0D12  00A0               	movwf	wireWriteDataByte@val
  7556  0D13  3080               	movlw	128
  7557  0D14  120A  158A  2160  120A  158A  	fcall	_wireWriteDataByte
  7558  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  7559  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  7560  0D1B  0820               	movf	?_wireWriteDataByte,w
  7561  0D1C  0421               	iorwf	?_wireWriteDataByte+1,w
  7562  0D1D  1D03               	btfss	3,2
  7563  0D1E  2D21               	goto	l3781
  7564                           
  7565                           ;APDS9960.c: 146: return 0;
  7566  0D1F  3000               	movlw	0
  7567  0D20  0008               	return
  7568  0D21                     l3781:	
  7569                           
  7570                           ;APDS9960.c: 147: }
  7571                           ;APDS9960.c: 149: return 1;
  7572  0D21  3001               	movlw	1
  7573  0D22  0008               	return
  7574  0D23                     __end_of_setMode:	
  7575                           
  7576                           	psect	text41
  7577  0960                     __ptext41:	
  7578 ;; *************** function _wireWriteDataByte *****************
  7579 ;; Defined at:
  7580 ;;		line 866 in file "APDS9960.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  reg             1    wreg     unsigned char 
  7583 ;;  val             1    0[BANK0 ] unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  reg             1    5[COMMON] unsigned char 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  2    0[BANK0 ] int 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7595 ;;      Params:         0       3       0       0       0
  7596 ;;      Locals:         1       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0
  7598 ;;      Totals:         1       3       0       0       0
  7599 ;;Total ram usage:        4 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    2
  7602 ;; This function calls:
  7603 ;;		_I2C_Start
  7604 ;;		_I2C_Stop
  7605 ;;		_I2C_Write_Byte
  7606 ;; This function is called by:
  7607 ;;		_initialize
  7608 ;;		_setMode
  7609 ;;		_setLEDDrive
  7610 ;;		_setProximityGain
  7611 ;;		_setAmbientLightGain
  7612 ;;		_setProxIntLowThresh
  7613 ;;		_setProxIntHighThresh
  7614 ;;		_setLightIntLowThreshold
  7615 ;;		_setLightIntHighThreshold
  7616 ;;		_setGestureEnterThresh
  7617 ;;		_setGestureExitThresh
  7618 ;;		_setGestureGain
  7619 ;;		_setGestureLEDDrive
  7620 ;;		_setGestureWaitTime
  7621 ;;		_setGestureIntEnable
  7622 ;;		_enableGestureSensor
  7623 ;;		_setLEDBoost
  7624 ;;		_setGestureMode
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _wireWriteDataByte
  7630  0960                     _wireWriteDataByte:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
  7634                           ;wireWriteDataByte@reg stored from wreg
  7635  0960  00F5               	movwf	wireWriteDataByte@reg
  7636                           
  7637                           ;APDS9960.c: 869: I2C_Start();
  7638  0961  160A  118A  2763  120A  158A  	fcall	_I2C_Start
  7639                           
  7640                           ;APDS9960.c: 870: I2C_Write_Byte((0x39 << 1 )| 0x00);
  7641  0966  3072               	movlw	114
  7642  0967  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7643                           
  7644                           ;APDS9960.c: 871: I2C_Write_Byte(reg);
  7645  096C  0875               	movf	wireWriteDataByte@reg,w
  7646  096D  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7647                           
  7648                           ;APDS9960.c: 872: I2C_Write_Byte(val);
  7649  0972  1283               	bcf	3,5	;RP0=0, select bank0
  7650  0973  1303               	bcf	3,6	;RP1=0, select bank0
  7651  0974  0820               	movf	wireWriteDataByte@val,w
  7652  0975  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7653                           
  7654                           ;APDS9960.c: 873: I2C_Stop();
  7655  097A  160A  118A  2769   	fcall	_I2C_Stop
  7656                           
  7657                           ;APDS9960.c: 875: return 1;
  7658  097D  3001               	movlw	1
  7659  097E  1283               	bcf	3,5	;RP0=0, select bank0
  7660  097F  1303               	bcf	3,6	;RP1=0, select bank0
  7661  0980  00A0               	movwf	?_wireWriteDataByte
  7662  0981  3000               	movlw	0
  7663  0982  00A1               	movwf	?_wireWriteDataByte+1
  7664  0983  0008               	return
  7665  0984                     __end_of_wireWriteDataByte:	
  7666                           
  7667                           	psect	text42
  7668  178B                     __ptext42:	
  7669 ;; *************** function _getMode *****************
  7670 ;; Defined at:
  7671 ;;		line 153 in file "APDS9960.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;		None
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;  enable_value    1   11[BANK0 ] unsigned char 
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      unsigned char 
  7678 ;; Registers used:
  7679 ;;		wreg, status,2, status,0, pclath, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7685 ;;      Params:         0       0       0       0       0
  7686 ;;      Locals:         0       1       0       0       0
  7687 ;;      Temps:          0       1       0       0       0
  7688 ;;      Totals:         0       2       0       0       0
  7689 ;;Total ram usage:        2 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    3
  7692 ;; This function calls:
  7693 ;;		_wireReadDataByte
  7694 ;; This function is called by:
  7695 ;;		_setMode
  7696 ;;		_readGesture
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           
  7701                           ;psect for function _getMode
  7702  178B                     _getMode:	
  7703                           
  7704                           ;APDS9960.c: 155: uint8_t enable_value;
  7705                           ;APDS9960.c: 158: enable_value = wireReadDataByte(0x80);
  7706                           
  7707                           ;incstack = 0
  7708                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
  7709  178B  3080               	movlw	128
  7710  178C  120A  158A  22D4   	fcall	_wireReadDataByte
  7711  178F  1283               	bcf	3,5	;RP0=0, select bank0
  7712  1790  1303               	bcf	3,6	;RP1=0, select bank0
  7713  1791  00AA               	movwf	??_getMode
  7714  1792  082A               	movf	??_getMode,w
  7715  1793  00AB               	movwf	getMode@enable_value
  7716                           
  7717                           ;APDS9960.c: 160: return enable_value;
  7718  1794  082B               	movf	getMode@enable_value,w
  7719  1795  0008               	return
  7720  1796                     __end_of_getMode:	
  7721                           
  7722                           	psect	text43
  7723  0AD4                     __ptext43:	
  7724 ;; *************** function _wireReadDataByte *****************
  7725 ;; Defined at:
  7726 ;;		line 879 in file "APDS9960.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  reg             1    wreg     unsigned char 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  reg             1    8[BANK0 ] unsigned char 
  7731 ;;  val             1    9[BANK0 ] unsigned char 
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      unsigned char 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, pclath, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7741 ;;      Params:         0       0       0       0       0
  7742 ;;      Locals:         0       2       0       0       0
  7743 ;;      Temps:          1       0       0       0       0
  7744 ;;      Totals:         1       2       0       0       0
  7745 ;;Total ram usage:        3 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    2
  7748 ;; This function calls:
  7749 ;;		_I2C_ReStart
  7750 ;;		_I2C_Read_Byte
  7751 ;;		_I2C_Send_NACK
  7752 ;;		_I2C_Start
  7753 ;;		_I2C_Stop
  7754 ;;		_I2C_Write_Byte
  7755 ;; This function is called by:
  7756 ;;		_initialize
  7757 ;;		_getMode
  7758 ;;		_setLEDDrive
  7759 ;;		_setProximityGain
  7760 ;;		_setAmbientLightGain
  7761 ;;		_setGestureGain
  7762 ;;		_setGestureLEDDrive
  7763 ;;		_setGestureWaitTime
  7764 ;;		_setGestureIntEnable
  7765 ;;		_setLEDBoost
  7766 ;;		_setGestureMode
  7767 ;;		_isGestureAvailable
  7768 ;;		_readGesture
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _wireReadDataByte
  7774  0AD4                     _wireReadDataByte:	
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
  7778                           ;wireReadDataByte@reg stored from wreg
  7779  0AD4  1283               	bcf	3,5	;RP0=0, select bank0
  7780  0AD5  1303               	bcf	3,6	;RP1=0, select bank0
  7781  0AD6  00A8               	movwf	wireReadDataByte@reg
  7782                           
  7783                           ;APDS9960.c: 882: unsigned char val;
  7784                           ;APDS9960.c: 884: I2C_Start();
  7785  0AD7  160A  118A  2763  120A  158A  	fcall	_I2C_Start
  7786                           
  7787                           ;APDS9960.c: 885: I2C_Write_Byte((0x39 << 1 )| 0x00);
  7788  0ADC  3072               	movlw	114
  7789  0ADD  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7790                           
  7791                           ;APDS9960.c: 886: I2C_Write_Byte(reg);
  7792  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  7794  0AE4  0828               	movf	wireReadDataByte@reg,w
  7795  0AE5  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7796                           
  7797                           ;APDS9960.c: 887: I2C_ReStart();
  7798  0AEA  160A  118A  275D  120A  158A  	fcall	_I2C_ReStart
  7799                           
  7800                           ;APDS9960.c: 888: I2C_Write_Byte((0x39 << 1) | 0x01);
  7801  0AEF  3073               	movlw	115
  7802  0AF0  160A  118A  27EC  120A  158A  	fcall	_I2C_Write_Byte
  7803                           
  7804                           ;APDS9960.c: 889: val=I2C_Read_Byte();
  7805  0AF5  120A  118A  27AD  120A  158A  	fcall	_I2C_Read_Byte
  7806  0AFA  00F5               	movwf	??_wireReadDataByte
  7807  0AFB  0875               	movf	??_wireReadDataByte,w
  7808  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  7809  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  7810  0AFE  00A9               	movwf	wireReadDataByte@val
  7811                           
  7812                           ;APDS9960.c: 890: I2C_Send_NACK();
  7813  0AFF  160A  118A  2775  120A  158A  	fcall	_I2C_Send_NACK
  7814                           
  7815                           ;APDS9960.c: 891: I2C_Stop();
  7816  0B04  160A  118A  2769   	fcall	_I2C_Stop
  7817                           
  7818                           ;APDS9960.c: 893: return (val);
  7819  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  7820  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  7821  0B09  0829               	movf	wireReadDataByte@val,w
  7822  0B0A  0008               	return
  7823  0B0B                     __end_of_wireReadDataByte:	
  7824                           
  7825                           	psect	text44
  7826  17EC                     __ptext44:	
  7827 ;; *************** function _I2C_Write_Byte *****************
  7828 ;; Defined at:
  7829 ;;		line 66 in file "i2c.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;  Byte            1    wreg     unsigned char 
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  Byte            1    4[COMMON] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;		None               void
  7836 ;; Registers used:
  7837 ;;		wreg, status,2
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7843 ;;      Params:         0       0       0       0       0
  7844 ;;      Locals:         1       0       0       0       0
  7845 ;;      Temps:          0       0       0       0       0
  7846 ;;      Totals:         1       0       0       0       0
  7847 ;;Total ram usage:        1 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    1
  7850 ;; This function calls:
  7851 ;;		Nothing
  7852 ;; This function is called by:
  7853 ;;		_wireReadDataBlock
  7854 ;;		_wireWriteDataByte
  7855 ;;		_wireReadDataByte
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _I2C_Write_Byte
  7861  17EC                     _I2C_Write_Byte:	
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in _I2C_Write_Byte: [wreg+status,2]
  7865                           ;I2C_Write_Byte@Byte stored from wreg
  7866  17EC  00F4               	movwf	I2C_Write_Byte@Byte
  7867                           
  7868                           ;i2c.c: 69: b_i2c_error_flag = 0;
  7869  17ED  1283               	bcf	3,5	;RP0=0, select bank0
  7870  17EE  1303               	bcf	3,6	;RP1=0, select bank0
  7871  17EF  01EC               	clrf	_b_i2c_error_flag
  7872                           
  7873                           ;i2c.c: 70: SSPBUF = Byte;
  7874  17F0  0874               	movf	I2C_Write_Byte@Byte,w
  7875  17F1  0093               	movwf	19	;volatile
  7876  17F2                     l548:	
  7877                           ;i2c.c: 71: while (SSPSTATbits.R_W == 1);
  7878                           
  7879  17F2  1683               	bsf	3,5	;RP0=1, select bank1
  7880  17F3  1303               	bcf	3,6	;RP1=0, select bank1
  7881  17F4  1914               	btfsc	20,2	;volatile
  7882  17F5  2FF2               	goto	l548
  7883                           
  7884                           ;i2c.c: 74: if (ACKSTAT == 1) {
  7885  17F6  1F11               	btfss	17,6	;volatile
  7886  17F7  0008               	return
  7887                           
  7888                           ;i2c.c: 76: PEN = 1;
  7889  17F8  1511               	bsf	17,2	;volatile
  7890  17F9                     l552:	
  7891                           ;i2c.c: 77: while (PEN == 1);
  7892                           
  7893  17F9  1911               	btfsc	17,2	;volatile
  7894  17FA  2FF9               	goto	l552
  7895                           
  7896                           ;i2c.c: 80: b_i2c_error_flag = 1;
  7897  17FB  1283               	bcf	3,5	;RP0=0, select bank0
  7898  17FC  1303               	bcf	3,6	;RP1=0, select bank0
  7899  17FD  01EC               	clrf	_b_i2c_error_flag
  7900  17FE  0AEC               	incf	_b_i2c_error_flag,f
  7901                           
  7902                           ;i2c.c: 81: return;
  7903  17FF  0008               	return
  7904  1800                     __end_of_I2C_Write_Byte:	
  7905                           
  7906                           	psect	text45
  7907  1769                     __ptext45:	
  7908 ;; *************** function _I2C_Stop *****************
  7909 ;; Defined at:
  7910 ;;		line 43 in file "i2c.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;		None
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;		None               void
  7917 ;; Registers used:
  7918 ;;		None
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7924 ;;      Params:         0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0
  7926 ;;      Temps:          0       0       0       0       0
  7927 ;;      Totals:         0       0       0       0       0
  7928 ;;Total ram usage:        0 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    1
  7931 ;; This function calls:
  7932 ;;		Nothing
  7933 ;; This function is called by:
  7934 ;;		_wireReadDataBlock
  7935 ;;		_wireWriteDataByte
  7936 ;;		_wireReadDataByte
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _I2C_Stop
  7942  1769                     _I2C_Stop:	
  7943                           
  7944                           ;i2c.c: 45: PEN=1;
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _I2C_Stop: []
  7948  1769  1683               	bsf	3,5	;RP0=1, select bank1
  7949  176A  1303               	bcf	3,6	;RP1=0, select bank1
  7950  176B  1511               	bsf	17,2	;volatile
  7951  176C                     l530:	
  7952                           ;i2c.c: 46: while (PEN == 1);
  7953                           
  7954  176C  1D11               	btfss	17,2	;volatile
  7955  176D  0008               	return
  7956  176E  2F6C               	goto	l530
  7957  176F                     __end_of_I2C_Stop:	
  7958                           
  7959                           	psect	text46
  7960  1763                     __ptext46:	
  7961 ;; *************** function _I2C_Start *****************
  7962 ;; Defined at:
  7963 ;;		line 29 in file "i2c.c"
  7964 ;; Parameters:    Size  Location     Type
  7965 ;;		None
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;		None
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		None
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7977 ;;      Params:         0       0       0       0       0
  7978 ;;      Locals:         0       0       0       0       0
  7979 ;;      Temps:          0       0       0       0       0
  7980 ;;      Totals:         0       0       0       0       0
  7981 ;;Total ram usage:        0 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    1
  7984 ;; This function calls:
  7985 ;;		Nothing
  7986 ;; This function is called by:
  7987 ;;		_wireReadDataBlock
  7988 ;;		_wireWriteDataByte
  7989 ;;		_wireReadDataByte
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function _I2C_Start
  7995  1763                     _I2C_Start:	
  7996                           
  7997                           ;i2c.c: 31: SEN = 1;
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _I2C_Start: []
  8001  1763  1683               	bsf	3,5	;RP0=1, select bank1
  8002  1764  1303               	bcf	3,6	;RP1=0, select bank1
  8003  1765  1411               	bsf	17,0	;volatile
  8004  1766                     l518:	
  8005                           ;i2c.c: 32: while( SEN == 1);
  8006                           
  8007  1766  1C11               	btfss	17,0	;volatile
  8008  1767  0008               	return
  8009  1768  2F66               	goto	l518
  8010  1769                     __end_of_I2C_Start:	
  8011                           
  8012                           	psect	text47
  8013  1775                     __ptext47:	
  8014 ;; *************** function _I2C_Send_NACK *****************
  8015 ;; Defined at:
  8016 ;;		line 58 in file "i2c.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;		None
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;		None
  8021 ;; Return value:  Size  Location     Type
  8022 ;;		None               void
  8023 ;; Registers used:
  8024 ;;		None
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8030 ;;      Params:         0       0       0       0       0
  8031 ;;      Locals:         0       0       0       0       0
  8032 ;;      Temps:          0       0       0       0       0
  8033 ;;      Totals:         0       0       0       0       0
  8034 ;;Total ram usage:        0 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    1
  8037 ;; This function calls:
  8038 ;;		Nothing
  8039 ;; This function is called by:
  8040 ;;		_wireReadDataBlock
  8041 ;;		_wireReadDataByte
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           
  8046                           ;psect for function _I2C_Send_NACK
  8047  1775                     _I2C_Send_NACK:	
  8048                           
  8049                           ;i2c.c: 60: ACKDT=1;
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _I2C_Send_NACK: []
  8053  1775  1683               	bsf	3,5	;RP0=1, select bank1
  8054  1776  1303               	bcf	3,6	;RP1=0, select bank1
  8055  1777  1691               	bsf	17,5	;volatile
  8056                           
  8057                           ;i2c.c: 61: ACKEN=1;
  8058  1778  1611               	bsf	17,4	;volatile
  8059  1779                     l542:	
  8060                           ;i2c.c: 62: while (ACKEN == 1);
  8061                           
  8062  1779  1E11               	btfss	17,4	;volatile
  8063  177A  0008               	return
  8064  177B  2F79               	goto	l542
  8065  177C                     __end_of_I2C_Send_NACK:	
  8066                           
  8067                           	psect	text48
  8068  07AD                     __ptext48:	
  8069 ;; *************** function _I2C_Read_Byte *****************
  8070 ;; Defined at:
  8071 ;;		line 87 in file "i2c.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;		None
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  count           4    4[BANK0 ] unsigned long 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      unsigned char 
  8078 ;; Registers used:
  8079 ;;		wreg
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8085 ;;      Params:         0       0       0       0       0
  8086 ;;      Locals:         0       4       0       0       0
  8087 ;;      Temps:          0       4       0       0       0
  8088 ;;      Totals:         0       8       0       0       0
  8089 ;;Total ram usage:        8 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    1
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_wireReadDataBlock
  8096 ;;		_wireReadDataByte
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _I2C_Read_Byte
  8102  07AD                     _I2C_Read_Byte:	
  8103                           
  8104                           ;i2c.c: 89: RCEN=1;
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _I2C_Read_Byte: [wreg]
  8108  07AD  1683               	bsf	3,5	;RP0=1, select bank1
  8109  07AE  1303               	bcf	3,6	;RP1=0, select bank1
  8110  07AF  1591               	bsf	17,3	;volatile
  8111                           
  8112                           ;i2c.c: 92: unsigned long count = 10000L;
  8113  07B0  3000               	movlw	0
  8114  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  8115  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  8116  07B3  00A7               	movwf	I2C_Read_Byte@count+3
  8117  07B4  3000               	movlw	0
  8118  07B5  00A6               	movwf	I2C_Read_Byte@count+2
  8119  07B6  3027               	movlw	39
  8120  07B7  00A5               	movwf	I2C_Read_Byte@count+1
  8121  07B8  3010               	movlw	16
  8122  07B9  00A4               	movwf	I2C_Read_Byte@count
  8123  07BA                     l558:	
  8124                           ;i2c.c: 93: while (BF == 0) {
  8125                           
  8126  07BA  1683               	bsf	3,5	;RP0=1, select bank1
  8127  07BB  1303               	bcf	3,6	;RP1=0, select bank1
  8128  07BC  1814               	btfsc	20,0	;volatile
  8129  07BD  2FEC               	goto	l3657
  8130                           
  8131                           ;i2c.c: 96: if (--count == 0) {
  8132  07BE  3001               	movlw	1
  8133  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  8134  07C0  00A0               	movwf	??_I2C_Read_Byte
  8135  07C1  3000               	movlw	0
  8136  07C2  00A1               	movwf	??_I2C_Read_Byte+1
  8137  07C3  3000               	movlw	0
  8138  07C4  00A2               	movwf	??_I2C_Read_Byte+2
  8139  07C5  3000               	movlw	0
  8140  07C6  00A3               	movwf	??_I2C_Read_Byte+3
  8141  07C7  0820               	movf	??_I2C_Read_Byte,w
  8142  07C8  02A4               	subwf	I2C_Read_Byte@count,f
  8143  07C9  0821               	movf	??_I2C_Read_Byte+1,w
  8144  07CA  1C03               	skipc
  8145  07CB  0F21               	incfsz	??_I2C_Read_Byte+1,w
  8146  07CC  2FCE               	goto	u4025
  8147  07CD  2FCF               	goto	u4026
  8148  07CE                     u4025:	
  8149  07CE  02A5               	subwf	I2C_Read_Byte@count+1,f
  8150  07CF                     u4026:	
  8151  07CF  0822               	movf	??_I2C_Read_Byte+2,w
  8152  07D0  1C03               	skipc
  8153  07D1  0F22               	incfsz	??_I2C_Read_Byte+2,w
  8154  07D2  2FD4               	goto	u4027
  8155  07D3  2FD5               	goto	u4028
  8156  07D4                     u4027:	
  8157  07D4  02A6               	subwf	I2C_Read_Byte@count+2,f
  8158  07D5                     u4028:	
  8159  07D5  0823               	movf	??_I2C_Read_Byte+3,w
  8160  07D6  1C03               	skipc
  8161  07D7  0F23               	incfsz	??_I2C_Read_Byte+3,w
  8162  07D8  2FDA               	goto	u4029
  8163  07D9  2FDB               	goto	u4020
  8164  07DA                     u4029:	
  8165  07DA  02A7               	subwf	I2C_Read_Byte@count+3,f
  8166  07DB                     u4020:	
  8167  07DB  0827               	movf	I2C_Read_Byte@count+3,w
  8168  07DC  0426               	iorwf	I2C_Read_Byte@count+2,w
  8169  07DD  0425               	iorwf	I2C_Read_Byte@count+1,w
  8170  07DE  0424               	iorwf	I2C_Read_Byte@count,w
  8171  07DF  1D03               	skipz
  8172  07E0  2FBA               	goto	l558
  8173                           
  8174                           ;i2c.c: 98: PEN = 1;
  8175  07E1  1683               	bsf	3,5	;RP0=1, select bank1
  8176  07E2  1303               	bcf	3,6	;RP1=0, select bank1
  8177  07E3  1511               	bsf	17,2	;volatile
  8178  07E4                     l561:	
  8179                           ;i2c.c: 99: while (PEN == 1);
  8180                           
  8181  07E4  1911               	btfsc	17,2	;volatile
  8182  07E5  2FE4               	goto	l561
  8183                           
  8184                           ;i2c.c: 102: b_i2c_error_flag = 1;
  8185  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  8186  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  8187  07E8  01EC               	clrf	_b_i2c_error_flag
  8188  07E9  0AEC               	incf	_b_i2c_error_flag,f
  8189                           
  8190                           ;i2c.c: 103: return 0;
  8191  07EA  3000               	movlw	0
  8192  07EB  0008               	return
  8193  07EC                     l3657:	
  8194                           
  8195                           ;i2c.c: 104: }
  8196                           ;i2c.c: 105: }
  8197                           ;i2c.c: 107: return SSPBUF;
  8198  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  8199  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  8200  07EE  0813               	movf	19,w	;volatile
  8201  07EF  0008               	return
  8202  07F0                     __end_of_I2C_Read_Byte:	
  8203                           
  8204                           	psect	text49
  8205  175D                     __ptext49:	
  8206 ;; *************** function _I2C_ReStart *****************
  8207 ;; Defined at:
  8208 ;;		line 36 in file "i2c.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;		None
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;		None
  8213 ;; Return value:  Size  Location     Type
  8214 ;;		None               void
  8215 ;; Registers used:
  8216 ;;		None
  8217 ;; Tracked objects:
  8218 ;;		On entry : 0/0
  8219 ;;		On exit  : 0/0
  8220 ;;		Unchanged: 0/0
  8221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8222 ;;      Params:         0       0       0       0       0
  8223 ;;      Locals:         0       0       0       0       0
  8224 ;;      Temps:          0       0       0       0       0
  8225 ;;      Totals:         0       0       0       0       0
  8226 ;;Total ram usage:        0 bytes
  8227 ;; Hardware stack levels used:    1
  8228 ;; Hardware stack levels required when called:    1
  8229 ;; This function calls:
  8230 ;;		Nothing
  8231 ;; This function is called by:
  8232 ;;		_wireReadDataBlock
  8233 ;;		_wireReadDataByte
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           
  8238                           ;psect for function _I2C_ReStart
  8239  175D                     _I2C_ReStart:	
  8240                           
  8241                           ;i2c.c: 38: RSEN = 1;
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _I2C_ReStart: []
  8245  175D  1683               	bsf	3,5	;RP0=1, select bank1
  8246  175E  1303               	bcf	3,6	;RP1=0, select bank1
  8247  175F  1491               	bsf	17,1	;volatile
  8248  1760                     l524:	
  8249                           ;i2c.c: 39: while(RSEN == 1);
  8250                           
  8251  1760  1C91               	btfss	17,1	;volatile
  8252  1761  0008               	return
  8253  1762  2F60               	goto	l524
  8254  1763                     __end_of_I2C_ReStart:	
  8255                           
  8256                           	psect	text50
  8257  08F8                     __ptext50:	
  8258 ;; *************** function _DelayMs *****************
  8259 ;; Defined at:
  8260 ;;		line 175 in file "GestureTest.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;  Ms              2    4[COMMON] unsigned int 
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  delay_cnst      2    0[BANK0 ] int 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;		None               void
  8267 ;; Registers used:
  8268 ;;		wreg, status,2, status,0, btemp+1
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8274 ;;      Params:         2       0       0       0       0
  8275 ;;      Locals:         0       2       0       0       0
  8276 ;;      Temps:          0       0       0       0       0
  8277 ;;      Totals:         2       2       0       0       0
  8278 ;;Total ram usage:        4 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    1
  8281 ;; This function calls:
  8282 ;;		Nothing
  8283 ;; This function is called by:
  8284 ;;		_main
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           
  8289                           ;psect for function _DelayMs
  8290  08F8                     _DelayMs:	
  8291  08F8                     l4315:	
  8292                           ;GestureTest.c: 177: int delay_cnst;
  8293                           ;GestureTest.c: 178: while (Ms > 0)
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in _DelayMs: [wreg+status,2+status,0+btemp+1]
  8297                           
  8298  08F8  0874               	movf	DelayMs@Ms,w
  8299  08F9  0475               	iorwf	DelayMs@Ms+1,w
  8300  08FA  1903               	btfsc	3,2
  8301  08FB  0008               	return
  8302                           
  8303                           ;GestureTest.c: 179: {
  8304                           ;GestureTest.c: 180: Ms--;
  8305  08FC  3001               	movlw	1
  8306  08FD  02F4               	subwf	DelayMs@Ms,f
  8307  08FE  3000               	movlw	0
  8308  08FF  1C03               	skipc
  8309  0900  03F5               	decf	DelayMs@Ms+1,f
  8310  0901  02F5               	subwf	DelayMs@Ms+1,f
  8311                           
  8312                           ;GestureTest.c: 181: for (delay_cnst = 0; delay_cnst < 220; delay_cnst++);
  8313  0902  1283               	bcf	3,5	;RP0=0, select bank0
  8314  0903  1303               	bcf	3,6	;RP1=0, select bank0
  8315  0904  01A0               	clrf	DelayMs@delay_cnst
  8316  0905  01A1               	clrf	DelayMs@delay_cnst+1
  8317  0906                     L20:	
  8318  0906  0821               	movf	DelayMs@delay_cnst+1,w
  8319  0907  3A80               	xorlw	128
  8320  0908  00FF               	movwf	127
  8321  0909  3080               	movlw	128
  8322  090A  027F               	subwf	127,w
  8323  090B  1D03               	skipz
  8324  090C  290F               	goto	u5035
  8325  090D  30DC               	movlw	220
  8326  090E  0220               	subwf	DelayMs@delay_cnst,w
  8327  090F                     u5035:	
  8328  090F  1803               	btfsc	3,0
  8329  0910  28F8               	goto	l4315
  8330  0911  3001               	movlw	1
  8331  0912  1283               	bcf	3,5	;RP0=0, select bank0
  8332  0913  1303               	bcf	3,6	;RP1=0, select bank0
  8333  0914  07A0               	addwf	DelayMs@delay_cnst,f
  8334  0915  1803               	skipnc
  8335  0916  0AA1               	incf	DelayMs@delay_cnst+1,f
  8336  0917  3000               	movlw	0
  8337  0918  07A1               	addwf	DelayMs@delay_cnst+1,f
  8338  0919  2906               	goto	L20
  8339  091A                     __end_of_DelayMs:	
  8340                           
  8341                           	psect	text51
  8342  085D                     __ptext51:	
  8343 ;; *************** function _isr *****************
  8344 ;; Defined at:
  8345 ;;		line 36 in file "GestureTest.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		None
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8359 ;;      Params:         0       0       0       0       0
  8360 ;;      Locals:         0       0       0       0       0
  8361 ;;      Temps:          4       0       0       0       0
  8362 ;;      Totals:         4       0       0       0       0
  8363 ;;Total ram usage:        4 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; This function calls:
  8366 ;;		Nothing
  8367 ;; This function is called by:
  8368 ;;		Interrupt level 1
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           
  8373                           ;psect for function _isr
  8374  085D                     _isr:	
  8375                           
  8376                           ;GestureTest.c: 38: if (INTF)
  8377  085D  1C8B               	btfss	11,1	;volatile
  8378  085E  2864               	goto	i1l84
  8379                           
  8380                           ;GestureTest.c: 39: {
  8381                           ;GestureTest.c: 40: INTE = 0;
  8382  085F  120B               	bcf	11,4	;volatile
  8383                           
  8384                           ;GestureTest.c: 41: handleGestureFlag = 1;
  8385  0860  01ED               	clrf	_handleGestureFlag
  8386  0861  0AED               	incf	_handleGestureFlag,f
  8387                           
  8388                           ;GestureTest.c: 42: INTF = 0;
  8389  0862  108B               	bcf	11,1	;volatile
  8390                           
  8391                           ;GestureTest.c: 43: INTE = 1;
  8392  0863  160B               	bsf	11,4	;volatile
  8393  0864                     i1l84:	
  8394  0864  0873               	movf	??_isr+3,w
  8395  0865  00FF               	movwf	127
  8396  0866  0872               	movf	??_isr+2,w
  8397  0867  008A               	movwf	10
  8398  0868  0871               	movf	??_isr+1,w
  8399  0869  0084               	movwf	4
  8400  086A  0E70               	swapf	??_isr^(0+-128),w
  8401  086B  0083               	movwf	3
  8402  086C  0EFE               	swapf	126,f
  8403  086D  0E7E               	swapf	126,w
  8404  086E  0009               	retfie
  8405  086F                     __end_of_isr:	
  8406  007E                     btemp	set	126	;btemp
  8407  007E                     wtemp	set	126
  8408  007E                     wtemp0	set	126
  8409  0080                     wtemp1	set	128
  8410  0082                     wtemp2	set	130
  8411  0084                     wtemp3	set	132
  8412  0086                     wtemp4	set	134
  8413  0088                     wtemp5	set	136
  8414  007F                     wtemp6	set	127
  8415  007E                     ttemp	set	126
  8416  007E                     ttemp0	set	126
  8417  0081                     ttemp1	set	129
  8418  0084                     ttemp2	set	132
  8419  0087                     ttemp3	set	135
  8420  007F                     ttemp4	set	127
  8421  007E                     ltemp	set	126
  8422  007E                     ltemp0	set	126
  8423  0082                     ltemp1	set	130
  8424  0086                     ltemp2	set	134
  8425  0080                     ltemp3	set	128
  8426                           
  8427                           	psect	intentry
  8428  0004                     __pintentry:	
  8429                           ;incstack = 0
  8430                           ; Regs used in _isr: []
  8431                           
  8432  0004                     interrupt_function:	
  8433  007E                     saved_w	set	btemp
  8434  0004  00FE               	movwf	btemp
  8435  0005  0E03               	swapf	3,w
  8436  0006  00F0               	movwf	??_isr
  8437  0007  0804               	movf	4,w
  8438  0008  00F1               	movwf	??_isr+1
  8439  0009  080A               	movf	10,w
  8440  000A  00F2               	movwf	??_isr+2
  8441  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8442  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8443  000D  087F               	movf	btemp+1,w
  8444  000E  00F3               	movwf	??_isr+3
  8445  000F  120A  158A  285D   	ljmp	_isr


Data Sizes:
    Strings     86
    Constant    0
    Data        0
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     60      78
    BANK1            80     67      77
    BANK3            96     64      64
    BANK2            96      0      68

Pointer List with Targets:

    lcd_putstr@csz_string	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_12(CODE[5]), STR_11(CODE[4]), STR_10(CODE[5]), STR_9(CODE[6]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[3]), STR_5(CODE[9]), 
		 -> STR_4(CODE[14]), STR_3(CODE[6]), STR_2(CODE[11]), STR_1(CODE[13]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK3[64]), 


Critical Paths under _main in COMMON

    _main->_DelayMs
    _lcd_initialize->_send_lcd_data
    _lcd_goto->_send_lcd_data
    _initialize->_wireReadDataByte
    _initialize->_wireWriteDataByte
    _setProximityGain->_wireReadDataByte
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireReadDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireReadDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireReadDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireReadDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireReadDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _readGesture->_decodeGesture
    _readGesture->_wireReadDataByte
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___wmul
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _lcd_putchar->_send_lcd_data
    _lcd_2ndline->_send_lcd_data
    _lcd_home->_send_lcd_data
    _lcd_clear->_send_lcd_data
    _send_lcd_data->_set_lcd_data
    _send_lcd_data->_set_lcd_e
    _send_lcd_data->_set_lcd_rs
    _enableGestureSensor->_wireWriteDataByte
    _setLEDBoost->_wireReadDataByte
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireReadDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireReadDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _setMode->_wireWriteDataByte
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_handleGesture
    _lcd_initialize->_send_lcd_data
    _lcd_goto->_send_lcd_data
    _initialize->_setMode
    _setProximityGain->_wireReadDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireReadDataByte
    _setGestureWaitTime->_wireReadDataByte
    _setGestureLEDDrive->_wireReadDataByte
    _setGestureGain->_wireReadDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireReadDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Read_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _lcd_putstr->_lcd_putchar
    _lcd_putchar->_send_lcd_data
    _lcd_2ndline->_send_lcd_data
    _lcd_home->_send_lcd_data
    _lcd_clear->_send_lcd_data
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireReadDataByte
    _setGestureMode->_wireReadDataByte
    _setGestureIntEnable->_wireReadDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Read_Byte

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    _handleGesture->_readGesture

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   70856
                                             64 BANK1      3     3      0
                            _DelayMs
                _enableGestureSensor
                      _handleGesture
                         _initialize
                          _lcd_clear
                           _lcd_goto
                           _lcd_home
                     _lcd_initialize
                         _lcd_putstr
 ---------------------------------------------------------------------------------
 (1) _lcd_initialize                                       2     2      0    1381
                                              3 BANK0      2     2      0
                          _lcd_clear
                      _send_lcd_data
                          _set_lcd_e
 ---------------------------------------------------------------------------------
 (1) _lcd_goto                                             2     2      0     706
                                              3 BANK0      2     2      0
                      _send_lcd_data
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   39591
                                             17 BANK0      2     2      0
                            _InitI2C
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    2464
                                              3 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    2464
                                              3 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    2628
                                              3 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    2628
                                              3 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    2637
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    2464
                                              3 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    2464
                                              3 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    2637
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        3     3      0    8912
                                             57 BANK0      3     3      0
                 _isGestureAvailable
                          _lcd_clear
                           _lcd_home
                         _lcd_putstr
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    5527
                                             45 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK3     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                    9     5      4     520
                                              8 BANK0      9     5      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    3683
                                             13 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     656
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     724
                                              4 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _isGestureAvailable                                   2     2      0     167
                                             10 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     192
                                              4 COMMON     2     2      0
                                              0 BANK0     16    16      0
 ---------------------------------------------------------------------------------
 (1) _lcd_putstr                                           2     2      0    1868
                                              5 BANK0      2     2      0
                        _lcd_2ndline
                        _lcd_putchar
 ---------------------------------------------------------------------------------
 (2) _lcd_putchar                                          2     2      0     706
                                              3 BANK0      2     2      0
                      _send_lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_2ndline                                          1     1      0     675
                                              3 BANK0      1     1      0
                      _send_lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_home                                             1     1      0     675
                                              3 BANK0      1     1      0
                      _send_lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0     675
                      _send_lcd_data
 ---------------------------------------------------------------------------------
 (3) _send_lcd_data                                        4     3      1     675
                                              5 COMMON     1     0      1
                                              0 BANK0      3     3      0
                       _set_lcd_data
                          _set_lcd_e
                         _set_lcd_rs
 ---------------------------------------------------------------------------------
 (4) _set_lcd_rs                                           1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _set_lcd_e                                            1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _set_lcd_data                                         1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   16881
                                             17 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    2637
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  4     4      0    2671
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    3219
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    3219
                                             12 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    2433
                                              5 COMMON     1     1      0
                                              0 BANK0      3     0      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     164
                                             10 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     130
                                              5 COMMON     1     1      0
                                              8 BANK0      2     2      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        8     8      0      34
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     167
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DelayMs
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
             _I2C_Read_Byte
             _I2C_Send_NACK
             _I2C_Start
             _I2C_Stop
             _I2C_Write_Byte
         _wireWriteDataByte
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _wireWriteDataByte
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
   _handleGesture
     _isGestureAvailable
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _lcd_clear
       _send_lcd_data
         _set_lcd_data
         _set_lcd_e
         _set_lcd_rs
     _lcd_home
       _send_lcd_data
         _set_lcd_data
         _set_lcd_e
         _set_lcd_rs
     _lcd_putstr
       _lcd_2ndline
         _send_lcd_data
           _set_lcd_data
           _set_lcd_e
           _set_lcd_rs
       _lcd_putchar
         _send_lcd_data
           _set_lcd_data
           _set_lcd_e
           _set_lcd_rs
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
   _initialize
     _InitI2C
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
           _I2C_Read_Byte
           _I2C_Send_NACK
           _I2C_Start
           _I2C_Stop
           _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
         _I2C_Read_Byte
         _I2C_Send_NACK
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
       _wireWriteDataByte
         _I2C_Start
         _I2C_Stop
         _I2C_Write_Byte
     _wireReadDataByte
       _I2C_ReStart
       _I2C_Read_Byte
       _I2C_Send_NACK
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
     _wireWriteDataByte
       _I2C_Start
       _I2C_Stop
       _I2C_Write_Byte
   _lcd_clear
     _send_lcd_data
       _set_lcd_data
       _set_lcd_e
       _set_lcd_rs
   _lcd_goto
     _send_lcd_data
       _set_lcd_data
       _set_lcd_e
       _set_lcd_rs
   _lcd_home
     _send_lcd_data
       _set_lcd_data
       _set_lcd_e
       _set_lcd_rs
   _lcd_initialize
     _lcd_clear
       _send_lcd_data
         _set_lcd_data
         _set_lcd_e
         _set_lcd_rs
     _send_lcd_data
       _set_lcd_data
       _set_lcd_e
       _set_lcd_rs
     _set_lcd_e
   _lcd_putstr
     _lcd_2ndline
       _send_lcd_data
         _set_lcd_data
         _set_lcd_e
         _set_lcd_rs
     _lcd_putchar
       _send_lcd_data
         _set_lcd_data
         _set_lcd_e
         _set_lcd_rs

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     129       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     43      4D       7       96.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60     40      40       9       66.7%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      44      11       70.8%
DATA                 0      0     129      12        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Jul 27 11:52:39 2015

                       __CFG_CP$ON 0000                                  _t 0078  
                                pc 0002              ?_setGestureExitThresh 0070  
               __size_of_I2C_Start 0006                       ?_lcd_putchar 0070  
                      _SSPSTATbits 0094                                 _BF 04A0  
                      __CFG_CPD$ON 0000                       ___awdiv@sign 002A  
                               _id 0076                                 fsr 0004  
              ___wmul@multiplicand 0022                                l530 176C  
                              l451 0499                                l427 03ED  
                              l355 0059                                l524 1760  
                              l542 1779                                l518 1766  
                              l390 02E3                                l463 04EF  
                              l439 0442                                l552 17F9  
                              l561 07E4                                l715 0926  
                              l548 17F2                                l558 07BA  
 processGestureData@ud_ratio_first 002F                                _GIE 005F  
                              _RB4 0034                                _RB5 0035  
                              _PEN 048A                                _SEN 0488  
            __end_of_decodeGesture 0508               __size_of_I2C_ReStart 0006  
                              _isr 085D                                fsr0 0004  
                              indf 0000                 I2C_Write_Byte@Byte 0074  
                     __CFG_FOSC$HS 0000                  set_lcd_e@b_output 0074  
                     __CFG_LVP$OFF 0000                               l4013 0778  
                             l4009 06B4                               l4035 06F7  
                             l4027 06CF                               l4019 06B9  
                             l2453 0C83                               l4053 0774  
                             l4133 0A5C                               l4109 08F6  
                             l2471 0CAF                               l2463 0C8B  
                             l2447 0C78                               l4047 0706  
                             l4215 0C2E                               l4119 08DF  
                             l2801 0423                               l2465 0C99  
                             l4049 0767                               l4233 09DE  
                             l4153 0A2C                               l4315 08F8  
                             l4251 0AD2                               l2811 044F  
                             l2475 0CBA                               l4139 0A6E  
                             l4411 061D                               l2821 047A  
                             l2805 043C                               l2741 036E  
                             l4405 0612                               l4503 0DD6  
                             l2831 04A9                               l2479 0CC2  
                             l4159 0A3E                               l4423 0633  
                             l4351 058B                               l4521 0DFA  
                             l2841 04D0                               l2825 0493  
                             l2753 0385                               l3721 091C  
                             l4169 08B1                               l4441 0662  
                             l4417 0628                               l4345 0525  
                             l4515 0DEB                               l2851 0504  
                             l2819 0474                               l2771 03A5  
                             l2747 0379                               l4179 08C8  
                             l4435 0653                               l4363 05A6  
                             l4269 0B7D                               l4533 0E18  
                             l4509 0DE1                               l2845 04E9  
                             l2829 04A7                               l2781 03CE  
                             l2765 0399                               l3901 0236  
                             l3821 0047                               l3805 0D3D  
                             l4701 0FE8                               l4541 0EFC  
                             l4197 0BF3                               l4453 0683  
                             l4429 0644                               l4381 05D9  
                             l4357 0596                               l4287 09B0  
                             l4527 0E09                               l2839 04CA  
                             l2791 03FA                               l2759 038F  
                             l2855 0506                               l3911 025D  
                             l3807 0D75                               l4447 0671  
                             l4375 05C9                               l4623 0E80  
                             l3657 07EC                               l4297 17EA  
                             l2849 04FD                               l2785 03E7  
                             l3745 0883                               l4553 0F3C  
                             l4465 069D                               l4393 05F3  
                             l4369 05B5                               l4483 0DB0  
                             l2779 03C8                               l3931 02AD  
                             l3851 00B2                               l4571 0F9C  
                             l4547 0F1C                               l4459 0692  
                             l4387 05E8                               l4643 0EE7  
                             l3781 0D21                               l3773 0D0E  
                             l3765 0CF3                               l3757 0CD9  
                             l4477 0D9E                               l3933 02B3  
                             l3917 0283                               l3909 0257  
                             l3837 0053                               l4565 0F7C  
                             l4637 0EC8                               l4629 0E9F  
                             l3775 0D0F                               l3767 0D02  
                             l2799 041D                               l3943 02D7  
                             l3927 02A5                               l3919 0289  
                             l3951 02E5                               l3847 00B0  
                             l3839 00A3                               l3871 0101  
                             l4559 0F5C                               l4583 0FDC  
                             l4399 05FE                               l4497 0DCB  
                             l4489 0DBB                               l3857 00BF  
                             l4577 0FBC                               l4585 0FFC  
                             l3963 032A                               l3955 02FE  
                             l3891 020D                               l3867 00F9  
                             l3973 034B                               l3965 0330  
                             l3957 0304                               l3885 01F5  
                             l3991 0C51                               l3895 021E  
                             l3993 0C57                               l3977 0360  
                             l3889 0209                               l3995 0C65  
                             l3899 0232                               ?_isr 0070  
                             l3997 0C33                               STR_1 0814  
                             STR_2 0821                               STR_3 0835  
                             STR_4 0806                               STR_5 082C  
                             STR_6 0859                               STR_7 0846  
                             STR_8 0850                               STR_9 083B  
                             u3005 0483                               u3015 04A3  
                             u2155 0C8E                               u4020 07DB  
                             u4100 17A8                               u3045 04BA  
                             u3055 04D9                               u2175 0C9A  
                             u4025 07CE                               u3065 04F9  
                             u2185 0CA6                               u4026 07CF  
                             u4027 07D4                               u2195 0CB0  
                             u4028 07D5                               u4204 0CEB  
                             u4029 07DA                               u4205 0CE9  
                             u4214 0CF9                               u4215 0CF7  
                             u4135 0927                               u4080 179D  
                             u4145 092E                               u5035 090F  
                             u4335 0066                               u4255 0D46  
                             u2905 03D7                               u4505 0247  
                             u2915 03F7                               u4515 0266  
                             _PEIE 005E                               u4525 0273  
                             u4445 01ED                               _INTE 005C  
                             _INTF 0059                               u4535 0292  
                             u4455 0200                               u2945 040D  
                             u4705 0354                               u4465 0216  
                             u2955 042C                               u4475 0229  
                             u5507 0EC0                               _RCEN 048B  
                             u2965 044C                               u4645 02EE  
                             u4805 0700                               u5517 0EE0  
                             u2895 03B8                               u4655 030D  
                             u4815 0710                               u5607 077E  
                             u5527 0B17                               u4665 031A  
                             u4585 02BC                               u5617 0794  
                             u5537 0F14                               u5627 0B9A  
                             u2995 0464                               u4675 0339  
                             u4595 02C9                               u5547 0F34  
                             u4835 09F5                               i1l84 0864  
                             u5637 0BAA                               u5557 0F54  
                             u4845 0A85                               u5477 0E51  
                             u5567 0F74                               u4935 0BCF  
                             u5487 0E78                               u5577 0F94  
                             u5497 0E98                               u5587 0FB4  
                             u4955 0C0A                               u5597 0FD4  
                             u4995 0B59                               _RSEN 0489  
                             _main 0E1A                               btemp 007E  
            ??_setGestureIntEnable 002A                   __end_of_I2C_Stop 176F  
                             ltemp 007E                               start 0012  
                             ttemp 007E                               wtemp 007E  
                  __end_of_DelayMs 091A                    __end_of_InitI2C 17DB  
                            ??_isr 0070                       ?_readGesture 004D  
                            ?_main 0070                              _ACKEN 048C  
                            _ACKDT 048D                    __end_of___awdiv 0CC7  
                            STR_10 084B                              STR_11 0855  
                            STR_12 0841                      __CFG_WDTE$OFF 0000  
                  ___awdiv@divisor 0024                       ?_setLEDBoost 0070  
                  ___awdiv@counter 0029                       ?_setLEDDrive 0070  
                   _setGestureGain 0BBA                 wireReadDataBlock@j 0030  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _PORTD 0008  
                            _PORTE 0009                     _setGestureMode 0984  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TRISD 0088  
                            _TRISE 0089        __end_of_setProxIntLowThresh 08F8  
             send_lcd_data@uc_data 0075                      __CFG_WRT$HALF 0000  
                    __CFG_PWRTE$ON 0000                    __end_of_getMode 1796  
            isGestureAvailable@val 002B             __size_of_I2C_Read_Byte 0043  
                 _b_i2c_error_flag 006C       __end_of_setProxIntHighThresh 08E1  
                  __end_of_setMode 0D23                  __end_of_I2C_Start 1769  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
     __size_of_setAmbientLightGain 0023                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
           __size_of_I2C_Send_NACK 0007                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F           ?_setLightIntLowThreshold 0023  
       __end_of_setGestureLEDDrive 0C30              setGestureWaitTime@val 002C  
                    _gesture_data_ 0110                    __initialization 0015  
                send_lcd_data@b_rs 0022             ??_setGestureExitThresh 0023  
       processGestureData@lr_delta 0049                       __end_of_main 0EF3  
                _handleGestureFlag 006D         processGestureData@ud_delta 0047  
             __size_of_lcd_2ndline 000B              __end_of_send_lcd_data 0BBA  
           __end_of_setGestureGain 0BF5          __size_of_setProximityGain 0030  
           __end_of_setGestureMode 09B2                             ??_main 00E0  
__size_of_setLightIntHighThreshold 0030          ?_setLightIntHighThreshold 0023  
setLightIntHighThreshold@threshold 0023               __size_of_enablePower 0011  
                 ___awdiv@dividend 0026                 _processGestureData 0035  
     setProxIntLowThresh@threshold 0024                          ??_DelayMs 0076  
                 _wireReadDataByte 0AD4            ?_resetGestureParameters 0070  
                           _SSPADD 0093                             _TRISC3 043B  
                           _TRISC4 043C                             _SSPCON 0014  
                           _SSPBUF 0013                          ??_InitI2C 0074  
              ?_processGestureData 0070                  _gesture_lr_delta_ 0060  
    setProxIntHighThresh@threshold 0024                  _gesture_lr_count_ 005E  
              wireReadDataByte@reg 0028                wireReadDataByte@val 0029  
                 __end_of_lcd_home 17B7                   __end_of_lcd_goto 07FD  
                _gesture_ud_delta_ 006A                      _I2C_Read_Byte 07AD  
       __end_of_isGestureAvailable 0885                  _gesture_ud_count_ 0068  
                           ___wmul 091A                          ??___awdiv 0028  
       __end_of_setGestureWaitTime 09E0                   ___awdiv@quotient 002B  
                  ?_setGestureGain 0070                      _I2C_Send_NACK 1775  
                        ??_getMode 002A                    ?_setGestureMode 0070  
             __size_of_lcd_putchar 000C            ??_setGestureEnterThresh 0023  
             ??_processGestureData 002D                          ?_I2C_Stop 0070  
                        ??_setMode 002D                             saved_w 007E  
                readGesture@motion 0051                   ??_lcd_initialize 0023  
   __end_of_resetGestureParameters 089C            __end_of__initialization 0031  
           setGestureWaitTime@time 002B                     ?_I2C_Read_Byte 0070  
                   __pcstackCOMMON 0070               _setProxIntHighThresh 08CA  
                   _gesture_state_ 0066                     ?_I2C_Send_NACK 0070  
             __size_of_readGesture 010E              __end_of_handleGesture 1000  
                       ??_I2C_Stop 0074                 __size_of_lcd_clear 0007  
               _gesture_far_count_ 005C               __size_of_setLEDBoost 003B  
             __size_of_setLEDDrive 0030                         __pbssBANK0 005C  
                       __pbssBANK1 00E3                         __pbssBANK2 0110  
             wireWriteDataByte@reg 0075               wireWriteDataByte@val 0020  
              getMode@enable_value 002B                         __pmaintext 0E1A  
          setGestureLEDDrive@drive 002D                            ?___wmul 0020  
     __size_of_enableGestureSensor 0098                         __pintentry 0004  
            ?_setProxIntHighThresh 0070            __size_of_I2C_Write_Byte 0014  
                          _ACKSTAT 048E                      ??_I2C_ReStart 0074  
                 _setProximityGain 0A70                        setMode@mode 0030  
               __size_of_set_lcd_e 000B                _setAmbientLightGain 093D  
                _wireReadDataBlock 0D23               wireReadDataBlock@len 002A  
             wireReadDataBlock@reg 002F               wireReadDataBlock@val 0028  
               ?_wireReadDataBlock 0028                         _lcd_putstr 0C30  
      __end_of_setGestureIntEnable 0AD4                          ?_lcd_home 0070  
                        ?_lcd_goto 0070                            _SSPSTAT 0094  
  processGestureData@lr_ratio_last 0035                         __stringtab 0800  
                          _DelayMs 08F8                       readGesture@i 0057  
             ?_setAmbientLightGain 0070                ??_wireReadDataBlock 002C  
                          _InitI2C 17CE                      ?_set_lcd_data 0070  
                        _I2C_Start 1763                    ??_I2C_Read_Byte 0020  
                    setMode@enable 002C             __size_of_decodeGesture 01A6  
                __end_of_lcd_clear 1783                    ??_I2C_Send_NACK 0074  
                          ___awdiv 0C6C                    __size_of___wmul 0023  
         __end_of_wireReadDataByte 0B0B                         _initialize 0508  
                          _getMode 178B   __size_of_setLightIntLowThreshold 0030  
               _setGestureLEDDrive 0BF5                            __ptext1 0B0B  
                          __ptext2 07F0                            __ptext3 0508  
                          __ptext4 0A70                            __ptext5 08E1  
                          __ptext6 08CA                            __ptext7 0A40  
                          __ptext8 0A10                            __ptext9 09E0  
        __end_of_wireReadDataBlock 0D82                       __size_of_isr 0012  
                          _setMode 0CC7                __end_of_I2C_ReStart 1763  
              ?_setGestureLEDDrive 0070                            clrloop0 1784  
                       ??_lcd_home 0023                         ??_lcd_goto 0023  
             end_of_initialization 0031                          DelayMs@Ms 0074  
            ??_setAmbientLightGain 002A       __size_of_setProxIntLowThresh 0017  
                   ??_set_lcd_data 0074                  __end_of_set_lcd_e 17A1  
                       ?_I2C_Start 0070      enableGestureSensor@interrupts 0032  
    setGestureExitThresh@threshold 0024                         _set_lcd_rs 17A1  
             ??_setGestureLEDDrive 002A                 readGesture@gstatus 0053  
                     initialize@id 0032                      ??_lcd_2ndline 0023  
                 ??_setGestureGain 002A             ??_setProxIntHighThresh 0023  
                 ??_setGestureMode 002A      __size_of_setGestureExitThresh 0017  
                _wireWriteDataByte 0960                      ??_enablePower 0076  
               ?_wireWriteDataByte 0020    setLightIntHighThreshold@val_low 0026  
   __size_of_setGestureEnterThresh 0017      __end_of_setGestureEnterThresh 08B3  
                    _decodeGesture 0362                 _isGestureAvailable 086F  
               _setGestureWaitTime 09B2                  __size_of_I2C_Stop 0006  
                      ?_lcd_putstr 0070                ??_wireWriteDataByte 0075  
  processGestureData@ud_ratio_last 0033                ?_isGestureAvailable 0070  
              ?_setGestureWaitTime 0070             __size_of_send_lcd_data 003B  
            setProximityGain@drive 002D                      ??_lcd_putchar 0023  
        __end_of_wireWriteDataByte 0984                     _I2C_Write_Byte 17EC  
             ??_isGestureAvailable 002A                     __end_of___wmul 093D  
             ??_setGestureWaitTime 002A                        ?_initialize 0070  
                      _I2C_ReStart 175D           _setLightIntHighThreshold 0A10  
       __size_of_wireReadDataBlock 005F                  lcd_putchar@c_data 0024  
                  _gesture_motion_ 0062                __end_of_lcd_2ndline 17C2  
      __size_of_processGestureData 032D                     ?_decodeGesture 0070  
              start_initialization 0015                 set_lcd_rs@b_output 0074  
               setGestureGain@gain 002D                        __end_of_isr 086F  
             lcd_putstr@csz_string 0026                lcd_goto@uc_position 0024  
 setLightIntHighThreshold@val_high 0027                _enableGestureSensor 0D82  
              __end_of_enablePower 17EC           __end_of_setProximityGain 0AA0  
         processGestureData@d_last 0040           processGestureData@l_last 0041  
                      ??_I2C_Start 0074           processGestureData@r_last 0042  
         processGestureData@u_last 003F                        ?_set_lcd_rs 0070  
           __end_of_I2C_Write_Byte 1800    setLightIntLowThreshold@val_high 0027  
                         ??___wmul 0074               ?_enableGestureSensor 0070  
                    ??_readGesture 004F                 setGestureMode@mode 002B  
              __size_of_lcd_putstr 003C            _setLightIntLowThreshold 0A40  
        setGestureIntEnable@enable 002D           setAmbientLightGain@drive 002B  
                    _send_lcd_data 0B7F               __end_of_set_lcd_data 1775  
                    ??_setLEDBoost 002A                      ??_setLEDDrive 002A  
              __end_of_lcd_putchar 17CE             setGestureIntEnable@val 002C  
                      __pbssCOMMON 0076                          ___latbits 0002  
                    __pcstackBANK0 0020                      __pcstackBANK1 00A0  
                    __pcstackBANK3 0190                           ?_DelayMs 0074  
            readGesture@fifo_data2 00A0                  __size_of_lcd_home 000B  
                __size_of_lcd_goto 000D              readGesture@fifo_level 0056  
              __size_of_initialize 0197                           ?_InitI2C 0070  
           __size_of_handleGesture 010D            __size_of_lcd_initialize 0039  
                  ?_I2C_Write_Byte 0070              ??_enableGestureSensor 0031  
                      _lcd_2ndline 17B7                           ?___awdiv 0024  
       __size_of_wireWriteDataByte 0024                          _lcd_clear 177C  
              _setProxIntLowThresh 08E1                     ?_send_lcd_data 0075  
                        __pstrings 0800                           ?_getMode 0070  
               I2C_Read_Byte@count 0024                    ??_decodeGesture 0074  
                ?_wireReadDataByte 0070                        _enablePower 17DB  
               ??_wireReadDataByte 0075                __end_of_readGesture 07AD  
                         _I2C_Stop 1769           ??_resetGestureParameters 0074  
                         ?_setMode 002C                __size_of_set_lcd_rs 000B  
              __end_of_setLEDBoost 0B7F                __end_of_setLEDDrive 0A10  
              set_lcd_data@uc_data 0074               ?_setProxIntLowThresh 0070  
            readGesture@bytes_read 0054                  interrupt_function 0004  
                   ___wmul@product 0074                          clear_ram0 1783  
     __size_of_setGestureIntEnable 0034                _gesture_near_count_ 0064  
                        _set_lcd_e 1796              __end_of_I2C_Read_Byte 07F0  
        ??_setLightIntLowThreshold 0025                     setLEDBoost@val 002C  
                      _lcd_putchar 17C2                         ?_lcd_clear 0070  
            __end_of_I2C_Send_NACK 177C                     setLEDDrive@val 002C  
 processGestureData@lr_ratio_first 0031                        __stringbase 0805  
                ___wmul@multiplier 0020          processGestureData@d_first 0044  
                    _handleGesture 0EF3        __end_of_setAmbientLightGain 0960  
        processGestureData@l_first 0045                       ??_lcd_putstr 0025  
     __end_of_setGestureExitThresh 08CA          processGestureData@r_first 0046  
        processGestureData@u_first 0043              ??_setProxIntLowThresh 0023  
                setGestureGain@val 002C                   __size_of_DelayMs 0022  
                 __size_of_InitI2C 000D             _processGestureData$410 0037  
           _processGestureData$411 0039             _processGestureData$412 003B  
           _processGestureData$413 003D                         ?_set_lcd_e 0070  
       ??_setLightIntHighThreshold 0025        __size_of_setGestureLEDDrive 003B  
                   setMode@reg_val 002F     setLightIntLowThreshold@val_low 0026  
                setGestureMode@val 002C              __size_of_set_lcd_data 0006  
                  ??_send_lcd_data 0020                   __size_of___awdiv 005B  
    __size_of_setProxIntHighThresh 0017                        _readGesture 069F  
               __end_of_lcd_putstr 0C6C                       ??_initialize 0031  
                     ?_I2C_ReStart 0070                 __end_of__stringtab 0806  
 setLightIntLowThreshold@threshold 0023                     ?_handleGesture 0070  
                 __size_of_getMode 000B               readGesture@fifo_data 0190  
                      _setLEDBoost 0B44                        _setLEDDrive 09E0  
                DelayMs@delay_cnst 0020    __size_of_resetGestureParameters 0017  
  __end_of_setLightIntLowThreshold 0A70              setGestureLEDDrive@val 002C  
                 __size_of_setMode 005C                           __ptext10 09B2  
                         __ptext11 0BF5                           __ptext20 0035  
                         __ptext12 0BBA                           __ptext21 091A  
                         __ptext13 08B3                           __ptext30 0B7F  
                         __ptext22 0C6C                           __ptext14 089C  
                         __ptext31 17A1                           __ptext23 086F  
                         __ptext15 093D                           __ptext40 0CC7  
                         __ptext32 1796                           __ptext24 0362  
                         __ptext16 17CE                           __ptext41 0960  
                         __ptext33 176F                           __ptext25 0C30  
                         __ptext17 0EF3                           __ptext50 08F8  
                         __ptext42 178B                           __ptext34 0D82  
                         __ptext26 17C2                           __ptext18 069F  
                         __ptext51 085D                           __ptext43 0AD4  
                         __ptext35 0B44                           __ptext27 17B7  
                         __ptext19 0D23                           __ptext44 17EC  
                         __ptext36 0984                           __ptext28 17AC  
                         __ptext45 1769                           __ptext37 0AA0  
                         __ptext29 177C                           __ptext46 1763  
                         __ptext38 0885                           __ptext47 1775  
                         __ptext39 17DB                           __ptext48 07AD  
                         __ptext49 175D              _setGestureEnterThresh 089C  
                         _lcd_home 17AC                           _lcd_goto 07F0  
   setGestureEnterThresh@threshold 0024                      __size_of_main 00D9  
                ?_setProximityGain 0070                       _set_lcd_data 176F  
               __end_of_initialize 069F                     _lcd_initialize 0B0B  
               ??_setProximityGain 002A                       ??_set_lcd_rs 0074  
                      ??_lcd_clear 0076        __size_of_isGestureAvailable 0016  
              setProximityGain@val 002C        __size_of_setGestureWaitTime 002E  
       __end_of_processGestureData 0362            __size_of_setGestureGain 003B  
          __size_of_setGestureMode 002E             setAmbientLightGain@val 002C  
               __end_of_set_lcd_rs 17AC                           intlevel1 0000  
           __end_of_lcd_initialize 0B44                   ??_I2C_Write_Byte 0074  
                        stringcode 0800             _resetGestureParameters 0885  
                      ??_set_lcd_e 0074                  _decodeGesture$420 002A  
                _decodeGesture$421 002C                  _decodeGesture$422 002E  
                _decodeGesture$415 0020                  _decodeGesture$416 0022  
                _decodeGesture$417 0024                  _decodeGesture$418 0026  
                _decodeGesture$419 0028                       ?_lcd_2ndline 0070  
             _setGestureExitThresh 08B3                    ??_handleGesture 0059  
                       _OPTION_REG 0081                       lcd_bcd@F1131 00E3  
                     ?_enablePower 0070                _setGestureIntEnable 0AA0  
                 setLEDBoost@boost 002D                           stringdir 0800  
                         stringtab 0800             ?_setGestureEnterThresh 0070  
        __size_of_wireReadDataByte 0037                   setLEDDrive@drive 002D  
              processGestureData@i 004B                    ?_lcd_initialize 0070  
      __end_of_enableGestureSensor 0E1A               ?_setGestureIntEnable 0070  
 __end_of_setLightIntHighThreshold 0A40  
